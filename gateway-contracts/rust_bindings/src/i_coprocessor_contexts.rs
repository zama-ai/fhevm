/**

Generated by the following Solidity interface...
```solidity
interface ICoprocessorContexts {
    type ContextStatus is uint8;
    struct CoprocessorContext {
        uint256 contextId;
        uint256 previousContextId;
        uint256 featureSet;
        CoprocessorV2[] coprocessors;
    }
    struct CoprocessorContextTimePeriods {
        uint256 preActivationTimePeriod;
        uint256 suspendedTimePeriod;
    }
    struct CoprocessorV2 {
        string name;
        address txSenderAddress;
        address signerAddress;
        string storageUrl;
    }

    error CoprocessorContextNotInitialized(uint256 contextId);
    error CoprocessorSignerAddressesNotUnique(address signerAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error CoprocessorTxSenderAddressesNotUnique(address txSenderAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error EmptyCoprocessors();
    error InvalidContextStatusForceUpdate(uint256 contextId, ContextStatus status);
    error NoActiveCoprocessorContext();
    error NoPreActivationCoprocessorContext();
    error NoSuspendedCoprocessorContext();
    error NotCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress);
    error NotCoprocessorSignerFromContext(uint256 contextId, address signerAddress);
    error NotCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress);
    error NullCoprocessorSignerAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error NullCoprocessorTxSenderAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);

    event ActivateCoprocessorContext(uint256 contextId);
    event CompromiseCoprocessorContext(uint256 contextId);
    event DeactivateCoprocessorContext(uint256 contextId);
    event DestroyCoprocessorContext(uint256 contextId);
    event InitializeCoprocessorContexts(uint256 featureSet, CoprocessorV2[] coprocessors);
    event NewCoprocessorContext(CoprocessorContext activeCoprocessorContext, CoprocessorContext newCoprocessorContext, CoprocessorContextTimePeriods timePeriods);
    event PreActivateCoprocessorContext(CoprocessorContext newCoprocessorContext, uint256 activationBlockTimestamp);
    event SuspendCoprocessorContext(uint256 contextId, uint256 deactivatedBlockTimestamp);

    function addCoprocessorContext(uint256 featureSet, CoprocessorV2[] memory coprocessors, CoprocessorContextTimePeriods memory timePeriods) external;
    function checkIsCoprocessorSignerFromContext(uint256 contextId, address signerAddress) external view;
    function checkIsCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress) external view;
    function forceUpdateContextToStatus(uint256 contextId, ContextStatus status) external;
    function getActiveCoprocessorContext() external view returns (CoprocessorContext memory);
    function getActiveCoprocessorContextId() external view returns (uint256);
    function getCoprocessorActivationBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorContextStatus(uint256 contextId) external view returns (ContextStatus);
    function getCoprocessorDeactivatedBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress) external view returns (CoprocessorV2 memory);
    function getCoprocessorMajorityThresholdFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorSignersFromContext(uint256 contextId) external view returns (address[] memory);
    function getCoprocessorTxSendersFromContext(uint256 contextId) external view returns (address[] memory);
    function getPreActivationCoprocessorContextId() external view returns (uint256);
    function getSuspendedCoprocessorContextId() external view returns (uint256);
    function getVersion() external pure returns (string memory);
    function isCoprocessorContextActiveOrSuspended(uint256 contextId) external view returns (bool);
    function refreshCoprocessorContextStatuses() external;
    function swapSuspendedCoprocessorContextWithActive(uint256 suspendedTimePeriod) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "addCoprocessorContext",
    "inputs": [
      {
        "name": "featureSet",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      },
      {
        "name": "timePeriods",
        "type": "tuple",
        "internalType": "struct CoprocessorContextTimePeriods",
        "components": [
          {
            "name": "preActivationTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "suspendedTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "checkIsCoprocessorSignerFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "checkIsCoprocessorTxSenderFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "forceUpdateContextToStatus",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getActiveCoprocessorContext",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorActivationBlockTimestampFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorContextStatus",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorDeactivatedBlockTimestampFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct CoprocessorV2",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorMajorityThresholdFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorSignersFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorTxSendersFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPreActivationCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSuspendedCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "isCoprocessorContextActiveOrSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "refreshCoprocessorContextStatuses",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapSuspendedCoprocessorContextWithActive",
    "inputs": [
      {
        "name": "suspendedTimePeriod",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ActivateCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CompromiseCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DeactivateCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DestroyCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "InitializeCoprocessorContexts",
    "inputs": [
      {
        "name": "featureSet",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "indexed": false,
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NewCoprocessorContext",
    "inputs": [
      {
        "name": "activeCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "newCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "timePeriods",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContextTimePeriods",
        "components": [
          {
            "name": "preActivationTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "suspendedTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreActivateCoprocessorContext",
    "inputs": [
      {
        "name": "newCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "activationBlockTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SuspendCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "deactivatedBlockTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "CoprocessorContextNotInitialized",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorSignerAddressesNotUnique",
    "inputs": [
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorTxSenderAddressesNotUnique",
    "inputs": [
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "EmptyCoprocessors",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidContextStatusForceUpdate",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ]
  },
  {
    "type": "error",
    "name": "NoActiveCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoPreActivationCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoSuspendedCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotCoprocessorFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotCoprocessorSignerFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotCoprocessorTxSenderFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NullCoprocessorSignerAddress",
    "inputs": [
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "NullCoprocessorTxSenderAddress",
    "inputs": [
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ICoprocessorContexts {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ContextStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ContextStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from_underlying(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into_underlying(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl From<u8> for ContextStatus {
            fn from(value: u8) -> Self {
                Self::from_underlying(value)
            }
        }
        #[automatically_derived]
        impl From<ContextStatus> for u8 {
            fn from(value: ContextStatus) -> Self {
                value.into_underlying()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ContextStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ContextStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorContext { uint256 contextId; uint256 previousContextId; uint256 featureSet; CoprocessorV2[] coprocessors; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub previousContextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContext> for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContext) -> Self {
                (
                    value.contextId,
                    value.previousContextId,
                    value.featureSet,
                    value.coprocessors,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    previousContextId: tuple.1,
                    featureSet: tuple.2,
                    coprocessors: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CoprocessorContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousContextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorContext {
            const NAME: &'static str = "CoprocessorContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorContext(uint256 contextId,uint256 previousContextId,uint256 featureSet,CoprocessorV2[] coprocessors)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <CoprocessorV2 as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <CoprocessorV2 as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contextId)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.previousContextId,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.featureSet)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.coprocessors)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contextId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.previousContextId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.featureSet,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.coprocessors,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contextId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.previousContextId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.featureSet,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    CoprocessorV2,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.coprocessors,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorContextTimePeriods { uint256 preActivationTimePeriod; uint256 suspendedTimePeriod; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContextTimePeriods {
        #[allow(missing_docs)]
        pub preActivationTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContextTimePeriods>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContextTimePeriods) -> Self {
                (value.preActivationTimePeriod, value.suspendedTimePeriod)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorContextTimePeriods {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preActivationTimePeriod: tuple.0,
                    suspendedTimePeriod: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorContextTimePeriods {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self>
        for CoprocessorContextTimePeriods {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.preActivationTimePeriod,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedTimePeriod),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorContextTimePeriods {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorContextTimePeriods {
            const NAME: &'static str = "CoprocessorContextTimePeriods";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorContextTimePeriods(uint256 preActivationTimePeriod,uint256 suspendedTimePeriod)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.preActivationTimePeriod,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.suspendedTimePeriod,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorContextTimePeriods {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.preActivationTimePeriod,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.suspendedTimePeriod,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.preActivationTimePeriod,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.suspendedTimePeriod,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorV2 { string name; address txSenderAddress; address signerAddress; string storageUrl; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorV2 {
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub storageUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::String,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::String,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::String,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::String,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorV2> for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorV2) -> Self {
                (
                    value.name,
                    value.txSenderAddress,
                    value.signerAddress,
                    value.storageUrl,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CoprocessorV2 {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    name: tuple.0,
                    txSenderAddress: tuple.1,
                    signerAddress: tuple.2,
                    storageUrl: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorV2 {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CoprocessorV2 {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.storageUrl,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorV2 {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorV2 {
            const NAME: &'static str = "CoprocessorV2";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorV2(string name,address txSenderAddress,address signerAddress,string storageUrl)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.name,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.txSenderAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.signerAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.storageUrl,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorV2 {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.name,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.txSenderAddress,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.signerAddress,
                    )
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.storageUrl,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.name,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.txSenderAddress,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.signerAddress,
                    out,
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.storageUrl,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorContextNotInitialized(uint256)` and selector `0xabf9e7b0`.
```solidity
error CoprocessorContextNotInitialized(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContextNotInitialized {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContextNotInitialized>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContextNotInitialized) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorContextNotInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorContextNotInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorContextNotInitialized(uint256)";
            const SELECTOR: [u8; 4] = [171u8, 249u8, 231u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorSignerAddressesNotUnique(address,uint256,(string,address,address,string)[])` and selector `0xc826e1a2`.
```solidity
error CoprocessorSignerAddressesNotUnique(address signerAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorSignerAddressesNotUnique {
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorSignerAddressesNotUnique>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorSignerAddressesNotUnique) -> Self {
                (value.signerAddress, value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorSignerAddressesNotUnique {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    signerAddress: tuple.0,
                    coprocessorIndex: tuple.1,
                    coprocessors: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorSignerAddressesNotUnique {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorSignerAddressesNotUnique(address,uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [200u8, 38u8, 225u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorTxSenderAddressesNotUnique(address,uint256,(string,address,address,string)[])` and selector `0x64d52759`.
```solidity
error CoprocessorTxSenderAddressesNotUnique(address txSenderAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorTxSenderAddressesNotUnique {
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorTxSenderAddressesNotUnique>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorTxSenderAddressesNotUnique) -> Self {
                (value.txSenderAddress, value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorTxSenderAddressesNotUnique {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    txSenderAddress: tuple.0,
                    coprocessorIndex: tuple.1,
                    coprocessors: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorTxSenderAddressesNotUnique {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorTxSenderAddressesNotUnique(address,uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [100u8, 213u8, 39u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EmptyCoprocessors()` and selector `0x8af082ef`.
```solidity
error EmptyCoprocessors();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyCoprocessors;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyCoprocessors> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyCoprocessors) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyCoprocessors {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyCoprocessors {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyCoprocessors()";
            const SELECTOR: [u8; 4] = [138u8, 240u8, 130u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidContextStatusForceUpdate(uint256,uint8)` and selector `0xf0bed68f`.
```solidity
error InvalidContextStatusForceUpdate(uint256 contextId, ContextStatus status);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidContextStatusForceUpdate {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            ContextStatus,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            <ContextStatus as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidContextStatusForceUpdate>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidContextStatusForceUpdate) -> Self {
                (value.contextId, value.status)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidContextStatusForceUpdate {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    status: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidContextStatusForceUpdate {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidContextStatusForceUpdate(uint256,uint8)";
            const SELECTOR: [u8; 4] = [240u8, 190u8, 214u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <ContextStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoActiveCoprocessorContext()` and selector `0x046593ea`.
```solidity
error NoActiveCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoActiveCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoActiveCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoActiveCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoActiveCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoActiveCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoActiveCoprocessorContext()";
            const SELECTOR: [u8; 4] = [4u8, 101u8, 147u8, 234u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoPreActivationCoprocessorContext()` and selector `0xb9e861b2`.
```solidity
error NoPreActivationCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoPreActivationCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoPreActivationCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoPreActivationCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoPreActivationCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoPreActivationCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoPreActivationCoprocessorContext()";
            const SELECTOR: [u8; 4] = [185u8, 232u8, 97u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoSuspendedCoprocessorContext()` and selector `0x21fb08f9`.
```solidity
error NoSuspendedCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoSuspendedCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoSuspendedCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoSuspendedCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoSuspendedCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoSuspendedCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoSuspendedCoprocessorContext()";
            const SELECTOR: [u8; 4] = [33u8, 251u8, 8u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorFromContext(uint256,address)` and selector `0xc312e73e`.
```solidity
error NotCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorFromContext) -> Self {
                (value.contextId, value.coprocessorTxSenderAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    coprocessorTxSenderAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [195u8, 18u8, 231u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorSignerFromContext(uint256,address)` and selector `0x554f8c5f`.
```solidity
error NotCoprocessorSignerFromContext(uint256 contextId, address signerAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorSignerFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorSignerFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorSignerFromContext) -> Self {
                (value.contextId, value.signerAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorSignerFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    signerAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorSignerFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorSignerFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [85u8, 79u8, 140u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorTxSenderFromContext(uint256,address)` and selector `0x29a993c1`.
```solidity
error NotCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorTxSenderFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorTxSenderFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorTxSenderFromContext) -> Self {
                (value.contextId, value.txSenderAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorTxSenderFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    txSenderAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorTxSenderFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorTxSenderFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [41u8, 169u8, 147u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NullCoprocessorSignerAddress(uint256,(string,address,address,string)[])` and selector `0x4a6c5974`.
```solidity
error NullCoprocessorSignerAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NullCoprocessorSignerAddress {
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NullCoprocessorSignerAddress>
        for UnderlyingRustTuple<'_> {
            fn from(value: NullCoprocessorSignerAddress) -> Self {
                (value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NullCoprocessorSignerAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    coprocessorIndex: tuple.0,
                    coprocessors: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NullCoprocessorSignerAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NullCoprocessorSignerAddress(uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [74u8, 108u8, 89u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NullCoprocessorTxSenderAddress(uint256,(string,address,address,string)[])` and selector `0x9edb7861`.
```solidity
error NullCoprocessorTxSenderAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NullCoprocessorTxSenderAddress {
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NullCoprocessorTxSenderAddress>
        for UnderlyingRustTuple<'_> {
            fn from(value: NullCoprocessorTxSenderAddress) -> Self {
                (value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NullCoprocessorTxSenderAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    coprocessorIndex: tuple.0,
                    coprocessors: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NullCoprocessorTxSenderAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NullCoprocessorTxSenderAddress(uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [158u8, 219u8, 120u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ActivateCoprocessorContext(uint256)` and selector `0x6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71`.
```solidity
event ActivateCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActivateCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActivateCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ActivateCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                108u8, 140u8, 4u8, 201u8, 254u8, 163u8, 55u8, 114u8, 11u8, 125u8, 250u8,
                220u8, 163u8, 101u8, 232u8, 80u8, 3u8, 81u8, 20u8, 253u8, 8u8, 27u8,
                88u8, 208u8, 48u8, 175u8, 190u8, 139u8, 93u8, 195u8, 190u8, 113u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &ActivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CompromiseCoprocessorContext(uint256)` and selector `0xee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf21`.
```solidity
event CompromiseCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CompromiseCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CompromiseCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CompromiseCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                238u8, 126u8, 248u8, 57u8, 99u8, 65u8, 113u8, 37u8, 210u8, 116u8, 48u8,
                120u8, 159u8, 198u8, 233u8, 65u8, 148u8, 56u8, 30u8, 130u8, 195u8, 205u8,
                166u8, 130u8, 96u8, 208u8, 231u8, 207u8, 195u8, 30u8, 175u8, 33u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CompromiseCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CompromiseCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &CompromiseCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DeactivateCoprocessorContext(uint256)` and selector `0x1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898`.
```solidity
event DeactivateCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DeactivateCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DeactivateCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DeactivateCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                27u8, 170u8, 8u8, 216u8, 222u8, 24u8, 232u8, 226u8, 40u8, 118u8, 145u8,
                177u8, 48u8, 151u8, 72u8, 1u8, 9u8, 129u8, 235u8, 223u8, 209u8, 42u8,
                23u8, 61u8, 133u8, 116u8, 101u8, 117u8, 72u8, 165u8, 40u8, 152u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DeactivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DeactivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DeactivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DestroyCoprocessorContext(uint256)` and selector `0xf20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be5`.
```solidity
event DestroyCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DestroyCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DestroyCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DestroyCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                242u8, 11u8, 41u8, 152u8, 4u8, 201u8, 193u8, 214u8, 218u8, 59u8, 130u8,
                65u8, 76u8, 122u8, 160u8, 168u8, 69u8, 205u8, 186u8, 186u8, 226u8, 217u8,
                14u8, 70u8, 227u8, 96u8, 163u8, 121u8, 167u8, 123u8, 123u8, 229u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DestroyCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DestroyCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DestroyCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `InitializeCoprocessorContexts(uint256,(string,address,address,string)[])` and selector `0x13c5fd631ca031552fe9e38d911910a5980f6608eea323696e04db0fec0c9557`.
```solidity
event InitializeCoprocessorContexts(uint256 featureSet, CoprocessorV2[] coprocessors);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct InitializeCoprocessorContexts {
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for InitializeCoprocessorContexts {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "InitializeCoprocessorContexts(uint256,(string,address,address,string)[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                19u8, 197u8, 253u8, 99u8, 28u8, 160u8, 49u8, 85u8, 47u8, 233u8, 227u8,
                141u8, 145u8, 25u8, 16u8, 165u8, 152u8, 15u8, 102u8, 8u8, 238u8, 163u8,
                35u8, 105u8, 110u8, 4u8, 219u8, 15u8, 236u8, 12u8, 149u8, 87u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    featureSet: data.0,
                    coprocessors: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for InitializeCoprocessorContexts {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&InitializeCoprocessorContexts> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &InitializeCoprocessorContexts,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `NewCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256))` and selector `0xaf58a18a4e4159fa706c0d4e0fdab0930f97679319cddbc9c9199b0cd104b6ef`.
```solidity
event NewCoprocessorContext(CoprocessorContext activeCoprocessorContext, CoprocessorContext newCoprocessorContext, CoprocessorContextTimePeriods timePeriods);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewCoprocessorContext {
        #[allow(missing_docs)]
        pub activeCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub newCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewCoprocessorContext {
            type DataTuple<'a> = (
                CoprocessorContext,
                CoprocessorContext,
                CoprocessorContextTimePeriods,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "NewCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                175u8, 88u8, 161u8, 138u8, 78u8, 65u8, 89u8, 250u8, 112u8, 108u8, 13u8,
                78u8, 15u8, 218u8, 176u8, 147u8, 15u8, 151u8, 103u8, 147u8, 25u8, 205u8,
                219u8, 201u8, 201u8, 25u8, 155u8, 12u8, 209u8, 4u8, 182u8, 239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    activeCoprocessorContext: data.0,
                    newCoprocessorContext: data.1,
                    timePeriods: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.activeCoprocessorContext,
                    ),
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.newCoprocessorContext,
                    ),
                    <CoprocessorContextTimePeriods as alloy_sol_types::SolType>::tokenize(
                        &self.timePeriods,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NewCoprocessorContext) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PreActivateCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),uint256)` and selector `0x2b0188fc4bed471ee216dc6cb9650beb288892034ebee7301b32391add2a66b8`.
```solidity
event PreActivateCoprocessorContext(CoprocessorContext newCoprocessorContext, uint256 activationBlockTimestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreActivateCoprocessorContext {
        #[allow(missing_docs)]
        pub newCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub activationBlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreActivateCoprocessorContext {
            type DataTuple<'a> = (
                CoprocessorContext,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreActivateCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                43u8, 1u8, 136u8, 252u8, 75u8, 237u8, 71u8, 30u8, 226u8, 22u8, 220u8,
                108u8, 185u8, 101u8, 11u8, 235u8, 40u8, 136u8, 146u8, 3u8, 78u8, 190u8,
                231u8, 48u8, 27u8, 50u8, 57u8, 26u8, 221u8, 42u8, 102u8, 184u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    newCoprocessorContext: data.0,
                    activationBlockTimestamp: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.newCoprocessorContext,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.activationBlockTimestamp,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreActivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreActivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreActivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SuspendCoprocessorContext(uint256,uint256)` and selector `0x3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc`.
```solidity
event SuspendCoprocessorContext(uint256 contextId, uint256 deactivatedBlockTimestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SuspendCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deactivatedBlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SuspendCoprocessorContext {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SuspendCoprocessorContext(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                48u8, 128u8, 242u8, 184u8, 13u8, 218u8, 71u8, 72u8, 202u8, 41u8, 38u8,
                166u8, 65u8, 250u8, 80u8, 7u8, 115u8, 80u8, 88u8, 220u8, 95u8, 90u8,
                178u8, 89u8, 78u8, 236u8, 167u8, 65u8, 151u8, 163u8, 172u8, 204u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    contextId: data.0,
                    deactivatedBlockTimestamp: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.deactivatedBlockTimestamp,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SuspendCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SuspendCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SuspendCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))` and selector `0x84cae187`.
```solidity
function addCoprocessorContext(uint256 featureSet, CoprocessorV2[] memory coprocessors, CoprocessorContextTimePeriods memory timePeriods) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCoprocessorContextCall {
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))`](addCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCoprocessorContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
                CoprocessorContextTimePeriods,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
                >,
                <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCoprocessorContextCall) -> Self {
                    (value.featureSet, value.coprocessors, value.timePeriods)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        featureSet: tuple.0,
                        coprocessors: tuple.1,
                        timePeriods: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCoprocessorContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addCoprocessorContextReturn {
            fn _tokenize(
                &self,
            ) -> <addCoprocessorContextCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCoprocessorContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
                CoprocessorContextTimePeriods,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addCoprocessorContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))";
            const SELECTOR: [u8; 4] = [132u8, 202u8, 225u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                    <CoprocessorContextTimePeriods as alloy_sol_types::SolType>::tokenize(
                        &self.timePeriods,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addCoprocessorContextReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `checkIsCoprocessorSignerFromContext(uint256,address)` and selector `0x9efb484e`.
```solidity
function checkIsCoprocessorSignerFromContext(uint256 contextId, address signerAddress) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorSignerFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`checkIsCoprocessorSignerFromContext(uint256,address)`](checkIsCoprocessorSignerFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorSignerFromContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorSignerFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorSignerFromContextCall) -> Self {
                    (value.contextId, value.signerAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorSignerFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        signerAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorSignerFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorSignerFromContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorSignerFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl checkIsCoprocessorSignerFromContextReturn {
            fn _tokenize(
                &self,
            ) -> <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkIsCoprocessorSignerFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = checkIsCoprocessorSignerFromContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkIsCoprocessorSignerFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [158u8, 251u8, 72u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                checkIsCoprocessorSignerFromContextReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `checkIsCoprocessorTxSenderFromContext(uint256,address)` and selector `0xf192cf68`.
```solidity
function checkIsCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorTxSenderFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`checkIsCoprocessorTxSenderFromContext(uint256,address)`](checkIsCoprocessorTxSenderFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorTxSenderFromContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorTxSenderFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorTxSenderFromContextCall) -> Self {
                    (value.contextId, value.txSenderAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorTxSenderFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        txSenderAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorTxSenderFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorTxSenderFromContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorTxSenderFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl checkIsCoprocessorTxSenderFromContextReturn {
            fn _tokenize(
                &self,
            ) -> <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkIsCoprocessorTxSenderFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = checkIsCoprocessorTxSenderFromContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkIsCoprocessorTxSenderFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [241u8, 146u8, 207u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                checkIsCoprocessorTxSenderFromContextReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `forceUpdateContextToStatus(uint256,uint8)` and selector `0x3112a555`.
```solidity
function forceUpdateContextToStatus(uint256 contextId, ContextStatus status) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct forceUpdateContextToStatusCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`forceUpdateContextToStatus(uint256,uint8)`](forceUpdateContextToStatusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct forceUpdateContextToStatusReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                ContextStatus,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                <ContextStatus as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<forceUpdateContextToStatusCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: forceUpdateContextToStatusCall) -> Self {
                    (value.contextId, value.status)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for forceUpdateContextToStatusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        status: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<forceUpdateContextToStatusReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: forceUpdateContextToStatusReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for forceUpdateContextToStatusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl forceUpdateContextToStatusReturn {
            fn _tokenize(
                &self,
            ) -> <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for forceUpdateContextToStatusCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>, ContextStatus);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = forceUpdateContextToStatusReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "forceUpdateContextToStatus(uint256,uint8)";
            const SELECTOR: [u8; 4] = [49u8, 18u8, 165u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <ContextStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                forceUpdateContextToStatusReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveCoprocessorContext()` and selector `0xfed9716b`.
```solidity
function getActiveCoprocessorContext() external view returns (CoprocessorContext memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveCoprocessorContext()`](getActiveCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextReturn {
        #[allow(missing_docs)]
        pub _0: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CoprocessorContext,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CoprocessorContext as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveCoprocessorContextCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <CoprocessorContext as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (CoprocessorContext,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveCoprocessorContext()";
            const SELECTOR: [u8; 4] = [254u8, 217u8, 113u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<CoprocessorContext as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveCoprocessorContextId()` and selector `0x991dc36d`.
```solidity
function getActiveCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveCoprocessorContextId()`](getActiveCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [153u8, 29u8, 195u8, 109u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorActivationBlockTimestampFromContext(uint256)` and selector `0xa94a02ad`.
```solidity
function getCoprocessorActivationBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorActivationBlockTimestampFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorActivationBlockTimestampFromContext(uint256)`](getCoprocessorActivationBlockTimestampFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorActivationBlockTimestampFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorActivationBlockTimestampFromContextCall,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorActivationBlockTimestampFromContextCall,
                ) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorActivationBlockTimestampFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorActivationBlockTimestampFromContextReturn,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorActivationBlockTimestampFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorActivationBlockTimestampFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorActivationBlockTimestampFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorActivationBlockTimestampFromContext(uint256)";
            const SELECTOR: [u8; 4] = [169u8, 74u8, 2u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorActivationBlockTimestampFromContextReturn = r
                            .into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorActivationBlockTimestampFromContextReturn = r
                            .into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorContextStatus(uint256)` and selector `0x888b99e0`.
```solidity
function getCoprocessorContextStatus(uint256 contextId) external view returns (ContextStatus);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorContextStatusCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorContextStatus(uint256)`](getCoprocessorContextStatusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorContextStatusReturn {
        #[allow(missing_docs)]
        pub _0: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorContextStatusCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorContextStatusCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorContextStatusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ContextStatus,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ContextStatus as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorContextStatusReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorContextStatusReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorContextStatusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorContextStatusCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <ContextStatus as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (ContextStatus,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorContextStatus(uint256)";
            const SELECTOR: [u8; 4] = [136u8, 139u8, 153u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<ContextStatus as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorContextStatusReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorContextStatusReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorDeactivatedBlockTimestampFromContext(uint256)` and selector `0x90218748`.
```solidity
function getCoprocessorDeactivatedBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorDeactivatedBlockTimestampFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorDeactivatedBlockTimestampFromContext(uint256)`](getCoprocessorDeactivatedBlockTimestampFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorDeactivatedBlockTimestampFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorDeactivatedBlockTimestampFromContextCall,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorDeactivatedBlockTimestampFromContextCall,
                ) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorDeactivatedBlockTimestampFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorDeactivatedBlockTimestampFromContextReturn,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorDeactivatedBlockTimestampFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorDeactivatedBlockTimestampFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorDeactivatedBlockTimestampFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorDeactivatedBlockTimestampFromContext(uint256)";
            const SELECTOR: [u8; 4] = [144u8, 33u8, 135u8, 72u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorDeactivatedBlockTimestampFromContextReturn = r
                            .into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorDeactivatedBlockTimestampFromContextReturn = r
                            .into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorFromContext(uint256,address)` and selector `0xd1841dd3`.
```solidity
function getCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress) external view returns (CoprocessorV2 memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSenderAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorFromContext(uint256,address)`](getCoprocessorFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorFromContextReturn {
        #[allow(missing_docs)]
        pub _0: <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorFromContextCall) -> Self {
                    (value.contextId, value.coprocessorTxSenderAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        coprocessorTxSenderAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CoprocessorV2,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <CoprocessorV2 as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (CoprocessorV2,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [209u8, 132u8, 29u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSenderAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<CoprocessorV2 as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorFromContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorFromContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorMajorityThresholdFromContext(uint256)` and selector `0x6ba818e1`.
```solidity
function getCoprocessorMajorityThresholdFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorMajorityThresholdFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorMajorityThresholdFromContext(uint256)`](getCoprocessorMajorityThresholdFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorMajorityThresholdFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorMajorityThresholdFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorMajorityThresholdFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorMajorityThresholdFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorMajorityThresholdFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorMajorityThresholdFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorMajorityThresholdFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorMajorityThresholdFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorMajorityThresholdFromContext(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 168u8, 24u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorMajorityThresholdFromContextReturn = r
                            .into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorMajorityThresholdFromContextReturn = r
                            .into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorSignersFromContext(uint256)` and selector `0x6b3174e5`.
```solidity
function getCoprocessorSignersFromContext(uint256 contextId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorSignersFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorSignersFromContext(uint256)`](getCoprocessorSignersFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorSignersFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorSignersFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorSignersFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorSignersFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorSignersFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorSignersFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorSignersFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorSignersFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorSignersFromContext(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 49u8, 116u8, 229u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorSignersFromContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorSignersFromContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorTxSendersFromContext(uint256)` and selector `0x18b7214d`.
```solidity
function getCoprocessorTxSendersFromContext(uint256 contextId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorTxSendersFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorTxSendersFromContext(uint256)`](getCoprocessorTxSendersFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorTxSendersFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorTxSendersFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorTxSendersFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorTxSendersFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorTxSendersFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorTxSendersFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorTxSendersFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorTxSendersFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorTxSendersFromContext(uint256)";
            const SELECTOR: [u8; 4] = [24u8, 183u8, 33u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorTxSendersFromContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorTxSendersFromContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPreActivationCoprocessorContextId()` and selector `0xbe91187b`.
```solidity
function getPreActivationCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPreActivationCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPreActivationCoprocessorContextId()`](getPreActivationCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPreActivationCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPreActivationCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPreActivationCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPreActivationCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPreActivationCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPreActivationCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPreActivationCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPreActivationCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPreActivationCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [190u8, 145u8, 24u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getPreActivationCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getPreActivationCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getSuspendedCoprocessorContextId()` and selector `0x086e4e1c`.
```solidity
function getSuspendedCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSuspendedCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getSuspendedCoprocessorContextId()`](getSuspendedCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSuspendedCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSuspendedCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSuspendedCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSuspendedCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSuspendedCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSuspendedCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSuspendedCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSuspendedCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSuspendedCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [8u8, 110u8, 78u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getSuspendedCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getSuspendedCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVersion()` and selector `0x0d8e6e2c`.
```solidity
function getVersion() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVersion()`](getVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVersion()";
            const SELECTOR: [u8; 4] = [13u8, 142u8, 110u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isCoprocessorContextActiveOrSuspended(uint256)` and selector `0x60b25465`.
```solidity
function isCoprocessorContextActiveOrSuspended(uint256 contextId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorContextActiveOrSuspendedCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isCoprocessorContextActiveOrSuspended(uint256)`](isCoprocessorContextActiveOrSuspendedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorContextActiveOrSuspendedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorContextActiveOrSuspendedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorContextActiveOrSuspendedCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorContextActiveOrSuspendedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorContextActiveOrSuspendedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorContextActiveOrSuspendedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorContextActiveOrSuspendedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCoprocessorContextActiveOrSuspendedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCoprocessorContextActiveOrSuspended(uint256)";
            const SELECTOR: [u8; 4] = [96u8, 178u8, 84u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isCoprocessorContextActiveOrSuspendedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isCoprocessorContextActiveOrSuspendedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `refreshCoprocessorContextStatuses()` and selector `0x3a5162e6`.
```solidity
function refreshCoprocessorContextStatuses() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refreshCoprocessorContextStatusesCall;
    ///Container type for the return parameters of the [`refreshCoprocessorContextStatuses()`](refreshCoprocessorContextStatusesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refreshCoprocessorContextStatusesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refreshCoprocessorContextStatusesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: refreshCoprocessorContextStatusesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for refreshCoprocessorContextStatusesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refreshCoprocessorContextStatusesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: refreshCoprocessorContextStatusesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for refreshCoprocessorContextStatusesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl refreshCoprocessorContextStatusesReturn {
            fn _tokenize(
                &self,
            ) -> <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for refreshCoprocessorContextStatusesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = refreshCoprocessorContextStatusesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "refreshCoprocessorContextStatuses()";
            const SELECTOR: [u8; 4] = [58u8, 81u8, 98u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                refreshCoprocessorContextStatusesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapSuspendedCoprocessorContextWithActive(uint256)` and selector `0x86dfc7de`.
```solidity
function swapSuspendedCoprocessorContextWithActive(uint256 suspendedTimePeriod) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapSuspendedCoprocessorContextWithActiveCall {
        #[allow(missing_docs)]
        pub suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`swapSuspendedCoprocessorContextWithActive(uint256)`](swapSuspendedCoprocessorContextWithActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapSuspendedCoprocessorContextWithActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapSuspendedCoprocessorContextWithActiveCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapSuspendedCoprocessorContextWithActiveCall) -> Self {
                    (value.suspendedTimePeriod,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapSuspendedCoprocessorContextWithActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        suspendedTimePeriod: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapSuspendedCoprocessorContextWithActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapSuspendedCoprocessorContextWithActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapSuspendedCoprocessorContextWithActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl swapSuspendedCoprocessorContextWithActiveReturn {
            fn _tokenize(
                &self,
            ) -> <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapSuspendedCoprocessorContextWithActiveCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapSuspendedCoprocessorContextWithActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapSuspendedCoprocessorContextWithActive(uint256)";
            const SELECTOR: [u8; 4] = [134u8, 223u8, 199u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedTimePeriod),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                swapSuspendedCoprocessorContextWithActiveReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ICoprocessorContexts`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum ICoprocessorContextsCalls {
        #[allow(missing_docs)]
        addCoprocessorContext(addCoprocessorContextCall),
        #[allow(missing_docs)]
        checkIsCoprocessorSignerFromContext(checkIsCoprocessorSignerFromContextCall),
        #[allow(missing_docs)]
        checkIsCoprocessorTxSenderFromContext(checkIsCoprocessorTxSenderFromContextCall),
        #[allow(missing_docs)]
        forceUpdateContextToStatus(forceUpdateContextToStatusCall),
        #[allow(missing_docs)]
        getActiveCoprocessorContext(getActiveCoprocessorContextCall),
        #[allow(missing_docs)]
        getActiveCoprocessorContextId(getActiveCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getCoprocessorActivationBlockTimestampFromContext(
            getCoprocessorActivationBlockTimestampFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorContextStatus(getCoprocessorContextStatusCall),
        #[allow(missing_docs)]
        getCoprocessorDeactivatedBlockTimestampFromContext(
            getCoprocessorDeactivatedBlockTimestampFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorFromContext(getCoprocessorFromContextCall),
        #[allow(missing_docs)]
        getCoprocessorMajorityThresholdFromContext(
            getCoprocessorMajorityThresholdFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorSignersFromContext(getCoprocessorSignersFromContextCall),
        #[allow(missing_docs)]
        getCoprocessorTxSendersFromContext(getCoprocessorTxSendersFromContextCall),
        #[allow(missing_docs)]
        getPreActivationCoprocessorContextId(getPreActivationCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getSuspendedCoprocessorContextId(getSuspendedCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getVersion(getVersionCall),
        #[allow(missing_docs)]
        isCoprocessorContextActiveOrSuspended(isCoprocessorContextActiveOrSuspendedCall),
        #[allow(missing_docs)]
        refreshCoprocessorContextStatuses(refreshCoprocessorContextStatusesCall),
        #[allow(missing_docs)]
        swapSuspendedCoprocessorContextWithActive(
            swapSuspendedCoprocessorContextWithActiveCall,
        ),
    }
    #[automatically_derived]
    impl ICoprocessorContextsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [8u8, 110u8, 78u8, 28u8],
            [13u8, 142u8, 110u8, 44u8],
            [24u8, 183u8, 33u8, 77u8],
            [49u8, 18u8, 165u8, 85u8],
            [58u8, 81u8, 98u8, 230u8],
            [96u8, 178u8, 84u8, 101u8],
            [107u8, 49u8, 116u8, 229u8],
            [107u8, 168u8, 24u8, 225u8],
            [132u8, 202u8, 225u8, 135u8],
            [134u8, 223u8, 199u8, 222u8],
            [136u8, 139u8, 153u8, 224u8],
            [144u8, 33u8, 135u8, 72u8],
            [153u8, 29u8, 195u8, 109u8],
            [158u8, 251u8, 72u8, 78u8],
            [169u8, 74u8, 2u8, 173u8],
            [190u8, 145u8, 24u8, 123u8],
            [209u8, 132u8, 29u8, 211u8],
            [241u8, 146u8, 207u8, 104u8],
            [254u8, 217u8, 113u8, 107u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ICoprocessorContextsCalls {
        const NAME: &'static str = "ICoprocessorContextsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addCoprocessorContext(_) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::checkIsCoprocessorSignerFromContext(_) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::checkIsCoprocessorTxSenderFromContext(_) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::forceUpdateContextToStatus(_) => {
                    <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveCoprocessorContext(_) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveCoprocessorContextId(_) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(_) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorContextStatus(_) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(_) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorFromContext(_) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorMajorityThresholdFromContext(_) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorSignersFromContext(_) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorTxSendersFromContext(_) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPreActivationCoprocessorContextId(_) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSuspendedCoprocessorContextId(_) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVersion(_) => {
                    <getVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCoprocessorContextActiveOrSuspended(_) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::refreshCoprocessorContextStatuses(_) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapSuspendedCoprocessorContextWithActive(_) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<ICoprocessorContextsCalls>] = &[
                {
                    fn getSuspendedCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getSuspendedCoprocessorContextId,
                            )
                    }
                    getSuspendedCoprocessorContextId
                },
                {
                    fn getVersion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn getCoprocessorTxSendersFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorTxSendersFromContext,
                            )
                    }
                    getCoprocessorTxSendersFromContext
                },
                {
                    fn forceUpdateContextToStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::forceUpdateContextToStatus)
                    }
                    forceUpdateContextToStatus
                },
                {
                    fn refreshCoprocessorContextStatuses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::refreshCoprocessorContextStatuses,
                            )
                    }
                    refreshCoprocessorContextStatuses
                },
                {
                    fn isCoprocessorContextActiveOrSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::isCoprocessorContextActiveOrSuspended,
                            )
                    }
                    isCoprocessorContextActiveOrSuspended
                },
                {
                    fn getCoprocessorSignersFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorSignersFromContext,
                            )
                    }
                    getCoprocessorSignersFromContext
                },
                {
                    fn getCoprocessorMajorityThresholdFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorMajorityThresholdFromContext,
                            )
                    }
                    getCoprocessorMajorityThresholdFromContext
                },
                {
                    fn addCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::addCoprocessorContext)
                    }
                    addCoprocessorContext
                },
                {
                    fn swapSuspendedCoprocessorContextWithActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::swapSuspendedCoprocessorContextWithActive,
                            )
                    }
                    swapSuspendedCoprocessorContextWithActive
                },
                {
                    fn getCoprocessorContextStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::getCoprocessorContextStatus)
                    }
                    getCoprocessorContextStatus
                },
                {
                    fn getCoprocessorDeactivatedBlockTimestampFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorDeactivatedBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorDeactivatedBlockTimestampFromContext
                },
                {
                    fn getActiveCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getActiveCoprocessorContextId,
                            )
                    }
                    getActiveCoprocessorContextId
                },
                {
                    fn checkIsCoprocessorSignerFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::checkIsCoprocessorSignerFromContext,
                            )
                    }
                    checkIsCoprocessorSignerFromContext
                },
                {
                    fn getCoprocessorActivationBlockTimestampFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorActivationBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorActivationBlockTimestampFromContext
                },
                {
                    fn getPreActivationCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getPreActivationCoprocessorContextId,
                            )
                    }
                    getPreActivationCoprocessorContextId
                },
                {
                    fn getCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::getCoprocessorFromContext)
                    }
                    getCoprocessorFromContext
                },
                {
                    fn checkIsCoprocessorTxSenderFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::checkIsCoprocessorTxSenderFromContext,
                            )
                    }
                    checkIsCoprocessorTxSenderFromContext
                },
                {
                    fn getActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::getActiveCoprocessorContext)
                    }
                    getActiveCoprocessorContext
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<ICoprocessorContextsCalls>] = &[
                {
                    fn getSuspendedCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getSuspendedCoprocessorContextId,
                            )
                    }
                    getSuspendedCoprocessorContextId
                },
                {
                    fn getVersion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn getCoprocessorTxSendersFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorTxSendersFromContext,
                            )
                    }
                    getCoprocessorTxSendersFromContext
                },
                {
                    fn forceUpdateContextToStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::forceUpdateContextToStatus)
                    }
                    forceUpdateContextToStatus
                },
                {
                    fn refreshCoprocessorContextStatuses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::refreshCoprocessorContextStatuses,
                            )
                    }
                    refreshCoprocessorContextStatuses
                },
                {
                    fn isCoprocessorContextActiveOrSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::isCoprocessorContextActiveOrSuspended,
                            )
                    }
                    isCoprocessorContextActiveOrSuspended
                },
                {
                    fn getCoprocessorSignersFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorSignersFromContext,
                            )
                    }
                    getCoprocessorSignersFromContext
                },
                {
                    fn getCoprocessorMajorityThresholdFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorMajorityThresholdFromContext,
                            )
                    }
                    getCoprocessorMajorityThresholdFromContext
                },
                {
                    fn addCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::addCoprocessorContext)
                    }
                    addCoprocessorContext
                },
                {
                    fn swapSuspendedCoprocessorContextWithActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::swapSuspendedCoprocessorContextWithActive,
                            )
                    }
                    swapSuspendedCoprocessorContextWithActive
                },
                {
                    fn getCoprocessorContextStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::getCoprocessorContextStatus)
                    }
                    getCoprocessorContextStatus
                },
                {
                    fn getCoprocessorDeactivatedBlockTimestampFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorDeactivatedBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorDeactivatedBlockTimestampFromContext
                },
                {
                    fn getActiveCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getActiveCoprocessorContextId,
                            )
                    }
                    getActiveCoprocessorContextId
                },
                {
                    fn checkIsCoprocessorSignerFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::checkIsCoprocessorSignerFromContext,
                            )
                    }
                    checkIsCoprocessorSignerFromContext
                },
                {
                    fn getCoprocessorActivationBlockTimestampFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getCoprocessorActivationBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorActivationBlockTimestampFromContext
                },
                {
                    fn getPreActivationCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::getPreActivationCoprocessorContextId,
                            )
                    }
                    getPreActivationCoprocessorContextId
                },
                {
                    fn getCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::getCoprocessorFromContext)
                    }
                    getCoprocessorFromContext
                },
                {
                    fn checkIsCoprocessorTxSenderFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsCalls::checkIsCoprocessorTxSenderFromContext,
                            )
                    }
                    checkIsCoprocessorTxSenderFromContext
                },
                {
                    fn getActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsCalls> {
                        <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsCalls::getActiveCoprocessorContext)
                    }
                    getActiveCoprocessorContext
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addCoprocessorContext(inner) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::checkIsCoprocessorSignerFromContext(inner) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::checkIsCoprocessorTxSenderFromContext(inner) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::forceUpdateContextToStatus(inner) => {
                    <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveCoprocessorContext(inner) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveCoprocessorContextId(inner) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(inner) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorContextStatus(inner) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(inner) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorFromContext(inner) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorMajorityThresholdFromContext(inner) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorSignersFromContext(inner) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorTxSendersFromContext(inner) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPreActivationCoprocessorContextId(inner) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSuspendedCoprocessorContextId(inner) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isCoprocessorContextActiveOrSuspended(inner) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::refreshCoprocessorContextStatuses(inner) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapSuspendedCoprocessorContextWithActive(inner) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addCoprocessorContext(inner) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkIsCoprocessorSignerFromContext(inner) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkIsCoprocessorTxSenderFromContext(inner) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::forceUpdateContextToStatus(inner) => {
                    <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveCoprocessorContext(inner) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveCoprocessorContextId(inner) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(inner) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorContextStatus(inner) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(inner) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorFromContext(inner) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorMajorityThresholdFromContext(inner) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorSignersFromContext(inner) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorTxSendersFromContext(inner) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPreActivationCoprocessorContextId(inner) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSuspendedCoprocessorContextId(inner) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCoprocessorContextActiveOrSuspended(inner) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::refreshCoprocessorContextStatuses(inner) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapSuspendedCoprocessorContextWithActive(inner) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ICoprocessorContexts`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum ICoprocessorContextsErrors {
        #[allow(missing_docs)]
        CoprocessorContextNotInitialized(CoprocessorContextNotInitialized),
        #[allow(missing_docs)]
        CoprocessorSignerAddressesNotUnique(CoprocessorSignerAddressesNotUnique),
        #[allow(missing_docs)]
        CoprocessorTxSenderAddressesNotUnique(CoprocessorTxSenderAddressesNotUnique),
        #[allow(missing_docs)]
        EmptyCoprocessors(EmptyCoprocessors),
        #[allow(missing_docs)]
        InvalidContextStatusForceUpdate(InvalidContextStatusForceUpdate),
        #[allow(missing_docs)]
        NoActiveCoprocessorContext(NoActiveCoprocessorContext),
        #[allow(missing_docs)]
        NoPreActivationCoprocessorContext(NoPreActivationCoprocessorContext),
        #[allow(missing_docs)]
        NoSuspendedCoprocessorContext(NoSuspendedCoprocessorContext),
        #[allow(missing_docs)]
        NotCoprocessorFromContext(NotCoprocessorFromContext),
        #[allow(missing_docs)]
        NotCoprocessorSignerFromContext(NotCoprocessorSignerFromContext),
        #[allow(missing_docs)]
        NotCoprocessorTxSenderFromContext(NotCoprocessorTxSenderFromContext),
        #[allow(missing_docs)]
        NullCoprocessorSignerAddress(NullCoprocessorSignerAddress),
        #[allow(missing_docs)]
        NullCoprocessorTxSenderAddress(NullCoprocessorTxSenderAddress),
    }
    #[automatically_derived]
    impl ICoprocessorContextsErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 101u8, 147u8, 234u8],
            [33u8, 251u8, 8u8, 249u8],
            [41u8, 169u8, 147u8, 193u8],
            [74u8, 108u8, 89u8, 116u8],
            [85u8, 79u8, 140u8, 95u8],
            [100u8, 213u8, 39u8, 89u8],
            [138u8, 240u8, 130u8, 239u8],
            [158u8, 219u8, 120u8, 97u8],
            [171u8, 249u8, 231u8, 176u8],
            [185u8, 232u8, 97u8, 178u8],
            [195u8, 18u8, 231u8, 62u8],
            [200u8, 38u8, 225u8, 162u8],
            [240u8, 190u8, 214u8, 143u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ICoprocessorContextsErrors {
        const NAME: &'static str = "ICoprocessorContextsErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::CoprocessorContextNotInitialized(_) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorSignerAddressesNotUnique(_) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorTxSenderAddressesNotUnique(_) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyCoprocessors(_) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidContextStatusForceUpdate(_) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoActiveCoprocessorContext(_) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoPreActivationCoprocessorContext(_) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoSuspendedCoprocessorContext(_) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorFromContext(_) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorSignerFromContext(_) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorTxSenderFromContext(_) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NullCoprocessorSignerAddress(_) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NullCoprocessorTxSenderAddress(_) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<ICoprocessorContextsErrors>] = &[
                {
                    fn NoActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsErrors::NoActiveCoprocessorContext)
                    }
                    NoActiveCoprocessorContext
                },
                {
                    fn NoSuspendedCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NoSuspendedCoprocessorContext,
                            )
                    }
                    NoSuspendedCoprocessorContext
                },
                {
                    fn NotCoprocessorTxSenderFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NotCoprocessorTxSenderFromContext,
                            )
                    }
                    NotCoprocessorTxSenderFromContext
                },
                {
                    fn NullCoprocessorSignerAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NullCoprocessorSignerAddress,
                            )
                    }
                    NullCoprocessorSignerAddress
                },
                {
                    fn NotCoprocessorSignerFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NotCoprocessorSignerFromContext,
                            )
                    }
                    NotCoprocessorSignerFromContext
                },
                {
                    fn CoprocessorTxSenderAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::CoprocessorTxSenderAddressesNotUnique,
                            )
                    }
                    CoprocessorTxSenderAddressesNotUnique
                },
                {
                    fn EmptyCoprocessors(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <EmptyCoprocessors as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsErrors::EmptyCoprocessors)
                    }
                    EmptyCoprocessors
                },
                {
                    fn NullCoprocessorTxSenderAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NullCoprocessorTxSenderAddress,
                            )
                    }
                    NullCoprocessorTxSenderAddress
                },
                {
                    fn CoprocessorContextNotInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::CoprocessorContextNotInitialized,
                            )
                    }
                    CoprocessorContextNotInitialized
                },
                {
                    fn NoPreActivationCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NoPreActivationCoprocessorContext,
                            )
                    }
                    NoPreActivationCoprocessorContext
                },
                {
                    fn NotCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(ICoprocessorContextsErrors::NotCoprocessorFromContext)
                    }
                    NotCoprocessorFromContext
                },
                {
                    fn CoprocessorSignerAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::CoprocessorSignerAddressesNotUnique,
                            )
                    }
                    CoprocessorSignerAddressesNotUnique
                },
                {
                    fn InvalidContextStatusForceUpdate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::InvalidContextStatusForceUpdate,
                            )
                    }
                    InvalidContextStatusForceUpdate
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<ICoprocessorContextsErrors>] = &[
                {
                    fn NoActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsErrors::NoActiveCoprocessorContext)
                    }
                    NoActiveCoprocessorContext
                },
                {
                    fn NoSuspendedCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NoSuspendedCoprocessorContext,
                            )
                    }
                    NoSuspendedCoprocessorContext
                },
                {
                    fn NotCoprocessorTxSenderFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NotCoprocessorTxSenderFromContext,
                            )
                    }
                    NotCoprocessorTxSenderFromContext
                },
                {
                    fn NullCoprocessorSignerAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NullCoprocessorSignerAddress,
                            )
                    }
                    NullCoprocessorSignerAddress
                },
                {
                    fn NotCoprocessorSignerFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NotCoprocessorSignerFromContext,
                            )
                    }
                    NotCoprocessorSignerFromContext
                },
                {
                    fn CoprocessorTxSenderAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::CoprocessorTxSenderAddressesNotUnique,
                            )
                    }
                    CoprocessorTxSenderAddressesNotUnique
                },
                {
                    fn EmptyCoprocessors(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <EmptyCoprocessors as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsErrors::EmptyCoprocessors)
                    }
                    EmptyCoprocessors
                },
                {
                    fn NullCoprocessorTxSenderAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NullCoprocessorTxSenderAddress,
                            )
                    }
                    NullCoprocessorTxSenderAddress
                },
                {
                    fn CoprocessorContextNotInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::CoprocessorContextNotInitialized,
                            )
                    }
                    CoprocessorContextNotInitialized
                },
                {
                    fn NoPreActivationCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::NoPreActivationCoprocessorContext,
                            )
                    }
                    NoPreActivationCoprocessorContext
                },
                {
                    fn NotCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(ICoprocessorContextsErrors::NotCoprocessorFromContext)
                    }
                    NotCoprocessorFromContext
                },
                {
                    fn CoprocessorSignerAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::CoprocessorSignerAddressesNotUnique,
                            )
                    }
                    CoprocessorSignerAddressesNotUnique
                },
                {
                    fn InvalidContextStatusForceUpdate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<ICoprocessorContextsErrors> {
                        <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                ICoprocessorContextsErrors::InvalidContextStatusForceUpdate,
                            )
                    }
                    InvalidContextStatusForceUpdate
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::CoprocessorContextNotInitialized(inner) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorSignerAddressesNotUnique(inner) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorTxSenderAddressesNotUnique(inner) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyCoprocessors(inner) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidContextStatusForceUpdate(inner) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoActiveCoprocessorContext(inner) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoPreActivationCoprocessorContext(inner) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoSuspendedCoprocessorContext(inner) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorFromContext(inner) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorSignerFromContext(inner) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorTxSenderFromContext(inner) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NullCoprocessorSignerAddress(inner) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NullCoprocessorTxSenderAddress(inner) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::CoprocessorContextNotInitialized(inner) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorSignerAddressesNotUnique(inner) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorTxSenderAddressesNotUnique(inner) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyCoprocessors(inner) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidContextStatusForceUpdate(inner) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoActiveCoprocessorContext(inner) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoPreActivationCoprocessorContext(inner) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoSuspendedCoprocessorContext(inner) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorFromContext(inner) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorSignerFromContext(inner) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorTxSenderFromContext(inner) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NullCoprocessorSignerAddress(inner) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NullCoprocessorTxSenderAddress(inner) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ICoprocessorContexts`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum ICoprocessorContextsEvents {
        #[allow(missing_docs)]
        ActivateCoprocessorContext(ActivateCoprocessorContext),
        #[allow(missing_docs)]
        CompromiseCoprocessorContext(CompromiseCoprocessorContext),
        #[allow(missing_docs)]
        DeactivateCoprocessorContext(DeactivateCoprocessorContext),
        #[allow(missing_docs)]
        DestroyCoprocessorContext(DestroyCoprocessorContext),
        #[allow(missing_docs)]
        InitializeCoprocessorContexts(InitializeCoprocessorContexts),
        #[allow(missing_docs)]
        NewCoprocessorContext(NewCoprocessorContext),
        #[allow(missing_docs)]
        PreActivateCoprocessorContext(PreActivateCoprocessorContext),
        #[allow(missing_docs)]
        SuspendCoprocessorContext(SuspendCoprocessorContext),
    }
    #[automatically_derived]
    impl ICoprocessorContextsEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                19u8, 197u8, 253u8, 99u8, 28u8, 160u8, 49u8, 85u8, 47u8, 233u8, 227u8,
                141u8, 145u8, 25u8, 16u8, 165u8, 152u8, 15u8, 102u8, 8u8, 238u8, 163u8,
                35u8, 105u8, 110u8, 4u8, 219u8, 15u8, 236u8, 12u8, 149u8, 87u8,
            ],
            [
                27u8, 170u8, 8u8, 216u8, 222u8, 24u8, 232u8, 226u8, 40u8, 118u8, 145u8,
                177u8, 48u8, 151u8, 72u8, 1u8, 9u8, 129u8, 235u8, 223u8, 209u8, 42u8,
                23u8, 61u8, 133u8, 116u8, 101u8, 117u8, 72u8, 165u8, 40u8, 152u8,
            ],
            [
                43u8, 1u8, 136u8, 252u8, 75u8, 237u8, 71u8, 30u8, 226u8, 22u8, 220u8,
                108u8, 185u8, 101u8, 11u8, 235u8, 40u8, 136u8, 146u8, 3u8, 78u8, 190u8,
                231u8, 48u8, 27u8, 50u8, 57u8, 26u8, 221u8, 42u8, 102u8, 184u8,
            ],
            [
                48u8, 128u8, 242u8, 184u8, 13u8, 218u8, 71u8, 72u8, 202u8, 41u8, 38u8,
                166u8, 65u8, 250u8, 80u8, 7u8, 115u8, 80u8, 88u8, 220u8, 95u8, 90u8,
                178u8, 89u8, 78u8, 236u8, 167u8, 65u8, 151u8, 163u8, 172u8, 204u8,
            ],
            [
                108u8, 140u8, 4u8, 201u8, 254u8, 163u8, 55u8, 114u8, 11u8, 125u8, 250u8,
                220u8, 163u8, 101u8, 232u8, 80u8, 3u8, 81u8, 20u8, 253u8, 8u8, 27u8,
                88u8, 208u8, 48u8, 175u8, 190u8, 139u8, 93u8, 195u8, 190u8, 113u8,
            ],
            [
                175u8, 88u8, 161u8, 138u8, 78u8, 65u8, 89u8, 250u8, 112u8, 108u8, 13u8,
                78u8, 15u8, 218u8, 176u8, 147u8, 15u8, 151u8, 103u8, 147u8, 25u8, 205u8,
                219u8, 201u8, 201u8, 25u8, 155u8, 12u8, 209u8, 4u8, 182u8, 239u8,
            ],
            [
                238u8, 126u8, 248u8, 57u8, 99u8, 65u8, 113u8, 37u8, 210u8, 116u8, 48u8,
                120u8, 159u8, 198u8, 233u8, 65u8, 148u8, 56u8, 30u8, 130u8, 195u8, 205u8,
                166u8, 130u8, 96u8, 208u8, 231u8, 207u8, 195u8, 30u8, 175u8, 33u8,
            ],
            [
                242u8, 11u8, 41u8, 152u8, 4u8, 201u8, 193u8, 214u8, 218u8, 59u8, 130u8,
                65u8, 76u8, 122u8, 160u8, 168u8, 69u8, 205u8, 186u8, 186u8, 226u8, 217u8,
                14u8, 70u8, 227u8, 96u8, 163u8, 121u8, 167u8, 123u8, 123u8, 229u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ICoprocessorContextsEvents {
        const NAME: &'static str = "ICoprocessorContextsEvents";
        const COUNT: usize = 8usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ActivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ActivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ActivateCoprocessorContext)
                }
                Some(
                    <CompromiseCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CompromiseCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CompromiseCoprocessorContext)
                }
                Some(
                    <DeactivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DeactivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DeactivateCoprocessorContext)
                }
                Some(
                    <DestroyCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DestroyCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DestroyCoprocessorContext)
                }
                Some(
                    <InitializeCoprocessorContexts as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <InitializeCoprocessorContexts as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::InitializeCoprocessorContexts)
                }
                Some(
                    <NewCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NewCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::NewCoprocessorContext)
                }
                Some(
                    <PreActivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreActivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PreActivateCoprocessorContext)
                }
                Some(
                    <SuspendCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SuspendCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SuspendCoprocessorContext)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ICoprocessorContextsEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CompromiseCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DeactivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DestroyCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::InitializeCoprocessorContexts(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NewCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SuspendCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CompromiseCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DeactivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DestroyCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::InitializeCoprocessorContexts(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NewCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SuspendCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ICoprocessorContexts`](self) contract instance.

See the [wrapper's documentation](`ICoprocessorContextsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ICoprocessorContextsInstance<P, N> {
        ICoprocessorContextsInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ICoprocessorContextsInstance<P, N>>,
    > {
        ICoprocessorContextsInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        ICoprocessorContextsInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`ICoprocessorContexts`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ICoprocessorContexts`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ICoprocessorContextsInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for ICoprocessorContextsInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ICoprocessorContextsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > ICoprocessorContextsInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`ICoprocessorContexts`](self) contract instance.

See the [wrapper's documentation](`ICoprocessorContextsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ICoprocessorContextsInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> ICoprocessorContextsInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ICoprocessorContextsInstance<P, N> {
            ICoprocessorContextsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > ICoprocessorContextsInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addCoprocessorContext`] function.
        pub fn addCoprocessorContext(
            &self,
            featureSet: alloy::sol_types::private::primitives::aliases::U256,
            coprocessors: alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
            timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<&P, addCoprocessorContextCall, N> {
            self.call_builder(
                &addCoprocessorContextCall {
                    featureSet,
                    coprocessors,
                    timePeriods,
                },
            )
        }
        ///Creates a new call builder for the [`checkIsCoprocessorSignerFromContext`] function.
        pub fn checkIsCoprocessorSignerFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            signerAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            checkIsCoprocessorSignerFromContextCall,
            N,
        > {
            self.call_builder(
                &checkIsCoprocessorSignerFromContextCall {
                    contextId,
                    signerAddress,
                },
            )
        }
        ///Creates a new call builder for the [`checkIsCoprocessorTxSenderFromContext`] function.
        pub fn checkIsCoprocessorTxSenderFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            txSenderAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            checkIsCoprocessorTxSenderFromContextCall,
            N,
        > {
            self.call_builder(
                &checkIsCoprocessorTxSenderFromContextCall {
                    contextId,
                    txSenderAddress,
                },
            )
        }
        ///Creates a new call builder for the [`forceUpdateContextToStatus`] function.
        pub fn forceUpdateContextToStatus(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            status: <ContextStatus as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<&P, forceUpdateContextToStatusCall, N> {
            self.call_builder(
                &forceUpdateContextToStatusCall {
                    contextId,
                    status,
                },
            )
        }
        ///Creates a new call builder for the [`getActiveCoprocessorContext`] function.
        pub fn getActiveCoprocessorContext(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveCoprocessorContextCall, N> {
            self.call_builder(&getActiveCoprocessorContextCall)
        }
        ///Creates a new call builder for the [`getActiveCoprocessorContextId`] function.
        pub fn getActiveCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveCoprocessorContextIdCall, N> {
            self.call_builder(&getActiveCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getCoprocessorActivationBlockTimestampFromContext`] function.
        pub fn getCoprocessorActivationBlockTimestampFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorActivationBlockTimestampFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorActivationBlockTimestampFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorContextStatus`] function.
        pub fn getCoprocessorContextStatus(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorContextStatusCall, N> {
            self.call_builder(
                &getCoprocessorContextStatusCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorDeactivatedBlockTimestampFromContext`] function.
        pub fn getCoprocessorDeactivatedBlockTimestampFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorDeactivatedBlockTimestampFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorDeactivatedBlockTimestampFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorFromContext`] function.
        pub fn getCoprocessorFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            coprocessorTxSenderAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorFromContextCall, N> {
            self.call_builder(
                &getCoprocessorFromContextCall {
                    contextId,
                    coprocessorTxSenderAddress,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorMajorityThresholdFromContext`] function.
        pub fn getCoprocessorMajorityThresholdFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorMajorityThresholdFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorMajorityThresholdFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorSignersFromContext`] function.
        pub fn getCoprocessorSignersFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorSignersFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorSignersFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorTxSendersFromContext`] function.
        pub fn getCoprocessorTxSendersFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorTxSendersFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorTxSendersFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getPreActivationCoprocessorContextId`] function.
        pub fn getPreActivationCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getPreActivationCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(&getPreActivationCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getSuspendedCoprocessorContextId`] function.
        pub fn getSuspendedCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getSuspendedCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(&getSuspendedCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getVersion`] function.
        pub fn getVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getVersionCall, N> {
            self.call_builder(&getVersionCall)
        }
        ///Creates a new call builder for the [`isCoprocessorContextActiveOrSuspended`] function.
        pub fn isCoprocessorContextActiveOrSuspended(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            isCoprocessorContextActiveOrSuspendedCall,
            N,
        > {
            self.call_builder(
                &isCoprocessorContextActiveOrSuspendedCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`refreshCoprocessorContextStatuses`] function.
        pub fn refreshCoprocessorContextStatuses(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            refreshCoprocessorContextStatusesCall,
            N,
        > {
            self.call_builder(&refreshCoprocessorContextStatusesCall)
        }
        ///Creates a new call builder for the [`swapSuspendedCoprocessorContextWithActive`] function.
        pub fn swapSuspendedCoprocessorContextWithActive(
            &self,
            suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            swapSuspendedCoprocessorContextWithActiveCall,
            N,
        > {
            self.call_builder(
                &swapSuspendedCoprocessorContextWithActiveCall {
                    suspendedTimePeriod,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > ICoprocessorContextsInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ActivateCoprocessorContext`] event.
        pub fn ActivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, ActivateCoprocessorContext, N> {
            self.event_filter::<ActivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`CompromiseCoprocessorContext`] event.
        pub fn CompromiseCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, CompromiseCoprocessorContext, N> {
            self.event_filter::<CompromiseCoprocessorContext>()
        }
        ///Creates a new event filter for the [`DeactivateCoprocessorContext`] event.
        pub fn DeactivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, DeactivateCoprocessorContext, N> {
            self.event_filter::<DeactivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`DestroyCoprocessorContext`] event.
        pub fn DestroyCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, DestroyCoprocessorContext, N> {
            self.event_filter::<DestroyCoprocessorContext>()
        }
        ///Creates a new event filter for the [`InitializeCoprocessorContexts`] event.
        pub fn InitializeCoprocessorContexts_filter(
            &self,
        ) -> alloy_contract::Event<&P, InitializeCoprocessorContexts, N> {
            self.event_filter::<InitializeCoprocessorContexts>()
        }
        ///Creates a new event filter for the [`NewCoprocessorContext`] event.
        pub fn NewCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, NewCoprocessorContext, N> {
            self.event_filter::<NewCoprocessorContext>()
        }
        ///Creates a new event filter for the [`PreActivateCoprocessorContext`] event.
        pub fn PreActivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, PreActivateCoprocessorContext, N> {
            self.event_filter::<PreActivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`SuspendCoprocessorContext`] event.
        pub fn SuspendCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, SuspendCoprocessorContext, N> {
            self.event_filter::<SuspendCoprocessorContext>()
        }
    }
}
