/**

Generated by the following Solidity interface...
```solidity
interface KmsManagement {
    error ActivateKeyCoprocessorAlreadyResponded(uint256 keyId, address coprocessorTxSender);
    error ActivateKeyRequestAlreadySent(uint256 keyId);
    error ActivateKeyRequiresKeygen(uint256 keyId);
    error ActivateKeyRequiresKskgen(uint256 currentKeyId, uint256 keyId);
    error AddressEmptyCode(address target);
    error CrsgenKmsNodeAlreadyResponded(uint256 crsId, address kmsTxSender);
    error ERC1967InvalidImplementation(address implementation);
    error ERC1967NonPayable();
    error FailedCall();
    error FheParamsAlreadyInitialized(string fheParamsName);
    error FheParamsNotInitialized();
    error InvalidInitialization();
    error KeygenKmsNodeAlreadyResponded(uint256 keyId, address kmsTxSender);
    error KeygenPreprocessingRequired(uint256 preKeyId);
    error KeygenRequestAlreadySent(uint256 preKeyId);
    error KskgenDestKeyNotGenerated(uint256 destKeyId);
    error KskgenKmsNodeAlreadyResponded(uint256 kskId, address kmsTxSender);
    error KskgenPreprocessingRequired(uint256 preKskId);
    error KskgenRequestAlreadySent(uint256 preKskId);
    error KskgenSameSrcAndDestKeyIds(uint256 keyId);
    error KskgenSourceKeyNotGenerated(uint256 sourceKeyId);
    error NotGatewayOwner(address sender);
    error NotInitializing();
    error NotInitializingFromEmptyProxy();
    error PreprocessKeygenKmsNodeAlreadyResponded(uint256 preKeyId, address kmsTxSender);
    error PreprocessKskgenKmsNodeAlreadyResponded(uint256 preKskId, address kmsTxSender);
    error UUPSUnauthorizedCallContext();
    error UUPSUnsupportedProxiableUUID(bytes32 slot);

    event ActivateKeyRequest(uint256 keyId);
    event ActivateKeyResponse(uint256 keyId);
    event AddFheParams(string fheParamsName, bytes32 fheParamsDigest);
    event CrsgenRequest(uint256 crsgenRequestId, bytes32 fheParamsDigest);
    event CrsgenResponse(uint256 crsgenRequestId, uint256 crsId, bytes32 fheParamsDigest);
    event Initialized(uint64 version);
    event KeygenRequest(uint256 preKeyId, bytes32 fheParamsDigest);
    event KeygenResponse(uint256 preKeyId, uint256 keygenId, bytes32 fheParamsDigest);
    event KskgenRequest(uint256 preKskId, uint256 sourceKeyId, uint256 destKeyId, bytes32 fheParamsDigest);
    event KskgenResponse(uint256 preKskId, uint256 kskId, bytes32 fheParamsDigest);
    event PreprocessKeygenRequest(uint256 preKeygenRequestId, bytes32 fheParamsDigest);
    event PreprocessKeygenResponse(uint256 preKeygenRequestId, uint256 preKeyId);
    event PreprocessKskgenRequest(uint256 preKskgenRequestId, bytes32 fheParamsDigest);
    event PreprocessKskgenResponse(uint256 preKskgenRequestId, uint256 preKskId);
    event UpdateFheParams(string fheParamsName, bytes32 fheParamsDigest);
    event Upgraded(address indexed implementation);

    constructor();

    function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
    function activateKeyRequest(uint256 keyId) external;
    function activateKeyResponse(uint256 keyId) external;
    function activatedKeyIds(uint256 index) external view returns (uint256);
    function addFheParams(string memory fheParamsName, bytes32 fheParamsDigest) external;
    function crsFheParamsDigests(uint256 crsId) external view returns (bytes32);
    function crsgenRequest(string memory fheParamsName) external;
    function crsgenResponse(uint256 crsgenRequestId, uint256 crsId) external;
    function fheParamsDigests(string memory fheParamsName) external view returns (bytes32);
    function getCurrentKeyId() external view returns (uint256);
    function getVersion() external pure returns (string memory);
    function initializeFromEmptyProxy(string memory fheParamsName, bytes32 fheParamsDigest) external;
    function keyFheParamsDigests(uint256 keyId) external view returns (bytes32);
    function keygenRequest(uint256 preKeyId) external;
    function keygenResponse(uint256 preKeyId, uint256 keyId) external;
    function kskFheParamsDigests(uint256 kskId) external view returns (bytes32);
    function kskgenRequest(uint256 preKskId, uint256 sourceKeyId, uint256 destKeyId) external;
    function kskgenResponse(uint256 preKskId, uint256 kskId) external;
    function preprocessKeygenRequest(string memory fheParamsName) external;
    function preprocessKeygenResponse(uint256 preKeygenRequestId, uint256 preKeyId) external;
    function preprocessKskgenRequest(string memory fheParamsName) external;
    function preprocessKskgenResponse(uint256 preKskgenRequestId, uint256 preKskId) external;
    function proxiableUUID() external view returns (bytes32);
    function updateFheParams(string memory fheParamsName, bytes32 fheParamsDigest) external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "UPGRADE_INTERFACE_VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "activateKeyRequest",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "activateKeyResponse",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "activatedKeyIds",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addFheParams",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "crsFheParamsDigests",
    "inputs": [
      {
        "name": "crsId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "crsgenRequest",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "crsgenResponse",
    "inputs": [
      {
        "name": "crsgenRequestId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "crsId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "fheParamsDigests",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentKeyId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initializeFromEmptyProxy",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "keyFheParamsDigests",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "keygenRequest",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "keygenResponse",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "kskFheParamsDigests",
    "inputs": [
      {
        "name": "kskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "kskgenRequest",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sourceKeyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "destKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "kskgenResponse",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "kskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "preprocessKeygenRequest",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "preprocessKeygenResponse",
    "inputs": [
      {
        "name": "preKeygenRequestId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "preprocessKskgenRequest",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "preprocessKskgenResponse",
    "inputs": [
      {
        "name": "preKskgenRequestId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "proxiableUUID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateFheParams",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeToAndCall",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "ActivateKeyRequest",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ActivateKeyResponse",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "AddFheParams",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CrsgenRequest",
    "inputs": [
      {
        "name": "crsgenRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CrsgenResponse",
    "inputs": [
      {
        "name": "crsgenRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "crsId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KeygenRequest",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KeygenResponse",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "keygenId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KskgenRequest",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "sourceKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "destKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KskgenResponse",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "kskId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreprocessKeygenRequest",
    "inputs": [
      {
        "name": "preKeygenRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreprocessKeygenResponse",
    "inputs": [
      {
        "name": "preKeygenRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "preKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreprocessKskgenRequest",
    "inputs": [
      {
        "name": "preKskgenRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreprocessKskgenResponse",
    "inputs": [
      {
        "name": "preKskgenRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "preKskId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UpdateFheParams",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Upgraded",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "ActivateKeyCoprocessorAlreadyResponded",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ActivateKeyRequestAlreadySent",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ActivateKeyRequiresKeygen",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ActivateKeyRequiresKskgen",
    "inputs": [
      {
        "name": "currentKeyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "AddressEmptyCode",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "CrsgenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "crsId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "kmsTxSender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967InvalidImplementation",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967NonPayable",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FheParamsAlreadyInitialized",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ]
  },
  {
    "type": "error",
    "name": "FheParamsNotInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "KeygenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "kmsTxSender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "KeygenPreprocessingRequired",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KeygenRequestAlreadySent",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenDestKeyNotGenerated",
    "inputs": [
      {
        "name": "destKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "kskId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "kmsTxSender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenPreprocessingRequired",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenRequestAlreadySent",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenSameSrcAndDestKeyIds",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenSourceKeyNotGenerated",
    "inputs": [
      {
        "name": "sourceKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotGatewayOwner",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializingFromEmptyProxy",
    "inputs": []
  },
  {
    "type": "error",
    "name": "PreprocessKeygenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "kmsTxSender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "PreprocessKskgenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "kmsTxSender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "UUPSUnauthorizedCallContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UUPSUnsupportedProxiableUUID",
    "inputs": [
      {
        "name": "slot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod KmsManagement {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801562000043575f80fd5b50620000546200005a60201b60201c565b620001c4565b5f6200006b6200015e60201b60201c565b9050805f0160089054906101000a900460ff1615620000b6576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146200015b5767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051620001529190620001a9565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f67ffffffffffffffff82169050919050565b620001a38162000185565b82525050565b5f602082019050620001be5f83018462000198565b92915050565b60805161410d620001eb5f395f8181612de401528181612e3901526130db015261410d5ff3fe608060405260043610610165575f3560e01c80636532745f116100d0578063a7ab444011610089578063e0e55fd711610063578063e0e55fd7146104e9578063eed01e7d14610511578063f1244c5d1461054d578063faac73b41461058957610165565b8063a7ab44401461046d578063ad3cb1cc14610495578063d8909eab146104bf57610165565b80636532745f146103695780636aafa976146103915780638af77f03146103b9578063941c8df6146103f55780639594a9011461041d5780639e167f761461044557610165565b806340c24f151161012257806340c24f151461025b578063428e76d81461028357806345e3b193146102ab5780634f1ef286146102e757806352d1902d14610303578063622c078f1461032d57610165565b80630d8e6e2c146101695780631fbfe66e1461019357806326739e7c146101bb578063293479b1146101e3578063394c7bd61461020b5780633b41a6dd14610233575b5f80fd5b348015610174575f80fd5b5061017d6105b1565b60405161018a919061365f565b60405180910390f35b34801561019e575f80fd5b506101b960048036038101906101b491906137ef565b61062c565b005b3480156101c6575f80fd5b506101e160048036038101906101dc91906138a6565b610806565b005b3480156101ee575f80fd5b50610209600480360381019061020491906138f1565b610a14565b005b348015610216575f80fd5b50610231600480360381019061022c9190613981565b610beb565b005b34801561023e575f80fd5b50610259600480360381019061025491906139d1565b610f60565b005b348015610266575f80fd5b50610281600480360381019061027c91906139fc565b6111af565b005b34801561028e575f80fd5b506102a960048036038101906102a491906138a6565b611446565b005b3480156102b6575f80fd5b506102d160048036038101906102cc91906138a6565b611654565b6040516102de9190613a49565b60405180910390f35b61030160048036038101906102fc9190613b5a565b61168b565b005b34801561030e575f80fd5b506103176116aa565b6040516103249190613a49565b60405180910390f35b348015610338575f80fd5b50610353600480360381019061034e91906139d1565b6116db565b6040516103609190613bc3565b60405180910390f35b348015610374575f80fd5b5061038f600480360381019061038a91906138a6565b61170e565b005b34801561039c575f80fd5b506103b760048036038101906103b291906139fc565b61191c565b005b3480156103c4575f80fd5b506103df60048036038101906103da91906139d1565b611bb3565b6040516103ec9190613a49565b60405180910390f35b348015610400575f80fd5b5061041b600480360381019061041691906139fc565b611bdb565b005b348015610428575f80fd5b50610443600480360381019061043e91906139fc565b611e6b565b005b348015610450575f80fd5b5061046b600480360381019061046691906139d1565b61214f565b005b348015610478575f80fd5b50610493600480360381019061048e91906138f1565b61240c565b005b3480156104a0575f80fd5b506104a961261b565b6040516104b6919061365f565b60405180910390f35b3480156104ca575f80fd5b506104d3612654565b6040516104e09190613bc3565b60405180910390f35b3480156104f4575f80fd5b5061050f600480360381019061050a91906139d1565b61266b565b005b34801561051c575f80fd5b50610537600480360381019061053291906139d1565b6128a4565b6040516105449190613a49565b60405180910390f35b348015610558575f80fd5b50610573600480360381019061056e91906139d1565b6128cc565b6040516105809190613a49565b60405180910390f35b348015610594575f80fd5b506105af60048036038101906105aa91906139fc565b6128f4565b005b60606040518060400160405280600d81526020017f4b6d734d616e6167656d656e74000000000000000000000000000000000000008152506105f25f612b84565b6105fc6001612b84565b6106055f612b84565b6040516020016106189493929190613caa565b604051602081830303815290604052905090565b6001610636612c4e565b67ffffffffffffffff1614610677576040517f6f4f731f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f610682612c72565b9050805f0160089054906101000a900460ff16806106ca57508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b15610701576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff0219169083151502179055505f61074f612c99565b905083815f01866040516107639190613d08565b908152602001604051809103902081905550600181602501866040516107899190613d08565b90815260200160405180910390205f6101000a81548160ff021916908315150217905550505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2826040516107f89190613d40565b60405180910390a150505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610863573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108879190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108f657336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016108ed9190613da7565b60405180910390fd5b81815f610901612c99565b9050806025018383604051610917929190613de4565b90815260200160405180910390205f9054906101000a900460ff16610968576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610971612c99565b9050806001015f81548092919061098790613e29565b91905055505f816001015490505f825f0188886040516109a8929190613de4565b908152602001604051809103902054905080836021015f8481526020019081526020015f20819055507f8511337ad89c20ef904f13e9b9e7eb05f4c0fff128a8760c2c1d436c111b309f8282604051610a02929190613e70565b60405180910390a15050505050505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a71573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a959190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0457336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401610afb9190613da7565b60405180910390fd5b82825f610b0f612c99565b9050806025018383604051610b25929190613de4565b90815260200160405180910390205f9054906101000a900460ff16610b76576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610b7f612c99565b905084815f018888604051610b95929190613de4565b9081526020016040518091039020819055507ff0bb05ed11b11e9a83db1fdfdb364ce1579b1bb34d4080b670b5794692079e3d878787604051610bda93929190613ec3565b60405180910390a150505050505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c6c9190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cdb57336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401610cd29190613da7565b60405180910390fd5b5f610ce4612c99565b905080600d015f8581526020019081526020015f205f9054906101000a900460ff1615610d4857836040517f49cbbf34000000000000000000000000000000000000000000000000000000008152600401610d3f9190613bc3565b60405180910390fd5b80600b015f8581526020019081526020015f205f9054906101000a900460ff16610da957836040517fbe48e7d0000000000000000000000000000000000000000000000000000000008152600401610da09190613bc3565b60405180910390fd5b818303610ded57826040517fd6f4a687000000000000000000000000000000000000000000000000000000008152600401610de49190613bc3565b60405180910390fd5b806008015f8481526020019081526020015f205f9054906101000a900460ff16610e4e57826040517f05fc6161000000000000000000000000000000000000000000000000000000008152600401610e459190613bc3565b60405180910390fd5b806008015f8381526020019081526020015f205f9054906101000a900460ff16610eaf57816040517f2800229d000000000000000000000000000000000000000000000000000000008152600401610ea69190613bc3565b60405180910390fd5b8281600e015f8681526020019081526020015f20819055508181600f015f8681526020019081526020015f2081905550600181600d015f8681526020019081526020015f205f6101000a81548160ff0219169083151502179055507ffd6857403eadbdc0c8b68b151bb46a31d6c352af79b065d472cbd77781514dd4848484846022015f8981526020019081526020015f2054604051610f529493929190613ef3565b60405180910390a150505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663cb661755336040518263ffffffff1660e01b8152600401610fad9190613da7565b5f6040518083038186803b158015610fc3575f80fd5b505afa158015610fd5573d5f803e3d5ffd5b505050505f610fe2612c99565b9050806019015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156110835781336040517f488133e700000000000000000000000000000000000000000000000000000000815260040161107a929190613f36565b60405180910390fd5b6001816019015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555080601a015f8381526020019081526020015f205f81548092919061110c90613e29565b91905055508181601b01541415801561113d575061113c81601a015f8481526020019081526020015f2054612cc0565b5b156111ab5780601c0182908060018154018082558091505060019003905f5260205f20015f90919091909150558181601b01819055507f7066963379f0648a6475860de4447aec0b04c03db5bc169b401c88d16ff6578d826040516111a29190613bc3565b60405180910390a15b5050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016111fc9190613da7565b5f6040518083038186803b158015611212575f80fd5b505afa158015611224573d5f803e3d5ffd5b505050505f611231612c99565b9050806016015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156112d25781336040517ff89d760d0000000000000000000000000000000000000000000000000000000081526004016112c9929190613f36565b60405180910390fd5b6001816016015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806015015f8481526020019081526020015f205f81548092919061135b90613e29565b9190505550806017015f8381526020019081526020015f205f9054906101000a900460ff161580156113a557506113a4816015015f8581526020019081526020015f2054612d51565b5b15611441576001816017015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505f816024015f8581526020019081526020015f205490508082601f015f8581526020019081526020015f20819055507f95c123ae3e63573231605272667e1410a9e3c618227ff509e3c6a152c664b3a284848360405161143793929190613f5d565b60405180910390a1505b505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114c79190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461153657336040517f0e56cf3d00000000000000000000000000000000000000000000000000000000815260040161152d9190613da7565b60405180910390fd5b81815f611541612c99565b9050806025018383604051611557929190613de4565b90815260200160405180910390205f9054906101000a900460ff166115a8576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6115b1612c99565b9050806009015f8154809291906115c790613e29565b91905055505f816009015490505f825f0188886040516115e8929190613de4565b908152602001604051809103902054905080836023015f8481526020019081526020015f20819055507f596d111e7512a47ee0c5eb66eef6f22c45d8ad4fee0520340785a11e221ed5128282604051611642929190613e70565b60405180910390a15050505050505050565b5f8061165e612c99565b9050805f018484604051611673929190613de4565b90815260200160405180910390205491505092915050565b611693612de2565b61169c82612ec8565b6116a68282612fbb565b5050565b5f6116b36130d9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f806116e5612c99565b905080601c0183815481106116fd576116fc613f92565b5b905f5260205f200154915050919050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061178f9190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117fe57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016117f59190613da7565b60405180910390fd5b81815f611809612c99565b905080602501838360405161181f929190613de4565b90815260200160405180910390205f9054906101000a900460ff16611870576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611879612c99565b9050806014015f81548092919061188f90613e29565b91905055505f816014015490505f825f0188886040516118b0929190613de4565b908152602001604051809103902054905080836024015f8481526020019081526020015f20819055507f04f7b6ae222ef47289cfdc7c3b8298273e1bc92eeb346e805163ed4b37e76b29828260405161190a929190613e70565b60405180910390a15050505050505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016119699190613da7565b5f6040518083038186803b15801561197f575f80fd5b505afa158015611991573d5f803e3d5ffd5b505050505f61199e612c99565b9050806006015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611a3f5781336040517f181e6501000000000000000000000000000000000000000000000000000000008152600401611a36929190613f36565b60405180910390fd5b6001816006015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f8381526020019081526020015f205f815480929190611ac890613e29565b9190505550806008015f8381526020019081526020015f205f9054906101000a900460ff16158015611b125750611b11816007015f8481526020019081526020015f2054612d51565b5b15611bae576001816008015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505f816020015f8581526020019081526020015f205490508082601d015f8581526020019081526020015f20819055507fbc9d79366dad6b972d61e3f1567ee2f1e24c0ce10c72dcfb1452ee3b35c8d13e848483604051611ba493929190613f5d565b60405180910390a1505b505050565b5f80611bbd612c99565b905080601d015f8481526020019081526020015f2054915050919050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b8152600401611c289190613da7565b5f6040518083038186803b158015611c3e575f80fd5b505afa158015611c50573d5f803e3d5ffd5b505050505f611c5d612c99565b905080600c015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611cfe5781336040517f7aebd3bd000000000000000000000000000000000000000000000000000000008152600401611cf5929190613f36565b60405180910390fd5b600181600c015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555080600a015f8481526020019081526020015f205f815480929190611d8790613e29565b919050555080600b015f8381526020019081526020015f205f9054906101000a900460ff16158015611dd15750611dd081600a015f8581526020019081526020015f2054612d51565b5b15611e6657600181600b015f8481526020019081526020015f205f6101000a81548160ff021916908315150217905550806023015f8481526020019081526020015f2054816022015f8481526020019081526020015f20819055507f76863545735c29cf1c7ebb0028e734d1d738d2a5d099ba8b529c1793354ae3128383604051611e5d929190613fbf565b60405180910390a15b505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b8152600401611eb89190613da7565b5f6040518083038186803b158015611ece575f80fd5b505afa158015611ee0573d5f803e3d5ffd5b505050505f611eed612c99565b9050806010015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611f8e5781336040517f0ff55fe8000000000000000000000000000000000000000000000000000000008152600401611f85929190613f36565b60405180910390fd5b6001816010015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806011015f8381526020019081526020015f205f81548092919061201790613e29565b9190505550806012015f8381526020019081526020015f205f9054906101000a900460ff161580156120615750612060816011015f8481526020019081526020015f2054612d51565b5b1561214a576001816012015f8481526020019081526020015f205f6101000a81548160ff02191690831515021790555081816013015f83600e015f8781526020019081526020015f205481526020019081526020015f205f83600f015f8781526020019081526020015f205481526020019081526020015f20819055505f816022015f8581526020019081526020015f205490508082601e015f8581526020019081526020015f20819055507fc607d1695840ce0dc9d24a547edaec485e01e5939a540c2e4c23e360e224376784848360405161214093929190613f5d565b60405180910390a1505b505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121d09190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461223f57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016122369190613da7565b60405180910390fd5b5f612248612c99565b9050806018015f8381526020019081526020015f205f9054906101000a900460ff16156122ac57816040517f23bd4fd30000000000000000000000000000000000000000000000000000000081526004016122a39190613bc3565b60405180910390fd5b806008015f8381526020019081526020015f205f9054906101000a900460ff1661230d57816040517fe3b346090000000000000000000000000000000000000000000000000000000081526004016123049190613bc3565b60405180910390fd5b5f81601b0154146123a657806012015f826013015f84601b015481526020019081526020015f205f8581526020019081526020015f205481526020019081526020015f205f9054906101000a900460ff166123a55780601b0154826040517fe854ac2800000000000000000000000000000000000000000000000000000000815260040161239c929190613fbf565b60405180910390fd5b5b6001816018015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055507fbddc1662cdaa871ae40d9edc0e435e0988c6095bfc7c452aedb16c89606b6b75826040516124009190613bc3565b60405180910390a15050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612469573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061248d9190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124fc57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016124f39190613da7565b60405180910390fd5b5f612505612c99565b905080602501848460405161251b929190613de4565b90815260200160405180910390205f9054906101000a900460ff161561257a5783836040517fbcdf9993000000000000000000000000000000000000000000000000000000008152600401612571929190613fe6565b60405180910390fd5b81815f01858560405161258e929190613de4565b90815260200160405180910390208190555060018160250185856040516125b6929190613de4565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507fe63dba14ba216c43efbd6e0206cd2172a4a64f894c8faf004691aa6f88fecada84848460405161260d93929190613ec3565b60405180910390a150505050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f8061265e612c99565b905080601b015491505090565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126c8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126ec9190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461275b57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016127529190613da7565b60405180910390fd5b5f612764612c99565b9050806005015f8381526020019081526020015f205f9054906101000a900460ff16156127c857816040517f5bf84e110000000000000000000000000000000000000000000000000000000081526004016127bf9190613bc3565b60405180910390fd5b806003015f8381526020019081526020015f205f9054906101000a900460ff1661282957816040517fbea1ca4c0000000000000000000000000000000000000000000000000000000081526004016128209190613bc3565b60405180910390fd5b6001816005015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055507f796482d60009a80331529afb48bf3415a16c9ff539a8cd138e77a745af6c7b7882826020015f8581526020019081526020015f2054604051612898929190613e70565b60405180910390a15050565b5f806128ae612c99565b905080601f015f8481526020019081526020015f2054915050919050565b5f806128d6612c99565b905080601e015f8481526020019081526020015f2054915050919050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016129419190613da7565b5f6040518083038186803b158015612957575f80fd5b505afa158015612969573d5f803e3d5ffd5b505050505f612976612c99565b9050806004015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612a175781336040517f4409282d000000000000000000000000000000000000000000000000000000008152600401612a0e929190613f36565b60405180910390fd5b6001816004015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806002015f8481526020019081526020015f205f815480929190612aa090613e29565b9190505550806003015f8381526020019081526020015f205f9054906101000a900460ff16158015612aea5750612ae9816002015f8581526020019081526020015f2054612d51565b5b15612b7f576001816003015f8481526020019081526020015f205f6101000a81548160ff021916908315150217905550806021015f8481526020019081526020015f2054816020015f8481526020019081526020015f20819055507f4187011e59171694872e08b3d3cdd3c901567aa0e38aaa6dbb4368837c1e8e348383604051612b76929190613fbf565b60405180910390a15b505050565b60605f6001612b9284613160565b0190505f8167ffffffffffffffff811115612bb057612baf613698565b5b6040519080825280601f01601f191660200182016040528015612be25781602001600182028036833780820191505090505b5090505f82602001820190505b600115612c43578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612c3857612c37614008565b5b0494505f8503612bef575b819350505050919050565b5f612c57612c72565b5f015f9054906101000a900467ffffffffffffffff16905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f7fa48b77331ab977c487fc73c0afbe86f1a3a130c068453f497d376ab9fac7e000905090565b5f8073a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16636799ef526040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d1f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d439190614049565b905080831015915050919050565b5f8073a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16632a3889986040518163ffffffff1660e01b8152600401602060405180830381865afa158015612db0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612dd49190614049565b905080831015915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480612e8f57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612e766132b1565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612ec6576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f25573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f499190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612fb857336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401612faf9190613da7565b60405180910390fd5b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561302357506040513d601f19601f820116820180604052508101906130209190614088565b60015b61306457816040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161305b9190613da7565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146130ca57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016130c19190613a49565b60405180910390fd5b6130d48383613304565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461315e576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106131bc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816131b2576131b1614008565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106131f9576d04ee2d6d415b85acef810000000083816131ef576131ee614008565b5b0492506020810190505b662386f26fc10000831061322857662386f26fc10000838161321e5761321d614008565b5b0492506010810190505b6305f5e1008310613251576305f5e100838161324757613246614008565b5b0492506008810190505b612710831061327657612710838161326c5761326b614008565b5b0492506004810190505b60648310613299576064838161328f5761328e614008565b5b0492506002810190505b600a83106132a8576001810190505b80915050919050565b5f6132dd7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613376565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61330d8261337f565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f81511115613369576133638282613448565b50613372565b6133716134c8565b5b5050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b036133da57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016133d19190613da7565b60405180910390fd5b806134067f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613376565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff168460405161347191906140f7565b5f60405180830381855af49150503d805f81146134a9576040519150601f19603f3d011682016040523d82523d5f602084013e6134ae565b606091505b50915091506134be858383613504565b9250505092915050565b5f341115613502576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6060826135195761351482613591565b613589565b5f825114801561353f57505f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561358157836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016135789190613da7565b60405180910390fd5b81905061358a565b5b9392505050565b5f815111156135a35780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561360c5780820151818401526020810190506135f1565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613631826135d5565b61363b81856135df565b935061364b8185602086016135ef565b61365481613617565b840191505092915050565b5f6020820190508181035f8301526136778184613627565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6136ce82613617565b810181811067ffffffffffffffff821117156136ed576136ec613698565b5b80604052505050565b5f6136ff61367f565b905061370b82826136c5565b919050565b5f67ffffffffffffffff82111561372a57613729613698565b5b61373382613617565b9050602081019050919050565b828183375f83830152505050565b5f61376061375b84613710565b6136f6565b90508281526020810184848401111561377c5761377b613694565b5b613787848285613740565b509392505050565b5f82601f8301126137a3576137a2613690565b5b81356137b384826020860161374e565b91505092915050565b5f819050919050565b6137ce816137bc565b81146137d8575f80fd5b50565b5f813590506137e9816137c5565b92915050565b5f806040838503121561380557613804613688565b5b5f83013567ffffffffffffffff8111156138225761382161368c565b5b61382e8582860161378f565b925050602061383f858286016137db565b9150509250929050565b5f80fd5b5f80fd5b5f8083601f84011261386657613865613690565b5b8235905067ffffffffffffffff81111561388357613882613849565b5b60208301915083600182028301111561389f5761389e61384d565b5b9250929050565b5f80602083850312156138bc576138bb613688565b5b5f83013567ffffffffffffffff8111156138d9576138d861368c565b5b6138e585828601613851565b92509250509250929050565b5f805f6040848603121561390857613907613688565b5b5f84013567ffffffffffffffff8111156139255761392461368c565b5b61393186828701613851565b93509350506020613944868287016137db565b9150509250925092565b5f819050919050565b6139608161394e565b811461396a575f80fd5b50565b5f8135905061397b81613957565b92915050565b5f805f6060848603121561399857613997613688565b5b5f6139a58682870161396d565b93505060206139b68682870161396d565b92505060406139c78682870161396d565b9150509250925092565b5f602082840312156139e6576139e5613688565b5b5f6139f38482850161396d565b91505092915050565b5f8060408385031215613a1257613a11613688565b5b5f613a1f8582860161396d565b9250506020613a308582860161396d565b9150509250929050565b613a43816137bc565b82525050565b5f602082019050613a5c5f830184613a3a565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f613a8b82613a62565b9050919050565b613a9b81613a81565b8114613aa5575f80fd5b50565b5f81359050613ab681613a92565b92915050565b5f67ffffffffffffffff821115613ad657613ad5613698565b5b613adf82613617565b9050602081019050919050565b5f613afe613af984613abc565b6136f6565b905082815260208101848484011115613b1a57613b19613694565b5b613b25848285613740565b509392505050565b5f82601f830112613b4157613b40613690565b5b8135613b51848260208601613aec565b91505092915050565b5f8060408385031215613b7057613b6f613688565b5b5f613b7d85828601613aa8565b925050602083013567ffffffffffffffff811115613b9e57613b9d61368c565b5b613baa85828601613b2d565b9150509250929050565b613bbd8161394e565b82525050565b5f602082019050613bd65f830184613bb4565b92915050565b5f81905092915050565b5f613bf0826135d5565b613bfa8185613bdc565b9350613c0a8185602086016135ef565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f613c4a600283613bdc565b9150613c5582613c16565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f613c94600183613bdc565b9150613c9f82613c60565b600182019050919050565b5f613cb58287613be6565b9150613cc082613c3e565b9150613ccc8286613be6565b9150613cd782613c88565b9150613ce38285613be6565b9150613cee82613c88565b9150613cfa8284613be6565b915081905095945050505050565b5f613d138284613be6565b915081905092915050565b5f67ffffffffffffffff82169050919050565b613d3a81613d1e565b82525050565b5f602082019050613d535f830184613d31565b92915050565b5f81519050613d6781613a92565b92915050565b5f60208284031215613d8257613d81613688565b5b5f613d8f84828501613d59565b91505092915050565b613da181613a81565b82525050565b5f602082019050613dba5f830184613d98565b92915050565b5f613dcb8385613bdc565b9350613dd8838584613740565b82840190509392505050565b5f613df0828486613dc0565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613e338261394e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e6557613e64613dfc565b5b600182019050919050565b5f604082019050613e835f830185613bb4565b613e906020830184613a3a565b9392505050565b5f613ea283856135df565b9350613eaf838584613740565b613eb883613617565b840190509392505050565b5f6040820190508181035f830152613edc818587613e97565b9050613eeb6020830184613a3a565b949350505050565b5f608082019050613f065f830187613bb4565b613f136020830186613bb4565b613f206040830185613bb4565b613f2d6060830184613a3a565b95945050505050565b5f604082019050613f495f830185613bb4565b613f566020830184613d98565b9392505050565b5f606082019050613f705f830186613bb4565b613f7d6020830185613bb4565b613f8a6040830184613a3a565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f604082019050613fd25f830185613bb4565b613fdf6020830184613bb4565b9392505050565b5f6020820190508181035f830152613fff818486613e97565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f8151905061404381613957565b92915050565b5f6020828403121561405e5761405d613688565b5b5f61406b84828501614035565b91505092915050565b5f81519050614082816137c5565b92915050565b5f6020828403121561409d5761409c613688565b5b5f6140aa84828501614074565b91505092915050565b5f81519050919050565b5f81905092915050565b5f6140d1826140b3565b6140db81856140bd565b93506140eb8185602086016135ef565b80840191505092915050565b5f61410282846140c7565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP4\x80\x15b\0\0CW_\x80\xFD[Pb\0\0Tb\0\0Z` \x1B` \x1CV[b\0\x01\xC4V[_b\0\0kb\0\x01^` \x1B` \x1CV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15b\0\0\xB6W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14b\0\x01[Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Qb\0\x01R\x91\x90b\0\x01\xA9V[`@Q\x80\x91\x03\x90\xA1[PV[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[b\0\x01\xA3\x81b\0\x01\x85V[\x82RPPV[_` \x82\x01\x90Pb\0\x01\xBE_\x83\x01\x84b\0\x01\x98V[\x92\x91PPV[`\x80QaA\rb\0\x01\xEB_9_\x81\x81a-\xE4\x01R\x81\x81a.9\x01Ra0\xDB\x01RaA\r_\xF3\xFE`\x80`@R`\x046\x10a\x01eW_5`\xE0\x1C\x80ce2t_\x11a\0\xD0W\x80c\xA7\xABD@\x11a\0\x89W\x80c\xE0\xE5_\xD7\x11a\0cW\x80c\xE0\xE5_\xD7\x14a\x04\xE9W\x80c\xEE\xD0\x1E}\x14a\x05\x11W\x80c\xF1$L]\x14a\x05MW\x80c\xFA\xACs\xB4\x14a\x05\x89Wa\x01eV[\x80c\xA7\xABD@\x14a\x04mW\x80c\xAD<\xB1\xCC\x14a\x04\x95W\x80c\xD8\x90\x9E\xAB\x14a\x04\xBFWa\x01eV[\x80ce2t_\x14a\x03iW\x80cj\xAF\xA9v\x14a\x03\x91W\x80c\x8A\xF7\x7F\x03\x14a\x03\xB9W\x80c\x94\x1C\x8D\xF6\x14a\x03\xF5W\x80c\x95\x94\xA9\x01\x14a\x04\x1DW\x80c\x9E\x16\x7Fv\x14a\x04EWa\x01eV[\x80c@\xC2O\x15\x11a\x01\"W\x80c@\xC2O\x15\x14a\x02[W\x80cB\x8Ev\xD8\x14a\x02\x83W\x80cE\xE3\xB1\x93\x14a\x02\xABW\x80cO\x1E\xF2\x86\x14a\x02\xE7W\x80cR\xD1\x90-\x14a\x03\x03W\x80cb,\x07\x8F\x14a\x03-Wa\x01eV[\x80c\r\x8En,\x14a\x01iW\x80c\x1F\xBF\xE6n\x14a\x01\x93W\x80c&s\x9E|\x14a\x01\xBBW\x80c)4y\xB1\x14a\x01\xE3W\x80c9L{\xD6\x14a\x02\x0BW\x80c;A\xA6\xDD\x14a\x023W[_\x80\xFD[4\x80\x15a\x01tW_\x80\xFD[Pa\x01}a\x05\xB1V[`@Qa\x01\x8A\x91\x90a6_V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x9EW_\x80\xFD[Pa\x01\xB9`\x04\x806\x03\x81\x01\x90a\x01\xB4\x91\x90a7\xEFV[a\x06,V[\0[4\x80\x15a\x01\xC6W_\x80\xFD[Pa\x01\xE1`\x04\x806\x03\x81\x01\x90a\x01\xDC\x91\x90a8\xA6V[a\x08\x06V[\0[4\x80\x15a\x01\xEEW_\x80\xFD[Pa\x02\t`\x04\x806\x03\x81\x01\x90a\x02\x04\x91\x90a8\xF1V[a\n\x14V[\0[4\x80\x15a\x02\x16W_\x80\xFD[Pa\x021`\x04\x806\x03\x81\x01\x90a\x02,\x91\x90a9\x81V[a\x0B\xEBV[\0[4\x80\x15a\x02>W_\x80\xFD[Pa\x02Y`\x04\x806\x03\x81\x01\x90a\x02T\x91\x90a9\xD1V[a\x0F`V[\0[4\x80\x15a\x02fW_\x80\xFD[Pa\x02\x81`\x04\x806\x03\x81\x01\x90a\x02|\x91\x90a9\xFCV[a\x11\xAFV[\0[4\x80\x15a\x02\x8EW_\x80\xFD[Pa\x02\xA9`\x04\x806\x03\x81\x01\x90a\x02\xA4\x91\x90a8\xA6V[a\x14FV[\0[4\x80\x15a\x02\xB6W_\x80\xFD[Pa\x02\xD1`\x04\x806\x03\x81\x01\x90a\x02\xCC\x91\x90a8\xA6V[a\x16TV[`@Qa\x02\xDE\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[a\x03\x01`\x04\x806\x03\x81\x01\x90a\x02\xFC\x91\x90a;ZV[a\x16\x8BV[\0[4\x80\x15a\x03\x0EW_\x80\xFD[Pa\x03\x17a\x16\xAAV[`@Qa\x03$\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x038W_\x80\xFD[Pa\x03S`\x04\x806\x03\x81\x01\x90a\x03N\x91\x90a9\xD1V[a\x16\xDBV[`@Qa\x03`\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03tW_\x80\xFD[Pa\x03\x8F`\x04\x806\x03\x81\x01\x90a\x03\x8A\x91\x90a8\xA6V[a\x17\x0EV[\0[4\x80\x15a\x03\x9CW_\x80\xFD[Pa\x03\xB7`\x04\x806\x03\x81\x01\x90a\x03\xB2\x91\x90a9\xFCV[a\x19\x1CV[\0[4\x80\x15a\x03\xC4W_\x80\xFD[Pa\x03\xDF`\x04\x806\x03\x81\x01\x90a\x03\xDA\x91\x90a9\xD1V[a\x1B\xB3V[`@Qa\x03\xEC\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\0W_\x80\xFD[Pa\x04\x1B`\x04\x806\x03\x81\x01\x90a\x04\x16\x91\x90a9\xFCV[a\x1B\xDBV[\0[4\x80\x15a\x04(W_\x80\xFD[Pa\x04C`\x04\x806\x03\x81\x01\x90a\x04>\x91\x90a9\xFCV[a\x1EkV[\0[4\x80\x15a\x04PW_\x80\xFD[Pa\x04k`\x04\x806\x03\x81\x01\x90a\x04f\x91\x90a9\xD1V[a!OV[\0[4\x80\x15a\x04xW_\x80\xFD[Pa\x04\x93`\x04\x806\x03\x81\x01\x90a\x04\x8E\x91\x90a8\xF1V[a$\x0CV[\0[4\x80\x15a\x04\xA0W_\x80\xFD[Pa\x04\xA9a&\x1BV[`@Qa\x04\xB6\x91\x90a6_V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xCAW_\x80\xFD[Pa\x04\xD3a&TV[`@Qa\x04\xE0\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xF4W_\x80\xFD[Pa\x05\x0F`\x04\x806\x03\x81\x01\x90a\x05\n\x91\x90a9\xD1V[a&kV[\0[4\x80\x15a\x05\x1CW_\x80\xFD[Pa\x057`\x04\x806\x03\x81\x01\x90a\x052\x91\x90a9\xD1V[a(\xA4V[`@Qa\x05D\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05XW_\x80\xFD[Pa\x05s`\x04\x806\x03\x81\x01\x90a\x05n\x91\x90a9\xD1V[a(\xCCV[`@Qa\x05\x80\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\x94W_\x80\xFD[Pa\x05\xAF`\x04\x806\x03\x81\x01\x90a\x05\xAA\x91\x90a9\xFCV[a(\xF4V[\0[```@Q\x80`@\x01`@R\x80`\r\x81R` \x01\x7FKmsManagement\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x05\xF2_a+\x84V[a\x05\xFC`\x01a+\x84V[a\x06\x05_a+\x84V[`@Q` \x01a\x06\x18\x94\x93\x92\x91\x90a<\xAAV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[`\x01a\x066a,NV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x06wW`@Q\x7FoOs\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_a\x06\x82a,rV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\x06\xCAWP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\x07\x01W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_a\x07Oa,\x99V[\x90P\x83\x81_\x01\x86`@Qa\x07c\x91\x90a=\x08V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP`\x01\x81`%\x01\x86`@Qa\x07\x89\x91\x90a=\x08V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x07\xF8\x91\x90a=@V[`@Q\x80\x91\x03\x90\xA1PPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08cW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x87\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x08\xF6W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\xED\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x81\x81_a\t\x01a,\x99V[\x90P\x80`%\x01\x83\x83`@Qa\t\x17\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\thW`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\tqa,\x99V[\x90P\x80`\x01\x01_\x81T\x80\x92\x91\x90a\t\x87\x90a>)V[\x91\x90PUP_\x81`\x01\x01T\x90P_\x82_\x01\x88\x88`@Qa\t\xA8\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`!\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x85\x113z\xD8\x9C \xEF\x90O\x13\xE9\xB9\xE7\xEB\x05\xF4\xC0\xFF\xF1(\xA8v\x0C,\x1DCl\x11\x1B0\x9F\x82\x82`@Qa\n\x02\x92\x91\x90a>pV[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\nqW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\x95\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0B\x04W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\xFB\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x82\x82_a\x0B\x0Fa,\x99V[\x90P\x80`%\x01\x83\x83`@Qa\x0B%\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0BvW`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x0B\x7Fa,\x99V[\x90P\x84\x81_\x01\x88\x88`@Qa\x0B\x95\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP\x7F\xF0\xBB\x05\xED\x11\xB1\x1E\x9A\x83\xDB\x1F\xDF\xDB6L\xE1W\x9B\x1B\xB3M@\x80\xB6p\xB5yF\x92\x07\x9E=\x87\x87\x87`@Qa\x0B\xDA\x93\x92\x91\x90a>\xC3V[`@Q\x80\x91\x03\x90\xA1PPPPPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0CHW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0Cl\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0C\xDBW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0C\xD2\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[_a\x0C\xE4a,\x99V[\x90P\x80`\r\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\rHW\x83`@Q\x7FI\xCB\xBF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\r?\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x0B\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\r\xA9W\x83`@Q\x7F\xBEH\xE7\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\r\xA0\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x81\x83\x03a\r\xEDW\x82`@Q\x7F\xD6\xF4\xA6\x87\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\r\xE4\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0ENW\x82`@Q\x7F\x05\xFCaa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0EE\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0E\xAFW\x81`@Q\x7F(\0\"\x9D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0E\xA6\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x82\x81`\x0E\x01_\x86\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x81\x81`\x0F\x01_\x86\x81R` \x01\x90\x81R` \x01_ \x81\x90UP`\x01\x81`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xFDhW@>\xAD\xBD\xC0\xC8\xB6\x8B\x15\x1B\xB4j1\xD6\xC3R\xAFy\xB0e\xD4r\xCB\xD7w\x81QM\xD4\x84\x84\x84\x84`\"\x01_\x89\x81R` \x01\x90\x81R` \x01_ T`@Qa\x0FR\x94\x93\x92\x91\x90a>\xF3V[`@Q\x80\x91\x03\x90\xA1PPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCBf\x17U3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0F\xAD\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x0F\xC3W_\x80\xFD[PZ\xFA\x15\x80\x15a\x0F\xD5W=_\x80>=_\xFD[PPPP_a\x0F\xE2a,\x99V[\x90P\x80`\x19\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x10\x83W\x813`@Q\x7FH\x813\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x10z\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x19\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x1A\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x11\x0C\x90a>)V[\x91\x90PUP\x81\x81`\x1B\x01T\x14\x15\x80\x15a\x11=WPa\x11<\x81`\x1A\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta,\xC0V[[\x15a\x11\xABW\x80`\x1C\x01\x82\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91PU\x81\x81`\x1B\x01\x81\x90UP\x7Fpf\x963y\xF0d\x8Adu\x86\r\xE4Dz\xEC\x0B\x04\xC0=\xB5\xBC\x16\x9B@\x1C\x88\xD1o\xF6W\x8D\x82`@Qa\x11\xA2\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xA1[PPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11\xFC\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x12\x12W_\x80\xFD[PZ\xFA\x15\x80\x15a\x12$W=_\x80>=_\xFD[PPPP_a\x121a,\x99V[\x90P\x80`\x16\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x12\xD2W\x813`@Q\x7F\xF8\x9Dv\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x12\xC9\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x16\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x15\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x13[\x90a>)V[\x91\x90PUP\x80`\x17\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x13\xA5WPa\x13\xA4\x81`\x15\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a\x14AW`\x01\x81`\x17\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_\x81`$\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1F\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x95\xC1#\xAE>cW21`Rrf~\x14\x10\xA9\xE3\xC6\x18\"\x7F\xF5\t\xE3\xC6\xA1R\xC6d\xB3\xA2\x84\x84\x83`@Qa\x147\x93\x92\x91\x90a?]V[`@Q\x80\x91\x03\x90\xA1P[PPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14\xA3W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x14\xC7\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x156W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x15-\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x81\x81_a\x15Aa,\x99V[\x90P\x80`%\x01\x83\x83`@Qa\x15W\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x15\xA8W`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x15\xB1a,\x99V[\x90P\x80`\t\x01_\x81T\x80\x92\x91\x90a\x15\xC7\x90a>)V[\x91\x90PUP_\x81`\t\x01T\x90P_\x82_\x01\x88\x88`@Qa\x15\xE8\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`#\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7FYm\x11\x1Eu\x12\xA4~\xE0\xC5\xEBf\xEE\xF6\xF2,E\xD8\xADO\xEE\x05 4\x07\x85\xA1\x1E\"\x1E\xD5\x12\x82\x82`@Qa\x16B\x92\x91\x90a>pV[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[_\x80a\x16^a,\x99V[\x90P\x80_\x01\x84\x84`@Qa\x16s\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x91PP\x92\x91PPV[a\x16\x93a-\xE2V[a\x16\x9C\x82a.\xC8V[a\x16\xA6\x82\x82a/\xBBV[PPV[_a\x16\xB3a0\xD9V[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[_\x80a\x16\xE5a,\x99V[\x90P\x80`\x1C\x01\x83\x81T\x81\x10a\x16\xFDWa\x16\xFCa?\x92V[[\x90_R` _ \x01T\x91PP\x91\x90PV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x17kW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x17\x8F\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x17\xFEW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17\xF5\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x81\x81_a\x18\ta,\x99V[\x90P\x80`%\x01\x83\x83`@Qa\x18\x1F\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x18pW`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x18ya,\x99V[\x90P\x80`\x14\x01_\x81T\x80\x92\x91\x90a\x18\x8F\x90a>)V[\x91\x90PUP_\x81`\x14\x01T\x90P_\x82_\x01\x88\x88`@Qa\x18\xB0\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`$\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x04\xF7\xB6\xAE\".\xF4r\x89\xCF\xDC|;\x82\x98'>\x1B\xC9.\xEB4n\x80Qc\xEDK7\xE7k)\x82\x82`@Qa\x19\n\x92\x91\x90a>pV[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x19i\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x19\x7FW_\x80\xFD[PZ\xFA\x15\x80\x15a\x19\x91W=_\x80>=_\xFD[PPPP_a\x19\x9Ea,\x99V[\x90P\x80`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1A?W\x813`@Q\x7F\x18\x1Ee\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1A6\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x07\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x1A\xC8\x90a>)V[\x91\x90PUP\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x1B\x12WPa\x1B\x11\x81`\x07\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a\x1B\xAEW`\x01\x81`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_\x81` \x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1D\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\xBC\x9Dy6m\xADk\x97-a\xE3\xF1V~\xE2\xF1\xE2L\x0C\xE1\x0Cr\xDC\xFB\x14R\xEE;5\xC8\xD1>\x84\x84\x83`@Qa\x1B\xA4\x93\x92\x91\x90a?]V[`@Q\x80\x91\x03\x90\xA1P[PPPV[_\x80a\x1B\xBDa,\x99V[\x90P\x80`\x1D\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x1C(\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1C>W_\x80\xFD[PZ\xFA\x15\x80\x15a\x1CPW=_\x80>=_\xFD[PPPP_a\x1C]a,\x99V[\x90P\x80`\x0C\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1C\xFEW\x813`@Q\x7Fz\xEB\xD3\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1C\xF5\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x0C\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x1D\x87\x90a>)V[\x91\x90PUP\x80`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x1D\xD1WPa\x1D\xD0\x81`\n\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a\x1EfW`\x01\x81`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`#\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x81`\"\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7Fv\x865Es\\)\xCF\x1C~\xBB\0(\xE74\xD1\xD78\xD2\xA5\xD0\x99\xBA\x8BR\x9C\x17\x935J\xE3\x12\x83\x83`@Qa\x1E]\x92\x91\x90a?\xBFV[`@Q\x80\x91\x03\x90\xA1[PPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x1E\xB8\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1E\xCEW_\x80\xFD[PZ\xFA\x15\x80\x15a\x1E\xE0W=_\x80>=_\xFD[PPPP_a\x1E\xEDa,\x99V[\x90P\x80`\x10\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1F\x8EW\x813`@Q\x7F\x0F\xF5_\xE8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1F\x85\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x10\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x11\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a \x17\x90a>)V[\x91\x90PUP\x80`\x12\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a aWPa `\x81`\x11\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a!JW`\x01\x81`\x12\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x81\x81`\x13\x01_\x83`\x0E\x01_\x87\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ _\x83`\x0F\x01_\x87\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ \x81\x90UP_\x81`\"\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1E\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\xC6\x07\xD1iX@\xCE\r\xC9\xD2JT~\xDA\xECH^\x01\xE5\x93\x9AT\x0C.L#\xE3`\xE2$7g\x84\x84\x83`@Qa!@\x93\x92\x91\x90a?]V[`@Q\x80\x91\x03\x90\xA1P[PPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a!\xACW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a!\xD0\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\"?W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"6\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[_a\"Ha,\x99V[\x90P\x80`\x18\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\"\xACW\x81`@Q\x7F#\xBDO\xD3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\xA3\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a#\rW\x81`@Q\x7F\xE3\xB3F\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a#\x04\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[_\x81`\x1B\x01T\x14a#\xA6W\x80`\x12\x01_\x82`\x13\x01_\x84`\x1B\x01T\x81R` \x01\x90\x81R` \x01_ _\x85\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a#\xA5W\x80`\x1B\x01T\x82`@Q\x7F\xE8T\xAC(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a#\x9C\x92\x91\x90a?\xBFV[`@Q\x80\x91\x03\x90\xFD[[`\x01\x81`\x18\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xBD\xDC\x16b\xCD\xAA\x87\x1A\xE4\r\x9E\xDC\x0EC^\t\x88\xC6\t[\xFC|E*\xED\xB1l\x89`kku\x82`@Qa$\0\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xA1PPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a$iW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a$\x8D\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a$\xFCW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a$\xF3\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[_a%\x05a,\x99V[\x90P\x80`%\x01\x84\x84`@Qa%\x1B\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a%zW\x83\x83`@Q\x7F\xBC\xDF\x99\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%q\x92\x91\x90a?\xE6V[`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01\x85\x85`@Qa%\x8E\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP`\x01\x81`%\x01\x85\x85`@Qa%\xB6\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xE6=\xBA\x14\xBA!lC\xEF\xBDn\x02\x06\xCD!r\xA4\xA6O\x89L\x8F\xAF\0F\x91\xAAo\x88\xFE\xCA\xDA\x84\x84\x84`@Qa&\r\x93\x92\x91\x90a>\xC3V[`@Q\x80\x91\x03\x90\xA1PPPPV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[_\x80a&^a,\x99V[\x90P\x80`\x1B\x01T\x91PP\x90V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a&\xC8W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a&\xEC\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a'[W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a'R\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[_a'da,\x99V[\x90P\x80`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a'\xC8W\x81`@Q\x7F[\xF8N\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a'\xBF\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x03\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a()W\x81`@Q\x7F\xBE\xA1\xCAL\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a( \x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7Fyd\x82\xD6\0\t\xA8\x031R\x9A\xFBH\xBF4\x15\xA1l\x9F\xF59\xA8\xCD\x13\x8Ew\xA7E\xAFl{x\x82\x82` \x01_\x85\x81R` \x01\x90\x81R` \x01_ T`@Qa(\x98\x92\x91\x90a>pV[`@Q\x80\x91\x03\x90\xA1PPV[_\x80a(\xAEa,\x99V[\x90P\x80`\x1F\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[_\x80a(\xD6a,\x99V[\x90P\x80`\x1E\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a)A\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a)WW_\x80\xFD[PZ\xFA\x15\x80\x15a)iW=_\x80>=_\xFD[PPPP_a)va,\x99V[\x90P\x80`\x04\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a*\x17W\x813`@Q\x7FD\t(-\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a*\x0E\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x04\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x02\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a*\xA0\x90a>)V[\x91\x90PUP\x80`\x03\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a*\xEAWPa*\xE9\x81`\x02\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a+\x7FW`\x01\x81`\x03\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`!\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x81` \x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7FA\x87\x01\x1EY\x17\x16\x94\x87.\x08\xB3\xD3\xCD\xD3\xC9\x01Vz\xA0\xE3\x8A\xAAm\xBBCh\x83|\x1E\x8E4\x83\x83`@Qa+v\x92\x91\x90a?\xBFV[`@Q\x80\x91\x03\x90\xA1[PPPV[``_`\x01a+\x92\x84a1`V[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a+\xB0Wa+\xAFa6\x98V[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a+\xE2W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a,CW\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a,8Wa,7a@\x08V[[\x04\x94P_\x85\x03a+\xEFW[\x81\x93PPPP\x91\x90PV[_a,Wa,rV[_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[_\x7F\xA4\x8Bw3\x1A\xB9w\xC4\x87\xFCs\xC0\xAF\xBE\x86\xF1\xA3\xA10\xC0hE?I}7j\xB9\xFA\xC7\xE0\0\x90P\x90V[_\x80s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cg\x99\xEFR`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a-\x1FW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a-C\x91\x90a@IV[\x90P\x80\x83\x10\x15\x91PP\x91\x90PV[_\x80s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c*8\x89\x98`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a-\xB0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a-\xD4\x91\x90a@IV[\x90P\x80\x83\x10\x15\x91PP\x91\x90PV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a.\x8FWP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a.va2\xB1V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a.\xC6W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a/%W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a/I\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a/\xB8W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/\xAF\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a0#WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a0 \x91\x90a@\x88V[`\x01[a0dW\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0[\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a0\xCAW\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0\xC1\x91\x90a:IV[`@Q\x80\x91\x03\x90\xFD[a0\xD4\x83\x83a3\x04V[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a1^W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_\x80_\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a1\xBCWz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a1\xB2Wa1\xB1a@\x08V[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a1\xF9Wm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a1\xEFWa1\xEEa@\x08V[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a2(Wf#\x86\xF2o\xC1\0\0\x83\x81a2\x1EWa2\x1Da@\x08V[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a2QWc\x05\xF5\xE1\0\x83\x81a2GWa2Fa@\x08V[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a2vWa'\x10\x83\x81a2lWa2ka@\x08V[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a2\x99W`d\x83\x81a2\x8FWa2\x8Ea@\x08V[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a2\xA8W`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[_a2\xDD\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba3vV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a3\r\x82a3\x7FV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a3iWa3c\x82\x82a4HV[Pa3rV[a3qa4\xC8V[[PPV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a3\xDAW\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a3\xD1\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x80a4\x06\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba3vV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa4q\x91\x90a@\xF7V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a4\xA9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a4\xAEV[``\x91P[P\x91P\x91Pa4\xBE\x85\x83\x83a5\x04V[\x92PPP\x92\x91PPV[_4\x11\x15a5\x02W`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[``\x82a5\x19Wa5\x14\x82a5\x91V[a5\x89V[_\x82Q\x14\x80\x15a5?WP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a5\x81W\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a5x\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa5\x8AV[[\x93\x92PPPV[_\x81Q\x11\x15a5\xA3W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a6\x0CW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa5\xF1V[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a61\x82a5\xD5V[a6;\x81\x85a5\xDFV[\x93Pa6K\x81\x85` \x86\x01a5\xEFV[a6T\x81a6\x17V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra6w\x81\x84a6'V[\x90P\x92\x91PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a6\xCE\x82a6\x17V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a6\xEDWa6\xECa6\x98V[[\x80`@RPPPV[_a6\xFFa6\x7FV[\x90Pa7\x0B\x82\x82a6\xC5V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a7*Wa7)a6\x98V[[a73\x82a6\x17V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a7`a7[\x84a7\x10V[a6\xF6V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a7|Wa7{a6\x94V[[a7\x87\x84\x82\x85a7@V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a7\xA3Wa7\xA2a6\x90V[[\x815a7\xB3\x84\x82` \x86\x01a7NV[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a7\xCE\x81a7\xBCV[\x81\x14a7\xD8W_\x80\xFD[PV[_\x815\x90Pa7\xE9\x81a7\xC5V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a8\x05Wa8\x04a6\x88V[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8\"Wa8!a6\x8CV[[a8.\x85\x82\x86\x01a7\x8FV[\x92PP` a8?\x85\x82\x86\x01a7\xDBV[\x91PP\x92P\x92\x90PV[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a8fWa8ea6\x90V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8\x83Wa8\x82a8IV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a8\x9FWa8\x9Ea8MV[[\x92P\x92\x90PV[_\x80` \x83\x85\x03\x12\x15a8\xBCWa8\xBBa6\x88V[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8\xD9Wa8\xD8a6\x8CV[[a8\xE5\x85\x82\x86\x01a8QV[\x92P\x92PP\x92P\x92\x90PV[_\x80_`@\x84\x86\x03\x12\x15a9\x08Wa9\x07a6\x88V[[_\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9%Wa9$a6\x8CV[[a91\x86\x82\x87\x01a8QV[\x93P\x93PP` a9D\x86\x82\x87\x01a7\xDBV[\x91PP\x92P\x92P\x92V[_\x81\x90P\x91\x90PV[a9`\x81a9NV[\x81\x14a9jW_\x80\xFD[PV[_\x815\x90Pa9{\x81a9WV[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a9\x98Wa9\x97a6\x88V[[_a9\xA5\x86\x82\x87\x01a9mV[\x93PP` a9\xB6\x86\x82\x87\x01a9mV[\x92PP`@a9\xC7\x86\x82\x87\x01a9mV[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a9\xE6Wa9\xE5a6\x88V[[_a9\xF3\x84\x82\x85\x01a9mV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a:\x12Wa:\x11a6\x88V[[_a:\x1F\x85\x82\x86\x01a9mV[\x92PP` a:0\x85\x82\x86\x01a9mV[\x91PP\x92P\x92\x90PV[a:C\x81a7\xBCV[\x82RPPV[_` \x82\x01\x90Pa:\\_\x83\x01\x84a::V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a:\x8B\x82a:bV[\x90P\x91\x90PV[a:\x9B\x81a:\x81V[\x81\x14a:\xA5W_\x80\xFD[PV[_\x815\x90Pa:\xB6\x81a:\x92V[\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a:\xD6Wa:\xD5a6\x98V[[a:\xDF\x82a6\x17V[\x90P` \x81\x01\x90P\x91\x90PV[_a:\xFEa:\xF9\x84a:\xBCV[a6\xF6V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a;\x1AWa;\x19a6\x94V[[a;%\x84\x82\x85a7@V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a;AWa;@a6\x90V[[\x815a;Q\x84\x82` \x86\x01a:\xECV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a;pWa;oa6\x88V[[_a;}\x85\x82\x86\x01a:\xA8V[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a;\x9EWa;\x9Da6\x8CV[[a;\xAA\x85\x82\x86\x01a;-V[\x91PP\x92P\x92\x90PV[a;\xBD\x81a9NV[\x82RPPV[_` \x82\x01\x90Pa;\xD6_\x83\x01\x84a;\xB4V[\x92\x91PPV[_\x81\x90P\x92\x91PPV[_a;\xF0\x82a5\xD5V[a;\xFA\x81\x85a;\xDCV[\x93Pa<\n\x81\x85` \x86\x01a5\xEFV[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a<J`\x02\x83a;\xDCV[\x91Pa<U\x82a<\x16V[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a<\x94`\x01\x83a;\xDCV[\x91Pa<\x9F\x82a<`V[`\x01\x82\x01\x90P\x91\x90PV[_a<\xB5\x82\x87a;\xE6V[\x91Pa<\xC0\x82a<>V[\x91Pa<\xCC\x82\x86a;\xE6V[\x91Pa<\xD7\x82a<\x88V[\x91Pa<\xE3\x82\x85a;\xE6V[\x91Pa<\xEE\x82a<\x88V[\x91Pa<\xFA\x82\x84a;\xE6V[\x91P\x81\x90P\x95\x94PPPPPV[_a=\x13\x82\x84a;\xE6V[\x91P\x81\x90P\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a=:\x81a=\x1EV[\x82RPPV[_` \x82\x01\x90Pa=S_\x83\x01\x84a=1V[\x92\x91PPV[_\x81Q\x90Pa=g\x81a:\x92V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a=\x82Wa=\x81a6\x88V[[_a=\x8F\x84\x82\x85\x01a=YV[\x91PP\x92\x91PPV[a=\xA1\x81a:\x81V[\x82RPPV[_` \x82\x01\x90Pa=\xBA_\x83\x01\x84a=\x98V[\x92\x91PPV[_a=\xCB\x83\x85a;\xDCV[\x93Pa=\xD8\x83\x85\x84a7@V[\x82\x84\x01\x90P\x93\x92PPPV[_a=\xF0\x82\x84\x86a=\xC0V[\x91P\x81\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a>3\x82a9NV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a>eWa>da=\xFCV[[`\x01\x82\x01\x90P\x91\x90PV[_`@\x82\x01\x90Pa>\x83_\x83\x01\x85a;\xB4V[a>\x90` \x83\x01\x84a::V[\x93\x92PPPV[_a>\xA2\x83\x85a5\xDFV[\x93Pa>\xAF\x83\x85\x84a7@V[a>\xB8\x83a6\x17V[\x84\x01\x90P\x93\x92PPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01Ra>\xDC\x81\x85\x87a>\x97V[\x90Pa>\xEB` \x83\x01\x84a::V[\x94\x93PPPPV[_`\x80\x82\x01\x90Pa?\x06_\x83\x01\x87a;\xB4V[a?\x13` \x83\x01\x86a;\xB4V[a? `@\x83\x01\x85a;\xB4V[a?-``\x83\x01\x84a::V[\x95\x94PPPPPV[_`@\x82\x01\x90Pa?I_\x83\x01\x85a;\xB4V[a?V` \x83\x01\x84a=\x98V[\x93\x92PPPV[_``\x82\x01\x90Pa?p_\x83\x01\x86a;\xB4V[a?}` \x83\x01\x85a;\xB4V[a?\x8A`@\x83\x01\x84a::V[\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_`@\x82\x01\x90Pa?\xD2_\x83\x01\x85a;\xB4V[a?\xDF` \x83\x01\x84a;\xB4V[\x93\x92PPPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra?\xFF\x81\x84\x86a>\x97V[\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x81Q\x90Pa@C\x81a9WV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a@^Wa@]a6\x88V[[_a@k\x84\x82\x85\x01a@5V[\x91PP\x92\x91PPV[_\x81Q\x90Pa@\x82\x81a7\xC5V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a@\x9DWa@\x9Ca6\x88V[[_a@\xAA\x84\x82\x85\x01a@tV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a@\xD1\x82a@\xB3V[a@\xDB\x81\x85a@\xBDV[\x93Pa@\xEB\x81\x85` \x86\x01a5\xEFV[\x80\x84\x01\x91PP\x92\x91PPV[_aA\x02\x82\x84a@\xC7V[\x91P\x81\x90P\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610165575f3560e01c80636532745f116100d0578063a7ab444011610089578063e0e55fd711610063578063e0e55fd7146104e9578063eed01e7d14610511578063f1244c5d1461054d578063faac73b41461058957610165565b8063a7ab44401461046d578063ad3cb1cc14610495578063d8909eab146104bf57610165565b80636532745f146103695780636aafa976146103915780638af77f03146103b9578063941c8df6146103f55780639594a9011461041d5780639e167f761461044557610165565b806340c24f151161012257806340c24f151461025b578063428e76d81461028357806345e3b193146102ab5780634f1ef286146102e757806352d1902d14610303578063622c078f1461032d57610165565b80630d8e6e2c146101695780631fbfe66e1461019357806326739e7c146101bb578063293479b1146101e3578063394c7bd61461020b5780633b41a6dd14610233575b5f80fd5b348015610174575f80fd5b5061017d6105b1565b60405161018a919061365f565b60405180910390f35b34801561019e575f80fd5b506101b960048036038101906101b491906137ef565b61062c565b005b3480156101c6575f80fd5b506101e160048036038101906101dc91906138a6565b610806565b005b3480156101ee575f80fd5b50610209600480360381019061020491906138f1565b610a14565b005b348015610216575f80fd5b50610231600480360381019061022c9190613981565b610beb565b005b34801561023e575f80fd5b50610259600480360381019061025491906139d1565b610f60565b005b348015610266575f80fd5b50610281600480360381019061027c91906139fc565b6111af565b005b34801561028e575f80fd5b506102a960048036038101906102a491906138a6565b611446565b005b3480156102b6575f80fd5b506102d160048036038101906102cc91906138a6565b611654565b6040516102de9190613a49565b60405180910390f35b61030160048036038101906102fc9190613b5a565b61168b565b005b34801561030e575f80fd5b506103176116aa565b6040516103249190613a49565b60405180910390f35b348015610338575f80fd5b50610353600480360381019061034e91906139d1565b6116db565b6040516103609190613bc3565b60405180910390f35b348015610374575f80fd5b5061038f600480360381019061038a91906138a6565b61170e565b005b34801561039c575f80fd5b506103b760048036038101906103b291906139fc565b61191c565b005b3480156103c4575f80fd5b506103df60048036038101906103da91906139d1565b611bb3565b6040516103ec9190613a49565b60405180910390f35b348015610400575f80fd5b5061041b600480360381019061041691906139fc565b611bdb565b005b348015610428575f80fd5b50610443600480360381019061043e91906139fc565b611e6b565b005b348015610450575f80fd5b5061046b600480360381019061046691906139d1565b61214f565b005b348015610478575f80fd5b50610493600480360381019061048e91906138f1565b61240c565b005b3480156104a0575f80fd5b506104a961261b565b6040516104b6919061365f565b60405180910390f35b3480156104ca575f80fd5b506104d3612654565b6040516104e09190613bc3565b60405180910390f35b3480156104f4575f80fd5b5061050f600480360381019061050a91906139d1565b61266b565b005b34801561051c575f80fd5b50610537600480360381019061053291906139d1565b6128a4565b6040516105449190613a49565b60405180910390f35b348015610558575f80fd5b50610573600480360381019061056e91906139d1565b6128cc565b6040516105809190613a49565b60405180910390f35b348015610594575f80fd5b506105af60048036038101906105aa91906139fc565b6128f4565b005b60606040518060400160405280600d81526020017f4b6d734d616e6167656d656e74000000000000000000000000000000000000008152506105f25f612b84565b6105fc6001612b84565b6106055f612b84565b6040516020016106189493929190613caa565b604051602081830303815290604052905090565b6001610636612c4e565b67ffffffffffffffff1614610677576040517f6f4f731f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f610682612c72565b9050805f0160089054906101000a900460ff16806106ca57508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b15610701576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff0219169083151502179055505f61074f612c99565b905083815f01866040516107639190613d08565b908152602001604051809103902081905550600181602501866040516107899190613d08565b90815260200160405180910390205f6101000a81548160ff021916908315150217905550505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2826040516107f89190613d40565b60405180910390a150505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610863573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108879190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108f657336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016108ed9190613da7565b60405180910390fd5b81815f610901612c99565b9050806025018383604051610917929190613de4565b90815260200160405180910390205f9054906101000a900460ff16610968576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610971612c99565b9050806001015f81548092919061098790613e29565b91905055505f816001015490505f825f0188886040516109a8929190613de4565b908152602001604051809103902054905080836021015f8481526020019081526020015f20819055507f8511337ad89c20ef904f13e9b9e7eb05f4c0fff128a8760c2c1d436c111b309f8282604051610a02929190613e70565b60405180910390a15050505050505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a71573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a959190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0457336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401610afb9190613da7565b60405180910390fd5b82825f610b0f612c99565b9050806025018383604051610b25929190613de4565b90815260200160405180910390205f9054906101000a900460ff16610b76576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610b7f612c99565b905084815f018888604051610b95929190613de4565b9081526020016040518091039020819055507ff0bb05ed11b11e9a83db1fdfdb364ce1579b1bb34d4080b670b5794692079e3d878787604051610bda93929190613ec3565b60405180910390a150505050505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c6c9190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cdb57336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401610cd29190613da7565b60405180910390fd5b5f610ce4612c99565b905080600d015f8581526020019081526020015f205f9054906101000a900460ff1615610d4857836040517f49cbbf34000000000000000000000000000000000000000000000000000000008152600401610d3f9190613bc3565b60405180910390fd5b80600b015f8581526020019081526020015f205f9054906101000a900460ff16610da957836040517fbe48e7d0000000000000000000000000000000000000000000000000000000008152600401610da09190613bc3565b60405180910390fd5b818303610ded57826040517fd6f4a687000000000000000000000000000000000000000000000000000000008152600401610de49190613bc3565b60405180910390fd5b806008015f8481526020019081526020015f205f9054906101000a900460ff16610e4e57826040517f05fc6161000000000000000000000000000000000000000000000000000000008152600401610e459190613bc3565b60405180910390fd5b806008015f8381526020019081526020015f205f9054906101000a900460ff16610eaf57816040517f2800229d000000000000000000000000000000000000000000000000000000008152600401610ea69190613bc3565b60405180910390fd5b8281600e015f8681526020019081526020015f20819055508181600f015f8681526020019081526020015f2081905550600181600d015f8681526020019081526020015f205f6101000a81548160ff0219169083151502179055507ffd6857403eadbdc0c8b68b151bb46a31d6c352af79b065d472cbd77781514dd4848484846022015f8981526020019081526020015f2054604051610f529493929190613ef3565b60405180910390a150505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663cb661755336040518263ffffffff1660e01b8152600401610fad9190613da7565b5f6040518083038186803b158015610fc3575f80fd5b505afa158015610fd5573d5f803e3d5ffd5b505050505f610fe2612c99565b9050806019015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156110835781336040517f488133e700000000000000000000000000000000000000000000000000000000815260040161107a929190613f36565b60405180910390fd5b6001816019015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555080601a015f8381526020019081526020015f205f81548092919061110c90613e29565b91905055508181601b01541415801561113d575061113c81601a015f8481526020019081526020015f2054612cc0565b5b156111ab5780601c0182908060018154018082558091505060019003905f5260205f20015f90919091909150558181601b01819055507f7066963379f0648a6475860de4447aec0b04c03db5bc169b401c88d16ff6578d826040516111a29190613bc3565b60405180910390a15b5050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016111fc9190613da7565b5f6040518083038186803b158015611212575f80fd5b505afa158015611224573d5f803e3d5ffd5b505050505f611231612c99565b9050806016015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156112d25781336040517ff89d760d0000000000000000000000000000000000000000000000000000000081526004016112c9929190613f36565b60405180910390fd5b6001816016015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806015015f8481526020019081526020015f205f81548092919061135b90613e29565b9190505550806017015f8381526020019081526020015f205f9054906101000a900460ff161580156113a557506113a4816015015f8581526020019081526020015f2054612d51565b5b15611441576001816017015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505f816024015f8581526020019081526020015f205490508082601f015f8581526020019081526020015f20819055507f95c123ae3e63573231605272667e1410a9e3c618227ff509e3c6a152c664b3a284848360405161143793929190613f5d565b60405180910390a1505b505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114c79190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461153657336040517f0e56cf3d00000000000000000000000000000000000000000000000000000000815260040161152d9190613da7565b60405180910390fd5b81815f611541612c99565b9050806025018383604051611557929190613de4565b90815260200160405180910390205f9054906101000a900460ff166115a8576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6115b1612c99565b9050806009015f8154809291906115c790613e29565b91905055505f816009015490505f825f0188886040516115e8929190613de4565b908152602001604051809103902054905080836023015f8481526020019081526020015f20819055507f596d111e7512a47ee0c5eb66eef6f22c45d8ad4fee0520340785a11e221ed5128282604051611642929190613e70565b60405180910390a15050505050505050565b5f8061165e612c99565b9050805f018484604051611673929190613de4565b90815260200160405180910390205491505092915050565b611693612de2565b61169c82612ec8565b6116a68282612fbb565b5050565b5f6116b36130d9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f806116e5612c99565b905080601c0183815481106116fd576116fc613f92565b5b905f5260205f200154915050919050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061178f9190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117fe57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016117f59190613da7565b60405180910390fd5b81815f611809612c99565b905080602501838360405161181f929190613de4565b90815260200160405180910390205f9054906101000a900460ff16611870576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611879612c99565b9050806014015f81548092919061188f90613e29565b91905055505f816014015490505f825f0188886040516118b0929190613de4565b908152602001604051809103902054905080836024015f8481526020019081526020015f20819055507f04f7b6ae222ef47289cfdc7c3b8298273e1bc92eeb346e805163ed4b37e76b29828260405161190a929190613e70565b60405180910390a15050505050505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016119699190613da7565b5f6040518083038186803b15801561197f575f80fd5b505afa158015611991573d5f803e3d5ffd5b505050505f61199e612c99565b9050806006015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611a3f5781336040517f181e6501000000000000000000000000000000000000000000000000000000008152600401611a36929190613f36565b60405180910390fd5b6001816006015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f8381526020019081526020015f205f815480929190611ac890613e29565b9190505550806008015f8381526020019081526020015f205f9054906101000a900460ff16158015611b125750611b11816007015f8481526020019081526020015f2054612d51565b5b15611bae576001816008015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505f816020015f8581526020019081526020015f205490508082601d015f8581526020019081526020015f20819055507fbc9d79366dad6b972d61e3f1567ee2f1e24c0ce10c72dcfb1452ee3b35c8d13e848483604051611ba493929190613f5d565b60405180910390a1505b505050565b5f80611bbd612c99565b905080601d015f8481526020019081526020015f2054915050919050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b8152600401611c289190613da7565b5f6040518083038186803b158015611c3e575f80fd5b505afa158015611c50573d5f803e3d5ffd5b505050505f611c5d612c99565b905080600c015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611cfe5781336040517f7aebd3bd000000000000000000000000000000000000000000000000000000008152600401611cf5929190613f36565b60405180910390fd5b600181600c015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555080600a015f8481526020019081526020015f205f815480929190611d8790613e29565b919050555080600b015f8381526020019081526020015f205f9054906101000a900460ff16158015611dd15750611dd081600a015f8581526020019081526020015f2054612d51565b5b15611e6657600181600b015f8481526020019081526020015f205f6101000a81548160ff021916908315150217905550806023015f8481526020019081526020015f2054816022015f8481526020019081526020015f20819055507f76863545735c29cf1c7ebb0028e734d1d738d2a5d099ba8b529c1793354ae3128383604051611e5d929190613fbf565b60405180910390a15b505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b8152600401611eb89190613da7565b5f6040518083038186803b158015611ece575f80fd5b505afa158015611ee0573d5f803e3d5ffd5b505050505f611eed612c99565b9050806010015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611f8e5781336040517f0ff55fe8000000000000000000000000000000000000000000000000000000008152600401611f85929190613f36565b60405180910390fd5b6001816010015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806011015f8381526020019081526020015f205f81548092919061201790613e29565b9190505550806012015f8381526020019081526020015f205f9054906101000a900460ff161580156120615750612060816011015f8481526020019081526020015f2054612d51565b5b1561214a576001816012015f8481526020019081526020015f205f6101000a81548160ff02191690831515021790555081816013015f83600e015f8781526020019081526020015f205481526020019081526020015f205f83600f015f8781526020019081526020015f205481526020019081526020015f20819055505f816022015f8581526020019081526020015f205490508082601e015f8581526020019081526020015f20819055507fc607d1695840ce0dc9d24a547edaec485e01e5939a540c2e4c23e360e224376784848360405161214093929190613f5d565b60405180910390a1505b505050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121d09190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461223f57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016122369190613da7565b60405180910390fd5b5f612248612c99565b9050806018015f8381526020019081526020015f205f9054906101000a900460ff16156122ac57816040517f23bd4fd30000000000000000000000000000000000000000000000000000000081526004016122a39190613bc3565b60405180910390fd5b806008015f8381526020019081526020015f205f9054906101000a900460ff1661230d57816040517fe3b346090000000000000000000000000000000000000000000000000000000081526004016123049190613bc3565b60405180910390fd5b5f81601b0154146123a657806012015f826013015f84601b015481526020019081526020015f205f8581526020019081526020015f205481526020019081526020015f205f9054906101000a900460ff166123a55780601b0154826040517fe854ac2800000000000000000000000000000000000000000000000000000000815260040161239c929190613fbf565b60405180910390fd5b5b6001816018015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055507fbddc1662cdaa871ae40d9edc0e435e0988c6095bfc7c452aedb16c89606b6b75826040516124009190613bc3565b60405180910390a15050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612469573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061248d9190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124fc57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016124f39190613da7565b60405180910390fd5b5f612505612c99565b905080602501848460405161251b929190613de4565b90815260200160405180910390205f9054906101000a900460ff161561257a5783836040517fbcdf9993000000000000000000000000000000000000000000000000000000008152600401612571929190613fe6565b60405180910390fd5b81815f01858560405161258e929190613de4565b90815260200160405180910390208190555060018160250185856040516125b6929190613de4565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507fe63dba14ba216c43efbd6e0206cd2172a4a64f894c8faf004691aa6f88fecada84848460405161260d93929190613ec3565b60405180910390a150505050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f8061265e612c99565b905080601b015491505090565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126c8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126ec9190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461275b57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016127529190613da7565b60405180910390fd5b5f612764612c99565b9050806005015f8381526020019081526020015f205f9054906101000a900460ff16156127c857816040517f5bf84e110000000000000000000000000000000000000000000000000000000081526004016127bf9190613bc3565b60405180910390fd5b806003015f8381526020019081526020015f205f9054906101000a900460ff1661282957816040517fbea1ca4c0000000000000000000000000000000000000000000000000000000081526004016128209190613bc3565b60405180910390fd5b6001816005015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055507f796482d60009a80331529afb48bf3415a16c9ff539a8cd138e77a745af6c7b7882826020015f8581526020019081526020015f2054604051612898929190613e70565b60405180910390a15050565b5f806128ae612c99565b905080601f015f8481526020019081526020015f2054915050919050565b5f806128d6612c99565b905080601e015f8481526020019081526020015f2054915050919050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016129419190613da7565b5f6040518083038186803b158015612957575f80fd5b505afa158015612969573d5f803e3d5ffd5b505050505f612976612c99565b9050806004015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612a175781336040517f4409282d000000000000000000000000000000000000000000000000000000008152600401612a0e929190613f36565b60405180910390fd5b6001816004015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806002015f8481526020019081526020015f205f815480929190612aa090613e29565b9190505550806003015f8381526020019081526020015f205f9054906101000a900460ff16158015612aea5750612ae9816002015f8581526020019081526020015f2054612d51565b5b15612b7f576001816003015f8481526020019081526020015f205f6101000a81548160ff021916908315150217905550806021015f8481526020019081526020015f2054816020015f8481526020019081526020015f20819055507f4187011e59171694872e08b3d3cdd3c901567aa0e38aaa6dbb4368837c1e8e348383604051612b76929190613fbf565b60405180910390a15b505050565b60605f6001612b9284613160565b0190505f8167ffffffffffffffff811115612bb057612baf613698565b5b6040519080825280601f01601f191660200182016040528015612be25781602001600182028036833780820191505090505b5090505f82602001820190505b600115612c43578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612c3857612c37614008565b5b0494505f8503612bef575b819350505050919050565b5f612c57612c72565b5f015f9054906101000a900467ffffffffffffffff16905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f7fa48b77331ab977c487fc73c0afbe86f1a3a130c068453f497d376ab9fac7e000905090565b5f8073a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16636799ef526040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d1f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d439190614049565b905080831015915050919050565b5f8073a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16632a3889986040518163ffffffff1660e01b8152600401602060405180830381865afa158015612db0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612dd49190614049565b905080831015915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480612e8f57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612e766132b1565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612ec6576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f25573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f499190613d6d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612fb857336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401612faf9190613da7565b60405180910390fd5b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561302357506040513d601f19601f820116820180604052508101906130209190614088565b60015b61306457816040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161305b9190613da7565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146130ca57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016130c19190613a49565b60405180910390fd5b6130d48383613304565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461315e576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106131bc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816131b2576131b1614008565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106131f9576d04ee2d6d415b85acef810000000083816131ef576131ee614008565b5b0492506020810190505b662386f26fc10000831061322857662386f26fc10000838161321e5761321d614008565b5b0492506010810190505b6305f5e1008310613251576305f5e100838161324757613246614008565b5b0492506008810190505b612710831061327657612710838161326c5761326b614008565b5b0492506004810190505b60648310613299576064838161328f5761328e614008565b5b0492506002810190505b600a83106132a8576001810190505b80915050919050565b5f6132dd7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613376565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61330d8261337f565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f81511115613369576133638282613448565b50613372565b6133716134c8565b5b5050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b036133da57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016133d19190613da7565b60405180910390fd5b806134067f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613376565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff168460405161347191906140f7565b5f60405180830381855af49150503d805f81146134a9576040519150601f19603f3d011682016040523d82523d5f602084013e6134ae565b606091505b50915091506134be858383613504565b9250505092915050565b5f341115613502576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6060826135195761351482613591565b613589565b5f825114801561353f57505f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561358157836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016135789190613da7565b60405180910390fd5b81905061358a565b5b9392505050565b5f815111156135a35780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561360c5780820151818401526020810190506135f1565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613631826135d5565b61363b81856135df565b935061364b8185602086016135ef565b61365481613617565b840191505092915050565b5f6020820190508181035f8301526136778184613627565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6136ce82613617565b810181811067ffffffffffffffff821117156136ed576136ec613698565b5b80604052505050565b5f6136ff61367f565b905061370b82826136c5565b919050565b5f67ffffffffffffffff82111561372a57613729613698565b5b61373382613617565b9050602081019050919050565b828183375f83830152505050565b5f61376061375b84613710565b6136f6565b90508281526020810184848401111561377c5761377b613694565b5b613787848285613740565b509392505050565b5f82601f8301126137a3576137a2613690565b5b81356137b384826020860161374e565b91505092915050565b5f819050919050565b6137ce816137bc565b81146137d8575f80fd5b50565b5f813590506137e9816137c5565b92915050565b5f806040838503121561380557613804613688565b5b5f83013567ffffffffffffffff8111156138225761382161368c565b5b61382e8582860161378f565b925050602061383f858286016137db565b9150509250929050565b5f80fd5b5f80fd5b5f8083601f84011261386657613865613690565b5b8235905067ffffffffffffffff81111561388357613882613849565b5b60208301915083600182028301111561389f5761389e61384d565b5b9250929050565b5f80602083850312156138bc576138bb613688565b5b5f83013567ffffffffffffffff8111156138d9576138d861368c565b5b6138e585828601613851565b92509250509250929050565b5f805f6040848603121561390857613907613688565b5b5f84013567ffffffffffffffff8111156139255761392461368c565b5b61393186828701613851565b93509350506020613944868287016137db565b9150509250925092565b5f819050919050565b6139608161394e565b811461396a575f80fd5b50565b5f8135905061397b81613957565b92915050565b5f805f6060848603121561399857613997613688565b5b5f6139a58682870161396d565b93505060206139b68682870161396d565b92505060406139c78682870161396d565b9150509250925092565b5f602082840312156139e6576139e5613688565b5b5f6139f38482850161396d565b91505092915050565b5f8060408385031215613a1257613a11613688565b5b5f613a1f8582860161396d565b9250506020613a308582860161396d565b9150509250929050565b613a43816137bc565b82525050565b5f602082019050613a5c5f830184613a3a565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f613a8b82613a62565b9050919050565b613a9b81613a81565b8114613aa5575f80fd5b50565b5f81359050613ab681613a92565b92915050565b5f67ffffffffffffffff821115613ad657613ad5613698565b5b613adf82613617565b9050602081019050919050565b5f613afe613af984613abc565b6136f6565b905082815260208101848484011115613b1a57613b19613694565b5b613b25848285613740565b509392505050565b5f82601f830112613b4157613b40613690565b5b8135613b51848260208601613aec565b91505092915050565b5f8060408385031215613b7057613b6f613688565b5b5f613b7d85828601613aa8565b925050602083013567ffffffffffffffff811115613b9e57613b9d61368c565b5b613baa85828601613b2d565b9150509250929050565b613bbd8161394e565b82525050565b5f602082019050613bd65f830184613bb4565b92915050565b5f81905092915050565b5f613bf0826135d5565b613bfa8185613bdc565b9350613c0a8185602086016135ef565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f613c4a600283613bdc565b9150613c5582613c16565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f613c94600183613bdc565b9150613c9f82613c60565b600182019050919050565b5f613cb58287613be6565b9150613cc082613c3e565b9150613ccc8286613be6565b9150613cd782613c88565b9150613ce38285613be6565b9150613cee82613c88565b9150613cfa8284613be6565b915081905095945050505050565b5f613d138284613be6565b915081905092915050565b5f67ffffffffffffffff82169050919050565b613d3a81613d1e565b82525050565b5f602082019050613d535f830184613d31565b92915050565b5f81519050613d6781613a92565b92915050565b5f60208284031215613d8257613d81613688565b5b5f613d8f84828501613d59565b91505092915050565b613da181613a81565b82525050565b5f602082019050613dba5f830184613d98565b92915050565b5f613dcb8385613bdc565b9350613dd8838584613740565b82840190509392505050565b5f613df0828486613dc0565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613e338261394e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e6557613e64613dfc565b5b600182019050919050565b5f604082019050613e835f830185613bb4565b613e906020830184613a3a565b9392505050565b5f613ea283856135df565b9350613eaf838584613740565b613eb883613617565b840190509392505050565b5f6040820190508181035f830152613edc818587613e97565b9050613eeb6020830184613a3a565b949350505050565b5f608082019050613f065f830187613bb4565b613f136020830186613bb4565b613f206040830185613bb4565b613f2d6060830184613a3a565b95945050505050565b5f604082019050613f495f830185613bb4565b613f566020830184613d98565b9392505050565b5f606082019050613f705f830186613bb4565b613f7d6020830185613bb4565b613f8a6040830184613a3a565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f604082019050613fd25f830185613bb4565b613fdf6020830184613bb4565b9392505050565b5f6020820190508181035f830152613fff818486613e97565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f8151905061404381613957565b92915050565b5f6020828403121561405e5761405d613688565b5b5f61406b84828501614035565b91505092915050565b5f81519050614082816137c5565b92915050565b5f6020828403121561409d5761409c613688565b5b5f6140aa84828501614074565b91505092915050565b5f81519050919050565b5f81905092915050565b5f6140d1826140b3565b6140db81856140bd565b93506140eb8185602086016135ef565b80840191505092915050565b5f61410282846140c7565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01eW_5`\xE0\x1C\x80ce2t_\x11a\0\xD0W\x80c\xA7\xABD@\x11a\0\x89W\x80c\xE0\xE5_\xD7\x11a\0cW\x80c\xE0\xE5_\xD7\x14a\x04\xE9W\x80c\xEE\xD0\x1E}\x14a\x05\x11W\x80c\xF1$L]\x14a\x05MW\x80c\xFA\xACs\xB4\x14a\x05\x89Wa\x01eV[\x80c\xA7\xABD@\x14a\x04mW\x80c\xAD<\xB1\xCC\x14a\x04\x95W\x80c\xD8\x90\x9E\xAB\x14a\x04\xBFWa\x01eV[\x80ce2t_\x14a\x03iW\x80cj\xAF\xA9v\x14a\x03\x91W\x80c\x8A\xF7\x7F\x03\x14a\x03\xB9W\x80c\x94\x1C\x8D\xF6\x14a\x03\xF5W\x80c\x95\x94\xA9\x01\x14a\x04\x1DW\x80c\x9E\x16\x7Fv\x14a\x04EWa\x01eV[\x80c@\xC2O\x15\x11a\x01\"W\x80c@\xC2O\x15\x14a\x02[W\x80cB\x8Ev\xD8\x14a\x02\x83W\x80cE\xE3\xB1\x93\x14a\x02\xABW\x80cO\x1E\xF2\x86\x14a\x02\xE7W\x80cR\xD1\x90-\x14a\x03\x03W\x80cb,\x07\x8F\x14a\x03-Wa\x01eV[\x80c\r\x8En,\x14a\x01iW\x80c\x1F\xBF\xE6n\x14a\x01\x93W\x80c&s\x9E|\x14a\x01\xBBW\x80c)4y\xB1\x14a\x01\xE3W\x80c9L{\xD6\x14a\x02\x0BW\x80c;A\xA6\xDD\x14a\x023W[_\x80\xFD[4\x80\x15a\x01tW_\x80\xFD[Pa\x01}a\x05\xB1V[`@Qa\x01\x8A\x91\x90a6_V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x9EW_\x80\xFD[Pa\x01\xB9`\x04\x806\x03\x81\x01\x90a\x01\xB4\x91\x90a7\xEFV[a\x06,V[\0[4\x80\x15a\x01\xC6W_\x80\xFD[Pa\x01\xE1`\x04\x806\x03\x81\x01\x90a\x01\xDC\x91\x90a8\xA6V[a\x08\x06V[\0[4\x80\x15a\x01\xEEW_\x80\xFD[Pa\x02\t`\x04\x806\x03\x81\x01\x90a\x02\x04\x91\x90a8\xF1V[a\n\x14V[\0[4\x80\x15a\x02\x16W_\x80\xFD[Pa\x021`\x04\x806\x03\x81\x01\x90a\x02,\x91\x90a9\x81V[a\x0B\xEBV[\0[4\x80\x15a\x02>W_\x80\xFD[Pa\x02Y`\x04\x806\x03\x81\x01\x90a\x02T\x91\x90a9\xD1V[a\x0F`V[\0[4\x80\x15a\x02fW_\x80\xFD[Pa\x02\x81`\x04\x806\x03\x81\x01\x90a\x02|\x91\x90a9\xFCV[a\x11\xAFV[\0[4\x80\x15a\x02\x8EW_\x80\xFD[Pa\x02\xA9`\x04\x806\x03\x81\x01\x90a\x02\xA4\x91\x90a8\xA6V[a\x14FV[\0[4\x80\x15a\x02\xB6W_\x80\xFD[Pa\x02\xD1`\x04\x806\x03\x81\x01\x90a\x02\xCC\x91\x90a8\xA6V[a\x16TV[`@Qa\x02\xDE\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[a\x03\x01`\x04\x806\x03\x81\x01\x90a\x02\xFC\x91\x90a;ZV[a\x16\x8BV[\0[4\x80\x15a\x03\x0EW_\x80\xFD[Pa\x03\x17a\x16\xAAV[`@Qa\x03$\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x038W_\x80\xFD[Pa\x03S`\x04\x806\x03\x81\x01\x90a\x03N\x91\x90a9\xD1V[a\x16\xDBV[`@Qa\x03`\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03tW_\x80\xFD[Pa\x03\x8F`\x04\x806\x03\x81\x01\x90a\x03\x8A\x91\x90a8\xA6V[a\x17\x0EV[\0[4\x80\x15a\x03\x9CW_\x80\xFD[Pa\x03\xB7`\x04\x806\x03\x81\x01\x90a\x03\xB2\x91\x90a9\xFCV[a\x19\x1CV[\0[4\x80\x15a\x03\xC4W_\x80\xFD[Pa\x03\xDF`\x04\x806\x03\x81\x01\x90a\x03\xDA\x91\x90a9\xD1V[a\x1B\xB3V[`@Qa\x03\xEC\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\0W_\x80\xFD[Pa\x04\x1B`\x04\x806\x03\x81\x01\x90a\x04\x16\x91\x90a9\xFCV[a\x1B\xDBV[\0[4\x80\x15a\x04(W_\x80\xFD[Pa\x04C`\x04\x806\x03\x81\x01\x90a\x04>\x91\x90a9\xFCV[a\x1EkV[\0[4\x80\x15a\x04PW_\x80\xFD[Pa\x04k`\x04\x806\x03\x81\x01\x90a\x04f\x91\x90a9\xD1V[a!OV[\0[4\x80\x15a\x04xW_\x80\xFD[Pa\x04\x93`\x04\x806\x03\x81\x01\x90a\x04\x8E\x91\x90a8\xF1V[a$\x0CV[\0[4\x80\x15a\x04\xA0W_\x80\xFD[Pa\x04\xA9a&\x1BV[`@Qa\x04\xB6\x91\x90a6_V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xCAW_\x80\xFD[Pa\x04\xD3a&TV[`@Qa\x04\xE0\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xF4W_\x80\xFD[Pa\x05\x0F`\x04\x806\x03\x81\x01\x90a\x05\n\x91\x90a9\xD1V[a&kV[\0[4\x80\x15a\x05\x1CW_\x80\xFD[Pa\x057`\x04\x806\x03\x81\x01\x90a\x052\x91\x90a9\xD1V[a(\xA4V[`@Qa\x05D\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05XW_\x80\xFD[Pa\x05s`\x04\x806\x03\x81\x01\x90a\x05n\x91\x90a9\xD1V[a(\xCCV[`@Qa\x05\x80\x91\x90a:IV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\x94W_\x80\xFD[Pa\x05\xAF`\x04\x806\x03\x81\x01\x90a\x05\xAA\x91\x90a9\xFCV[a(\xF4V[\0[```@Q\x80`@\x01`@R\x80`\r\x81R` \x01\x7FKmsManagement\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x05\xF2_a+\x84V[a\x05\xFC`\x01a+\x84V[a\x06\x05_a+\x84V[`@Q` \x01a\x06\x18\x94\x93\x92\x91\x90a<\xAAV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[`\x01a\x066a,NV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x06wW`@Q\x7FoOs\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_a\x06\x82a,rV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\x06\xCAWP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\x07\x01W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_a\x07Oa,\x99V[\x90P\x83\x81_\x01\x86`@Qa\x07c\x91\x90a=\x08V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP`\x01\x81`%\x01\x86`@Qa\x07\x89\x91\x90a=\x08V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x07\xF8\x91\x90a=@V[`@Q\x80\x91\x03\x90\xA1PPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08cW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x87\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x08\xF6W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\xED\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x81\x81_a\t\x01a,\x99V[\x90P\x80`%\x01\x83\x83`@Qa\t\x17\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\thW`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\tqa,\x99V[\x90P\x80`\x01\x01_\x81T\x80\x92\x91\x90a\t\x87\x90a>)V[\x91\x90PUP_\x81`\x01\x01T\x90P_\x82_\x01\x88\x88`@Qa\t\xA8\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`!\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x85\x113z\xD8\x9C \xEF\x90O\x13\xE9\xB9\xE7\xEB\x05\xF4\xC0\xFF\xF1(\xA8v\x0C,\x1DCl\x11\x1B0\x9F\x82\x82`@Qa\n\x02\x92\x91\x90a>pV[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\nqW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\x95\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0B\x04W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\xFB\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x82\x82_a\x0B\x0Fa,\x99V[\x90P\x80`%\x01\x83\x83`@Qa\x0B%\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0BvW`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x0B\x7Fa,\x99V[\x90P\x84\x81_\x01\x88\x88`@Qa\x0B\x95\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP\x7F\xF0\xBB\x05\xED\x11\xB1\x1E\x9A\x83\xDB\x1F\xDF\xDB6L\xE1W\x9B\x1B\xB3M@\x80\xB6p\xB5yF\x92\x07\x9E=\x87\x87\x87`@Qa\x0B\xDA\x93\x92\x91\x90a>\xC3V[`@Q\x80\x91\x03\x90\xA1PPPPPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0CHW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0Cl\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0C\xDBW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0C\xD2\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[_a\x0C\xE4a,\x99V[\x90P\x80`\r\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\rHW\x83`@Q\x7FI\xCB\xBF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\r?\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x0B\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\r\xA9W\x83`@Q\x7F\xBEH\xE7\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\r\xA0\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x81\x83\x03a\r\xEDW\x82`@Q\x7F\xD6\xF4\xA6\x87\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\r\xE4\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0ENW\x82`@Q\x7F\x05\xFCaa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0EE\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0E\xAFW\x81`@Q\x7F(\0\"\x9D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0E\xA6\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x82\x81`\x0E\x01_\x86\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x81\x81`\x0F\x01_\x86\x81R` \x01\x90\x81R` \x01_ \x81\x90UP`\x01\x81`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xFDhW@>\xAD\xBD\xC0\xC8\xB6\x8B\x15\x1B\xB4j1\xD6\xC3R\xAFy\xB0e\xD4r\xCB\xD7w\x81QM\xD4\x84\x84\x84\x84`\"\x01_\x89\x81R` \x01\x90\x81R` \x01_ T`@Qa\x0FR\x94\x93\x92\x91\x90a>\xF3V[`@Q\x80\x91\x03\x90\xA1PPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCBf\x17U3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0F\xAD\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x0F\xC3W_\x80\xFD[PZ\xFA\x15\x80\x15a\x0F\xD5W=_\x80>=_\xFD[PPPP_a\x0F\xE2a,\x99V[\x90P\x80`\x19\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x10\x83W\x813`@Q\x7FH\x813\xE7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x10z\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x19\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x1A\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x11\x0C\x90a>)V[\x91\x90PUP\x81\x81`\x1B\x01T\x14\x15\x80\x15a\x11=WPa\x11<\x81`\x1A\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta,\xC0V[[\x15a\x11\xABW\x80`\x1C\x01\x82\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91PU\x81\x81`\x1B\x01\x81\x90UP\x7Fpf\x963y\xF0d\x8Adu\x86\r\xE4Dz\xEC\x0B\x04\xC0=\xB5\xBC\x16\x9B@\x1C\x88\xD1o\xF6W\x8D\x82`@Qa\x11\xA2\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xA1[PPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11\xFC\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x12\x12W_\x80\xFD[PZ\xFA\x15\x80\x15a\x12$W=_\x80>=_\xFD[PPPP_a\x121a,\x99V[\x90P\x80`\x16\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x12\xD2W\x813`@Q\x7F\xF8\x9Dv\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x12\xC9\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x16\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x15\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x13[\x90a>)V[\x91\x90PUP\x80`\x17\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x13\xA5WPa\x13\xA4\x81`\x15\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a\x14AW`\x01\x81`\x17\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_\x81`$\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1F\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x95\xC1#\xAE>cW21`Rrf~\x14\x10\xA9\xE3\xC6\x18\"\x7F\xF5\t\xE3\xC6\xA1R\xC6d\xB3\xA2\x84\x84\x83`@Qa\x147\x93\x92\x91\x90a?]V[`@Q\x80\x91\x03\x90\xA1P[PPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14\xA3W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x14\xC7\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x156W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x15-\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x81\x81_a\x15Aa,\x99V[\x90P\x80`%\x01\x83\x83`@Qa\x15W\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x15\xA8W`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x15\xB1a,\x99V[\x90P\x80`\t\x01_\x81T\x80\x92\x91\x90a\x15\xC7\x90a>)V[\x91\x90PUP_\x81`\t\x01T\x90P_\x82_\x01\x88\x88`@Qa\x15\xE8\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`#\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7FYm\x11\x1Eu\x12\xA4~\xE0\xC5\xEBf\xEE\xF6\xF2,E\xD8\xADO\xEE\x05 4\x07\x85\xA1\x1E\"\x1E\xD5\x12\x82\x82`@Qa\x16B\x92\x91\x90a>pV[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[_\x80a\x16^a,\x99V[\x90P\x80_\x01\x84\x84`@Qa\x16s\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x91PP\x92\x91PPV[a\x16\x93a-\xE2V[a\x16\x9C\x82a.\xC8V[a\x16\xA6\x82\x82a/\xBBV[PPV[_a\x16\xB3a0\xD9V[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[_\x80a\x16\xE5a,\x99V[\x90P\x80`\x1C\x01\x83\x81T\x81\x10a\x16\xFDWa\x16\xFCa?\x92V[[\x90_R` _ \x01T\x91PP\x91\x90PV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x17kW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x17\x8F\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x17\xFEW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17\xF5\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x81\x81_a\x18\ta,\x99V[\x90P\x80`%\x01\x83\x83`@Qa\x18\x1F\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x18pW`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x18ya,\x99V[\x90P\x80`\x14\x01_\x81T\x80\x92\x91\x90a\x18\x8F\x90a>)V[\x91\x90PUP_\x81`\x14\x01T\x90P_\x82_\x01\x88\x88`@Qa\x18\xB0\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`$\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x04\xF7\xB6\xAE\".\xF4r\x89\xCF\xDC|;\x82\x98'>\x1B\xC9.\xEB4n\x80Qc\xEDK7\xE7k)\x82\x82`@Qa\x19\n\x92\x91\x90a>pV[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x19i\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x19\x7FW_\x80\xFD[PZ\xFA\x15\x80\x15a\x19\x91W=_\x80>=_\xFD[PPPP_a\x19\x9Ea,\x99V[\x90P\x80`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1A?W\x813`@Q\x7F\x18\x1Ee\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1A6\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x07\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x1A\xC8\x90a>)V[\x91\x90PUP\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x1B\x12WPa\x1B\x11\x81`\x07\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a\x1B\xAEW`\x01\x81`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_\x81` \x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1D\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\xBC\x9Dy6m\xADk\x97-a\xE3\xF1V~\xE2\xF1\xE2L\x0C\xE1\x0Cr\xDC\xFB\x14R\xEE;5\xC8\xD1>\x84\x84\x83`@Qa\x1B\xA4\x93\x92\x91\x90a?]V[`@Q\x80\x91\x03\x90\xA1P[PPPV[_\x80a\x1B\xBDa,\x99V[\x90P\x80`\x1D\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x1C(\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1C>W_\x80\xFD[PZ\xFA\x15\x80\x15a\x1CPW=_\x80>=_\xFD[PPPP_a\x1C]a,\x99V[\x90P\x80`\x0C\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1C\xFEW\x813`@Q\x7Fz\xEB\xD3\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1C\xF5\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x0C\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x1D\x87\x90a>)V[\x91\x90PUP\x80`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x1D\xD1WPa\x1D\xD0\x81`\n\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a\x1EfW`\x01\x81`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`#\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x81`\"\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7Fv\x865Es\\)\xCF\x1C~\xBB\0(\xE74\xD1\xD78\xD2\xA5\xD0\x99\xBA\x8BR\x9C\x17\x935J\xE3\x12\x83\x83`@Qa\x1E]\x92\x91\x90a?\xBFV[`@Q\x80\x91\x03\x90\xA1[PPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x1E\xB8\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1E\xCEW_\x80\xFD[PZ\xFA\x15\x80\x15a\x1E\xE0W=_\x80>=_\xFD[PPPP_a\x1E\xEDa,\x99V[\x90P\x80`\x10\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1F\x8EW\x813`@Q\x7F\x0F\xF5_\xE8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1F\x85\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x10\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x11\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a \x17\x90a>)V[\x91\x90PUP\x80`\x12\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a aWPa `\x81`\x11\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a!JW`\x01\x81`\x12\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x81\x81`\x13\x01_\x83`\x0E\x01_\x87\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ _\x83`\x0F\x01_\x87\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ \x81\x90UP_\x81`\"\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1E\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\xC6\x07\xD1iX@\xCE\r\xC9\xD2JT~\xDA\xECH^\x01\xE5\x93\x9AT\x0C.L#\xE3`\xE2$7g\x84\x84\x83`@Qa!@\x93\x92\x91\x90a?]V[`@Q\x80\x91\x03\x90\xA1P[PPPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a!\xACW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a!\xD0\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\"?W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"6\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[_a\"Ha,\x99V[\x90P\x80`\x18\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\"\xACW\x81`@Q\x7F#\xBDO\xD3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\xA3\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a#\rW\x81`@Q\x7F\xE3\xB3F\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a#\x04\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[_\x81`\x1B\x01T\x14a#\xA6W\x80`\x12\x01_\x82`\x13\x01_\x84`\x1B\x01T\x81R` \x01\x90\x81R` \x01_ _\x85\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a#\xA5W\x80`\x1B\x01T\x82`@Q\x7F\xE8T\xAC(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a#\x9C\x92\x91\x90a?\xBFV[`@Q\x80\x91\x03\x90\xFD[[`\x01\x81`\x18\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xBD\xDC\x16b\xCD\xAA\x87\x1A\xE4\r\x9E\xDC\x0EC^\t\x88\xC6\t[\xFC|E*\xED\xB1l\x89`kku\x82`@Qa$\0\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xA1PPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a$iW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a$\x8D\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a$\xFCW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a$\xF3\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[_a%\x05a,\x99V[\x90P\x80`%\x01\x84\x84`@Qa%\x1B\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a%zW\x83\x83`@Q\x7F\xBC\xDF\x99\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%q\x92\x91\x90a?\xE6V[`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01\x85\x85`@Qa%\x8E\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP`\x01\x81`%\x01\x85\x85`@Qa%\xB6\x92\x91\x90a=\xE4V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xE6=\xBA\x14\xBA!lC\xEF\xBDn\x02\x06\xCD!r\xA4\xA6O\x89L\x8F\xAF\0F\x91\xAAo\x88\xFE\xCA\xDA\x84\x84\x84`@Qa&\r\x93\x92\x91\x90a>\xC3V[`@Q\x80\x91\x03\x90\xA1PPPPV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[_\x80a&^a,\x99V[\x90P\x80`\x1B\x01T\x91PP\x90V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a&\xC8W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a&\xEC\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a'[W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a'R\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[_a'da,\x99V[\x90P\x80`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a'\xC8W\x81`@Q\x7F[\xF8N\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a'\xBF\x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[\x80`\x03\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a()W\x81`@Q\x7F\xBE\xA1\xCAL\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a( \x91\x90a;\xC3V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7Fyd\x82\xD6\0\t\xA8\x031R\x9A\xFBH\xBF4\x15\xA1l\x9F\xF59\xA8\xCD\x13\x8Ew\xA7E\xAFl{x\x82\x82` \x01_\x85\x81R` \x01\x90\x81R` \x01_ T`@Qa(\x98\x92\x91\x90a>pV[`@Q\x80\x91\x03\x90\xA1PPV[_\x80a(\xAEa,\x99V[\x90P\x80`\x1F\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[_\x80a(\xD6a,\x99V[\x90P\x80`\x1E\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a)A\x91\x90a=\xA7V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a)WW_\x80\xFD[PZ\xFA\x15\x80\x15a)iW=_\x80>=_\xFD[PPPP_a)va,\x99V[\x90P\x80`\x04\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a*\x17W\x813`@Q\x7FD\t(-\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a*\x0E\x92\x91\x90a?6V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x04\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x02\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a*\xA0\x90a>)V[\x91\x90PUP\x80`\x03\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a*\xEAWPa*\xE9\x81`\x02\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta-QV[[\x15a+\x7FW`\x01\x81`\x03\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`!\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x81` \x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7FA\x87\x01\x1EY\x17\x16\x94\x87.\x08\xB3\xD3\xCD\xD3\xC9\x01Vz\xA0\xE3\x8A\xAAm\xBBCh\x83|\x1E\x8E4\x83\x83`@Qa+v\x92\x91\x90a?\xBFV[`@Q\x80\x91\x03\x90\xA1[PPPV[``_`\x01a+\x92\x84a1`V[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a+\xB0Wa+\xAFa6\x98V[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a+\xE2W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a,CW\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a,8Wa,7a@\x08V[[\x04\x94P_\x85\x03a+\xEFW[\x81\x93PPPP\x91\x90PV[_a,Wa,rV[_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[_\x7F\xA4\x8Bw3\x1A\xB9w\xC4\x87\xFCs\xC0\xAF\xBE\x86\xF1\xA3\xA10\xC0hE?I}7j\xB9\xFA\xC7\xE0\0\x90P\x90V[_\x80s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cg\x99\xEFR`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a-\x1FW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a-C\x91\x90a@IV[\x90P\x80\x83\x10\x15\x91PP\x91\x90PV[_\x80s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c*8\x89\x98`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a-\xB0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a-\xD4\x91\x90a@IV[\x90P\x80\x83\x10\x15\x91PP\x91\x90PV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a.\x8FWP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a.va2\xB1V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a.\xC6W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a/%W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a/I\x91\x90a=mV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a/\xB8W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/\xAF\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a0#WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a0 \x91\x90a@\x88V[`\x01[a0dW\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0[\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a0\xCAW\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0\xC1\x91\x90a:IV[`@Q\x80\x91\x03\x90\xFD[a0\xD4\x83\x83a3\x04V[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a1^W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_\x80_\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a1\xBCWz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a1\xB2Wa1\xB1a@\x08V[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a1\xF9Wm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a1\xEFWa1\xEEa@\x08V[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a2(Wf#\x86\xF2o\xC1\0\0\x83\x81a2\x1EWa2\x1Da@\x08V[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a2QWc\x05\xF5\xE1\0\x83\x81a2GWa2Fa@\x08V[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a2vWa'\x10\x83\x81a2lWa2ka@\x08V[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a2\x99W`d\x83\x81a2\x8FWa2\x8Ea@\x08V[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a2\xA8W`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[_a2\xDD\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba3vV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a3\r\x82a3\x7FV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a3iWa3c\x82\x82a4HV[Pa3rV[a3qa4\xC8V[[PPV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a3\xDAW\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a3\xD1\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x80a4\x06\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba3vV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa4q\x91\x90a@\xF7V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a4\xA9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a4\xAEV[``\x91P[P\x91P\x91Pa4\xBE\x85\x83\x83a5\x04V[\x92PPP\x92\x91PPV[_4\x11\x15a5\x02W`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[``\x82a5\x19Wa5\x14\x82a5\x91V[a5\x89V[_\x82Q\x14\x80\x15a5?WP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a5\x81W\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a5x\x91\x90a=\xA7V[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa5\x8AV[[\x93\x92PPPV[_\x81Q\x11\x15a5\xA3W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a6\x0CW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa5\xF1V[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a61\x82a5\xD5V[a6;\x81\x85a5\xDFV[\x93Pa6K\x81\x85` \x86\x01a5\xEFV[a6T\x81a6\x17V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra6w\x81\x84a6'V[\x90P\x92\x91PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a6\xCE\x82a6\x17V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a6\xEDWa6\xECa6\x98V[[\x80`@RPPPV[_a6\xFFa6\x7FV[\x90Pa7\x0B\x82\x82a6\xC5V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a7*Wa7)a6\x98V[[a73\x82a6\x17V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a7`a7[\x84a7\x10V[a6\xF6V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a7|Wa7{a6\x94V[[a7\x87\x84\x82\x85a7@V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a7\xA3Wa7\xA2a6\x90V[[\x815a7\xB3\x84\x82` \x86\x01a7NV[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a7\xCE\x81a7\xBCV[\x81\x14a7\xD8W_\x80\xFD[PV[_\x815\x90Pa7\xE9\x81a7\xC5V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a8\x05Wa8\x04a6\x88V[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8\"Wa8!a6\x8CV[[a8.\x85\x82\x86\x01a7\x8FV[\x92PP` a8?\x85\x82\x86\x01a7\xDBV[\x91PP\x92P\x92\x90PV[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a8fWa8ea6\x90V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8\x83Wa8\x82a8IV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a8\x9FWa8\x9Ea8MV[[\x92P\x92\x90PV[_\x80` \x83\x85\x03\x12\x15a8\xBCWa8\xBBa6\x88V[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8\xD9Wa8\xD8a6\x8CV[[a8\xE5\x85\x82\x86\x01a8QV[\x92P\x92PP\x92P\x92\x90PV[_\x80_`@\x84\x86\x03\x12\x15a9\x08Wa9\x07a6\x88V[[_\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9%Wa9$a6\x8CV[[a91\x86\x82\x87\x01a8QV[\x93P\x93PP` a9D\x86\x82\x87\x01a7\xDBV[\x91PP\x92P\x92P\x92V[_\x81\x90P\x91\x90PV[a9`\x81a9NV[\x81\x14a9jW_\x80\xFD[PV[_\x815\x90Pa9{\x81a9WV[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a9\x98Wa9\x97a6\x88V[[_a9\xA5\x86\x82\x87\x01a9mV[\x93PP` a9\xB6\x86\x82\x87\x01a9mV[\x92PP`@a9\xC7\x86\x82\x87\x01a9mV[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a9\xE6Wa9\xE5a6\x88V[[_a9\xF3\x84\x82\x85\x01a9mV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a:\x12Wa:\x11a6\x88V[[_a:\x1F\x85\x82\x86\x01a9mV[\x92PP` a:0\x85\x82\x86\x01a9mV[\x91PP\x92P\x92\x90PV[a:C\x81a7\xBCV[\x82RPPV[_` \x82\x01\x90Pa:\\_\x83\x01\x84a::V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a:\x8B\x82a:bV[\x90P\x91\x90PV[a:\x9B\x81a:\x81V[\x81\x14a:\xA5W_\x80\xFD[PV[_\x815\x90Pa:\xB6\x81a:\x92V[\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a:\xD6Wa:\xD5a6\x98V[[a:\xDF\x82a6\x17V[\x90P` \x81\x01\x90P\x91\x90PV[_a:\xFEa:\xF9\x84a:\xBCV[a6\xF6V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a;\x1AWa;\x19a6\x94V[[a;%\x84\x82\x85a7@V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a;AWa;@a6\x90V[[\x815a;Q\x84\x82` \x86\x01a:\xECV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a;pWa;oa6\x88V[[_a;}\x85\x82\x86\x01a:\xA8V[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a;\x9EWa;\x9Da6\x8CV[[a;\xAA\x85\x82\x86\x01a;-V[\x91PP\x92P\x92\x90PV[a;\xBD\x81a9NV[\x82RPPV[_` \x82\x01\x90Pa;\xD6_\x83\x01\x84a;\xB4V[\x92\x91PPV[_\x81\x90P\x92\x91PPV[_a;\xF0\x82a5\xD5V[a;\xFA\x81\x85a;\xDCV[\x93Pa<\n\x81\x85` \x86\x01a5\xEFV[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a<J`\x02\x83a;\xDCV[\x91Pa<U\x82a<\x16V[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a<\x94`\x01\x83a;\xDCV[\x91Pa<\x9F\x82a<`V[`\x01\x82\x01\x90P\x91\x90PV[_a<\xB5\x82\x87a;\xE6V[\x91Pa<\xC0\x82a<>V[\x91Pa<\xCC\x82\x86a;\xE6V[\x91Pa<\xD7\x82a<\x88V[\x91Pa<\xE3\x82\x85a;\xE6V[\x91Pa<\xEE\x82a<\x88V[\x91Pa<\xFA\x82\x84a;\xE6V[\x91P\x81\x90P\x95\x94PPPPPV[_a=\x13\x82\x84a;\xE6V[\x91P\x81\x90P\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a=:\x81a=\x1EV[\x82RPPV[_` \x82\x01\x90Pa=S_\x83\x01\x84a=1V[\x92\x91PPV[_\x81Q\x90Pa=g\x81a:\x92V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a=\x82Wa=\x81a6\x88V[[_a=\x8F\x84\x82\x85\x01a=YV[\x91PP\x92\x91PPV[a=\xA1\x81a:\x81V[\x82RPPV[_` \x82\x01\x90Pa=\xBA_\x83\x01\x84a=\x98V[\x92\x91PPV[_a=\xCB\x83\x85a;\xDCV[\x93Pa=\xD8\x83\x85\x84a7@V[\x82\x84\x01\x90P\x93\x92PPPV[_a=\xF0\x82\x84\x86a=\xC0V[\x91P\x81\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a>3\x82a9NV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a>eWa>da=\xFCV[[`\x01\x82\x01\x90P\x91\x90PV[_`@\x82\x01\x90Pa>\x83_\x83\x01\x85a;\xB4V[a>\x90` \x83\x01\x84a::V[\x93\x92PPPV[_a>\xA2\x83\x85a5\xDFV[\x93Pa>\xAF\x83\x85\x84a7@V[a>\xB8\x83a6\x17V[\x84\x01\x90P\x93\x92PPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01Ra>\xDC\x81\x85\x87a>\x97V[\x90Pa>\xEB` \x83\x01\x84a::V[\x94\x93PPPPV[_`\x80\x82\x01\x90Pa?\x06_\x83\x01\x87a;\xB4V[a?\x13` \x83\x01\x86a;\xB4V[a? `@\x83\x01\x85a;\xB4V[a?-``\x83\x01\x84a::V[\x95\x94PPPPPV[_`@\x82\x01\x90Pa?I_\x83\x01\x85a;\xB4V[a?V` \x83\x01\x84a=\x98V[\x93\x92PPPV[_``\x82\x01\x90Pa?p_\x83\x01\x86a;\xB4V[a?}` \x83\x01\x85a;\xB4V[a?\x8A`@\x83\x01\x84a::V[\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_`@\x82\x01\x90Pa?\xD2_\x83\x01\x85a;\xB4V[a?\xDF` \x83\x01\x84a;\xB4V[\x93\x92PPPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra?\xFF\x81\x84\x86a>\x97V[\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x81Q\x90Pa@C\x81a9WV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a@^Wa@]a6\x88V[[_a@k\x84\x82\x85\x01a@5V[\x91PP\x92\x91PPV[_\x81Q\x90Pa@\x82\x81a7\xC5V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a@\x9DWa@\x9Ca6\x88V[[_a@\xAA\x84\x82\x85\x01a@tV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a@\xD1\x82a@\xB3V[a@\xDB\x81\x85a@\xBDV[\x93Pa@\xEB\x81\x85` \x86\x01a5\xEFV[\x80\x84\x01\x91PP\x92\x91PPV[_aA\x02\x82\x84a@\xC7V[\x91P\x81\x90P\x92\x91PPV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ActivateKeyCoprocessorAlreadyResponded(uint256,address)` and selector `0x488133e7`.
```solidity
error ActivateKeyCoprocessorAlreadyResponded(uint256 keyId, address coprocessorTxSender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActivateKeyCoprocessorAlreadyResponded {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActivateKeyCoprocessorAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: ActivateKeyCoprocessorAlreadyResponded) -> Self {
                (value.keyId, value.coprocessorTxSender)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ActivateKeyCoprocessorAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    keyId: tuple.0,
                    coprocessorTxSender: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActivateKeyCoprocessorAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActivateKeyCoprocessorAlreadyResponded(uint256,address)";
            const SELECTOR: [u8; 4] = [72u8, 129u8, 51u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ActivateKeyRequestAlreadySent(uint256)` and selector `0x23bd4fd3`.
```solidity
error ActivateKeyRequestAlreadySent(uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActivateKeyRequestAlreadySent {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActivateKeyRequestAlreadySent>
        for UnderlyingRustTuple<'_> {
            fn from(value: ActivateKeyRequestAlreadySent) -> Self {
                (value.keyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ActivateKeyRequestAlreadySent {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { keyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActivateKeyRequestAlreadySent {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActivateKeyRequestAlreadySent(uint256)";
            const SELECTOR: [u8; 4] = [35u8, 189u8, 79u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ActivateKeyRequiresKeygen(uint256)` and selector `0xe3b34609`.
```solidity
error ActivateKeyRequiresKeygen(uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActivateKeyRequiresKeygen {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActivateKeyRequiresKeygen>
        for UnderlyingRustTuple<'_> {
            fn from(value: ActivateKeyRequiresKeygen) -> Self {
                (value.keyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ActivateKeyRequiresKeygen {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { keyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActivateKeyRequiresKeygen {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActivateKeyRequiresKeygen(uint256)";
            const SELECTOR: [u8; 4] = [227u8, 179u8, 70u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ActivateKeyRequiresKskgen(uint256,uint256)` and selector `0xe854ac28`.
```solidity
error ActivateKeyRequiresKskgen(uint256 currentKeyId, uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActivateKeyRequiresKskgen {
        #[allow(missing_docs)]
        pub currentKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActivateKeyRequiresKskgen>
        for UnderlyingRustTuple<'_> {
            fn from(value: ActivateKeyRequiresKskgen) -> Self {
                (value.currentKeyId, value.keyId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ActivateKeyRequiresKskgen {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    currentKeyId: tuple.0,
                    keyId: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActivateKeyRequiresKskgen {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActivateKeyRequiresKskgen(uint256,uint256)";
            const SELECTOR: [u8; 4] = [232u8, 84u8, 172u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressEmptyCode(address)` and selector `0x9996b315`.
```solidity
error AddressEmptyCode(address target);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressEmptyCode {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressEmptyCode> for UnderlyingRustTuple<'_> {
            fn from(value: AddressEmptyCode) -> Self {
                (value.target,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressEmptyCode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { target: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressEmptyCode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressEmptyCode(address)";
            const SELECTOR: [u8; 4] = [153u8, 150u8, 179u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CrsgenKmsNodeAlreadyResponded(uint256,address)` and selector `0xf89d760d`.
```solidity
error CrsgenKmsNodeAlreadyResponded(uint256 crsId, address kmsTxSender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CrsgenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub crsId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kmsTxSender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CrsgenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: CrsgenKmsNodeAlreadyResponded) -> Self {
                (value.crsId, value.kmsTxSender)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CrsgenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    crsId: tuple.0,
                    kmsTxSender: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CrsgenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CrsgenKmsNodeAlreadyResponded(uint256,address)";
            const SELECTOR: [u8; 4] = [248u8, 157u8, 118u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.kmsTxSender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967InvalidImplementation(address)` and selector `0x4c9c8ce3`.
```solidity
error ERC1967InvalidImplementation(address implementation);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967InvalidImplementation {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967InvalidImplementation>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967InvalidImplementation) -> Self {
                (value.implementation,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1967InvalidImplementation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { implementation: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967InvalidImplementation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967InvalidImplementation(address)";
            const SELECTOR: [u8; 4] = [76u8, 156u8, 140u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967NonPayable()` and selector `0xb398979f`.
```solidity
error ERC1967NonPayable();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967NonPayable;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967NonPayable> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967NonPayable) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1967NonPayable {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967NonPayable {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967NonPayable()";
            const SELECTOR: [u8; 4] = [179u8, 152u8, 151u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FailedCall()` and selector `0xd6bda275`.
```solidity
error FailedCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedCall;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedCall> for UnderlyingRustTuple<'_> {
            fn from(value: FailedCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedCall()";
            const SELECTOR: [u8; 4] = [214u8, 189u8, 162u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FheParamsAlreadyInitialized(string)` and selector `0xbcdf9993`.
```solidity
error FheParamsAlreadyInitialized(string fheParamsName);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FheParamsAlreadyInitialized {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FheParamsAlreadyInitialized>
        for UnderlyingRustTuple<'_> {
            fn from(value: FheParamsAlreadyInitialized) -> Self {
                (value.fheParamsName,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for FheParamsAlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { fheParamsName: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FheParamsAlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FheParamsAlreadyInitialized(string)";
            const SELECTOR: [u8; 4] = [188u8, 223u8, 153u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FheParamsNotInitialized()` and selector `0x7dcd17f9`.
```solidity
error FheParamsNotInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FheParamsNotInitialized;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FheParamsNotInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: FheParamsNotInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FheParamsNotInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FheParamsNotInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FheParamsNotInitialized()";
            const SELECTOR: [u8; 4] = [125u8, 205u8, 23u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KeygenKmsNodeAlreadyResponded(uint256,address)` and selector `0x181e6501`.
```solidity
error KeygenKmsNodeAlreadyResponded(uint256 keyId, address kmsTxSender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KeygenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kmsTxSender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KeygenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: KeygenKmsNodeAlreadyResponded) -> Self {
                (value.keyId, value.kmsTxSender)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KeygenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    keyId: tuple.0,
                    kmsTxSender: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KeygenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KeygenKmsNodeAlreadyResponded(uint256,address)";
            const SELECTOR: [u8; 4] = [24u8, 30u8, 101u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.kmsTxSender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KeygenPreprocessingRequired(uint256)` and selector `0xbea1ca4c`.
```solidity
error KeygenPreprocessingRequired(uint256 preKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KeygenPreprocessingRequired {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KeygenPreprocessingRequired>
        for UnderlyingRustTuple<'_> {
            fn from(value: KeygenPreprocessingRequired) -> Self {
                (value.preKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KeygenPreprocessingRequired {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KeygenPreprocessingRequired {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KeygenPreprocessingRequired(uint256)";
            const SELECTOR: [u8; 4] = [190u8, 161u8, 202u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KeygenRequestAlreadySent(uint256)` and selector `0x5bf84e11`.
```solidity
error KeygenRequestAlreadySent(uint256 preKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KeygenRequestAlreadySent {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KeygenRequestAlreadySent>
        for UnderlyingRustTuple<'_> {
            fn from(value: KeygenRequestAlreadySent) -> Self {
                (value.preKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KeygenRequestAlreadySent {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KeygenRequestAlreadySent {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KeygenRequestAlreadySent(uint256)";
            const SELECTOR: [u8; 4] = [91u8, 248u8, 78u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KskgenDestKeyNotGenerated(uint256)` and selector `0x2800229d`.
```solidity
error KskgenDestKeyNotGenerated(uint256 destKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenDestKeyNotGenerated {
        #[allow(missing_docs)]
        pub destKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenDestKeyNotGenerated>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenDestKeyNotGenerated) -> Self {
                (value.destKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenDestKeyNotGenerated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { destKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenDestKeyNotGenerated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenDestKeyNotGenerated(uint256)";
            const SELECTOR: [u8; 4] = [40u8, 0u8, 34u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.destKeyId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KskgenKmsNodeAlreadyResponded(uint256,address)` and selector `0x0ff55fe8`.
```solidity
error KskgenKmsNodeAlreadyResponded(uint256 kskId, address kmsTxSender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub kskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kmsTxSender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenKmsNodeAlreadyResponded) -> Self {
                (value.kskId, value.kmsTxSender)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    kskId: tuple.0,
                    kmsTxSender: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenKmsNodeAlreadyResponded(uint256,address)";
            const SELECTOR: [u8; 4] = [15u8, 245u8, 95u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.kskId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.kmsTxSender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KskgenPreprocessingRequired(uint256)` and selector `0xbe48e7d0`.
```solidity
error KskgenPreprocessingRequired(uint256 preKskId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenPreprocessingRequired {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenPreprocessingRequired>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenPreprocessingRequired) -> Self {
                (value.preKskId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenPreprocessingRequired {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKskId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenPreprocessingRequired {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenPreprocessingRequired(uint256)";
            const SELECTOR: [u8; 4] = [190u8, 72u8, 231u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KskgenRequestAlreadySent(uint256)` and selector `0x49cbbf34`.
```solidity
error KskgenRequestAlreadySent(uint256 preKskId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenRequestAlreadySent {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenRequestAlreadySent>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenRequestAlreadySent) -> Self {
                (value.preKskId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenRequestAlreadySent {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKskId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenRequestAlreadySent {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenRequestAlreadySent(uint256)";
            const SELECTOR: [u8; 4] = [73u8, 203u8, 191u8, 52u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KskgenSameSrcAndDestKeyIds(uint256)` and selector `0xd6f4a687`.
```solidity
error KskgenSameSrcAndDestKeyIds(uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenSameSrcAndDestKeyIds {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenSameSrcAndDestKeyIds>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenSameSrcAndDestKeyIds) -> Self {
                (value.keyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenSameSrcAndDestKeyIds {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { keyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenSameSrcAndDestKeyIds {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenSameSrcAndDestKeyIds(uint256)";
            const SELECTOR: [u8; 4] = [214u8, 244u8, 166u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `KskgenSourceKeyNotGenerated(uint256)` and selector `0x05fc6161`.
```solidity
error KskgenSourceKeyNotGenerated(uint256 sourceKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenSourceKeyNotGenerated {
        #[allow(missing_docs)]
        pub sourceKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenSourceKeyNotGenerated>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenSourceKeyNotGenerated) -> Self {
                (value.sourceKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenSourceKeyNotGenerated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sourceKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenSourceKeyNotGenerated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenSourceKeyNotGenerated(uint256)";
            const SELECTOR: [u8; 4] = [5u8, 252u8, 97u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sourceKeyId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotGatewayOwner(address)` and selector `0x0e56cf3d`.
```solidity
error NotGatewayOwner(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotGatewayOwner {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotGatewayOwner> for UnderlyingRustTuple<'_> {
            fn from(value: NotGatewayOwner) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotGatewayOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotGatewayOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotGatewayOwner(address)";
            const SELECTOR: [u8; 4] = [14u8, 86u8, 207u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializingFromEmptyProxy()` and selector `0x6f4f731f`.
```solidity
error NotInitializingFromEmptyProxy();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializingFromEmptyProxy;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializingFromEmptyProxy>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializingFromEmptyProxy) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotInitializingFromEmptyProxy {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializingFromEmptyProxy {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializingFromEmptyProxy()";
            const SELECTOR: [u8; 4] = [111u8, 79u8, 115u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `PreprocessKeygenKmsNodeAlreadyResponded(uint256,address)` and selector `0x4409282d`.
```solidity
error PreprocessKeygenKmsNodeAlreadyResponded(uint256 preKeyId, address kmsTxSender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PreprocessKeygenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kmsTxSender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PreprocessKeygenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: PreprocessKeygenKmsNodeAlreadyResponded) -> Self {
                (value.preKeyId, value.kmsTxSender)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for PreprocessKeygenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preKeyId: tuple.0,
                    kmsTxSender: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PreprocessKeygenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PreprocessKeygenKmsNodeAlreadyResponded(uint256,address)";
            const SELECTOR: [u8; 4] = [68u8, 9u8, 40u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.kmsTxSender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `PreprocessKskgenKmsNodeAlreadyResponded(uint256,address)` and selector `0x7aebd3bd`.
```solidity
error PreprocessKskgenKmsNodeAlreadyResponded(uint256 preKskId, address kmsTxSender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PreprocessKskgenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kmsTxSender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PreprocessKskgenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: PreprocessKskgenKmsNodeAlreadyResponded) -> Self {
                (value.preKskId, value.kmsTxSender)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for PreprocessKskgenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preKskId: tuple.0,
                    kmsTxSender: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PreprocessKskgenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PreprocessKskgenKmsNodeAlreadyResponded(uint256,address)";
            const SELECTOR: [u8; 4] = [122u8, 235u8, 211u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.kmsTxSender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnauthorizedCallContext()` and selector `0xe07c8dba`.
```solidity
error UUPSUnauthorizedCallContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnauthorizedCallContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnauthorizedCallContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnauthorizedCallContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnauthorizedCallContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnauthorizedCallContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnauthorizedCallContext()";
            const SELECTOR: [u8; 4] = [224u8, 124u8, 141u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnsupportedProxiableUUID(bytes32)` and selector `0xaa1d49a4`.
```solidity
error UUPSUnsupportedProxiableUUID(bytes32 slot);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnsupportedProxiableUUID {
        #[allow(missing_docs)]
        pub slot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnsupportedProxiableUUID>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnsupportedProxiableUUID) -> Self {
                (value.slot,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnsupportedProxiableUUID {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { slot: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnsupportedProxiableUUID {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnsupportedProxiableUUID(bytes32)";
            const SELECTOR: [u8; 4] = [170u8, 29u8, 73u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ActivateKeyRequest(uint256)` and selector `0xbddc1662cdaa871ae40d9edc0e435e0988c6095bfc7c452aedb16c89606b6b75`.
```solidity
event ActivateKeyRequest(uint256 keyId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActivateKeyRequest {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActivateKeyRequest {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ActivateKeyRequest(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 220u8, 22u8, 98u8, 205u8, 170u8, 135u8, 26u8, 228u8, 13u8, 158u8,
                220u8, 14u8, 67u8, 94u8, 9u8, 136u8, 198u8, 9u8, 91u8, 252u8, 124u8,
                69u8, 42u8, 237u8, 177u8, 108u8, 137u8, 96u8, 107u8, 107u8, 117u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { keyId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActivateKeyRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActivateKeyRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ActivateKeyRequest) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ActivateKeyResponse(uint256)` and selector `0x7066963379f0648a6475860de4447aec0b04c03db5bc169b401c88d16ff6578d`.
```solidity
event ActivateKeyResponse(uint256 keyId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActivateKeyResponse {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActivateKeyResponse {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ActivateKeyResponse(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                112u8, 102u8, 150u8, 51u8, 121u8, 240u8, 100u8, 138u8, 100u8, 117u8,
                134u8, 13u8, 228u8, 68u8, 122u8, 236u8, 11u8, 4u8, 192u8, 61u8, 181u8,
                188u8, 22u8, 155u8, 64u8, 28u8, 136u8, 209u8, 111u8, 246u8, 87u8, 141u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { keyId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActivateKeyResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActivateKeyResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ActivateKeyResponse) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `AddFheParams(string,bytes32)` and selector `0xe63dba14ba216c43efbd6e0206cd2172a4a64f894c8faf004691aa6f88fecada`.
```solidity
event AddFheParams(string fheParamsName, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AddFheParams {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AddFheParams {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "AddFheParams(string,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                230u8, 61u8, 186u8, 20u8, 186u8, 33u8, 108u8, 67u8, 239u8, 189u8, 110u8,
                2u8, 6u8, 205u8, 33u8, 114u8, 164u8, 166u8, 79u8, 137u8, 76u8, 143u8,
                175u8, 0u8, 70u8, 145u8, 170u8, 111u8, 136u8, 254u8, 202u8, 218u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    fheParamsName: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AddFheParams {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AddFheParams> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AddFheParams) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CrsgenRequest(uint256,bytes32)` and selector `0x04f7b6ae222ef47289cfdc7c3b8298273e1bc92eeb346e805163ed4b37e76b29`.
```solidity
event CrsgenRequest(uint256 crsgenRequestId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CrsgenRequest {
        #[allow(missing_docs)]
        pub crsgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CrsgenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CrsgenRequest(uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                4u8, 247u8, 182u8, 174u8, 34u8, 46u8, 244u8, 114u8, 137u8, 207u8, 220u8,
                124u8, 59u8, 130u8, 152u8, 39u8, 62u8, 27u8, 201u8, 46u8, 235u8, 52u8,
                110u8, 128u8, 81u8, 99u8, 237u8, 75u8, 55u8, 231u8, 107u8, 41u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    crsgenRequestId: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsgenRequestId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CrsgenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CrsgenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CrsgenRequest) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CrsgenResponse(uint256,uint256,bytes32)` and selector `0x95c123ae3e63573231605272667e1410a9e3c618227ff509e3c6a152c664b3a2`.
```solidity
event CrsgenResponse(uint256 crsgenRequestId, uint256 crsId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CrsgenResponse {
        #[allow(missing_docs)]
        pub crsgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub crsId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CrsgenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CrsgenResponse(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                149u8, 193u8, 35u8, 174u8, 62u8, 99u8, 87u8, 50u8, 49u8, 96u8, 82u8,
                114u8, 102u8, 126u8, 20u8, 16u8, 169u8, 227u8, 198u8, 24u8, 34u8, 127u8,
                245u8, 9u8, 227u8, 198u8, 161u8, 82u8, 198u8, 100u8, 179u8, 162u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    crsgenRequestId: data.0,
                    crsId: data.1,
                    fheParamsDigest: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsgenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CrsgenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CrsgenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CrsgenResponse) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KeygenRequest(uint256,bytes32)` and selector `0x796482d60009a80331529afb48bf3415a16c9ff539a8cd138e77a745af6c7b78`.
```solidity
event KeygenRequest(uint256 preKeyId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeygenRequest {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeygenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KeygenRequest(uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                121u8, 100u8, 130u8, 214u8, 0u8, 9u8, 168u8, 3u8, 49u8, 82u8, 154u8,
                251u8, 72u8, 191u8, 52u8, 21u8, 161u8, 108u8, 159u8, 245u8, 57u8, 168u8,
                205u8, 19u8, 142u8, 119u8, 167u8, 69u8, 175u8, 108u8, 123u8, 120u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKeyId: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeygenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeygenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeygenRequest) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KeygenResponse(uint256,uint256,bytes32)` and selector `0xbc9d79366dad6b972d61e3f1567ee2f1e24c0ce10c72dcfb1452ee3b35c8d13e`.
```solidity
event KeygenResponse(uint256 preKeyId, uint256 keygenId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeygenResponse {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub keygenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeygenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KeygenResponse(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8, 157u8, 121u8, 54u8, 109u8, 173u8, 107u8, 151u8, 45u8, 97u8, 227u8,
                241u8, 86u8, 126u8, 226u8, 241u8, 226u8, 76u8, 12u8, 225u8, 12u8, 114u8,
                220u8, 251u8, 20u8, 82u8, 238u8, 59u8, 53u8, 200u8, 209u8, 62u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKeyId: data.0,
                    keygenId: data.1,
                    fheParamsDigest: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keygenId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeygenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeygenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeygenResponse) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KskgenRequest(uint256,uint256,uint256,bytes32)` and selector `0xfd6857403eadbdc0c8b68b151bb46a31d6c352af79b065d472cbd77781514dd4`.
```solidity
event KskgenRequest(uint256 preKskId, uint256 sourceKeyId, uint256 destKeyId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KskgenRequest {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sourceKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub destKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KskgenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KskgenRequest(uint256,uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                253u8, 104u8, 87u8, 64u8, 62u8, 173u8, 189u8, 192u8, 200u8, 182u8, 139u8,
                21u8, 27u8, 180u8, 106u8, 49u8, 214u8, 195u8, 82u8, 175u8, 121u8, 176u8,
                101u8, 212u8, 114u8, 203u8, 215u8, 119u8, 129u8, 81u8, 77u8, 212u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKskId: data.0,
                    sourceKeyId: data.1,
                    destKeyId: data.2,
                    fheParamsDigest: data.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sourceKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.destKeyId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KskgenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KskgenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KskgenRequest) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KskgenResponse(uint256,uint256,bytes32)` and selector `0xc607d1695840ce0dc9d24a547edaec485e01e5939a540c2e4c23e360e2243767`.
```solidity
event KskgenResponse(uint256 preKskId, uint256 kskId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KskgenResponse {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KskgenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KskgenResponse(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                198u8, 7u8, 209u8, 105u8, 88u8, 64u8, 206u8, 13u8, 201u8, 210u8, 74u8,
                84u8, 126u8, 218u8, 236u8, 72u8, 94u8, 1u8, 229u8, 147u8, 154u8, 84u8,
                12u8, 46u8, 76u8, 35u8, 227u8, 96u8, 226u8, 36u8, 55u8, 103u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKskId: data.0,
                    kskId: data.1,
                    fheParamsDigest: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.kskId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KskgenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KskgenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KskgenResponse) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PreprocessKeygenRequest(uint256,bytes32)` and selector `0x8511337ad89c20ef904f13e9b9e7eb05f4c0fff128a8760c2c1d436c111b309f`.
```solidity
event PreprocessKeygenRequest(uint256 preKeygenRequestId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreprocessKeygenRequest {
        #[allow(missing_docs)]
        pub preKeygenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreprocessKeygenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreprocessKeygenRequest(uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                133u8, 17u8, 51u8, 122u8, 216u8, 156u8, 32u8, 239u8, 144u8, 79u8, 19u8,
                233u8, 185u8, 231u8, 235u8, 5u8, 244u8, 192u8, 255u8, 241u8, 40u8, 168u8,
                118u8, 12u8, 44u8, 29u8, 67u8, 108u8, 17u8, 27u8, 48u8, 159u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKeygenRequestId: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeygenRequestId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreprocessKeygenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreprocessKeygenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreprocessKeygenRequest,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PreprocessKeygenResponse(uint256,uint256)` and selector `0x4187011e59171694872e08b3d3cdd3c901567aa0e38aaa6dbb4368837c1e8e34`.
```solidity
event PreprocessKeygenResponse(uint256 preKeygenRequestId, uint256 preKeyId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreprocessKeygenResponse {
        #[allow(missing_docs)]
        pub preKeygenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreprocessKeygenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreprocessKeygenResponse(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                65u8, 135u8, 1u8, 30u8, 89u8, 23u8, 22u8, 148u8, 135u8, 46u8, 8u8, 179u8,
                211u8, 205u8, 211u8, 201u8, 1u8, 86u8, 122u8, 160u8, 227u8, 138u8, 170u8,
                109u8, 187u8, 67u8, 104u8, 131u8, 124u8, 30u8, 142u8, 52u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKeygenRequestId: data.0,
                    preKeyId: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeygenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreprocessKeygenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreprocessKeygenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreprocessKeygenResponse,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PreprocessKskgenRequest(uint256,bytes32)` and selector `0x596d111e7512a47ee0c5eb66eef6f22c45d8ad4fee0520340785a11e221ed512`.
```solidity
event PreprocessKskgenRequest(uint256 preKskgenRequestId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreprocessKskgenRequest {
        #[allow(missing_docs)]
        pub preKskgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreprocessKskgenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreprocessKskgenRequest(uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                89u8, 109u8, 17u8, 30u8, 117u8, 18u8, 164u8, 126u8, 224u8, 197u8, 235u8,
                102u8, 238u8, 246u8, 242u8, 44u8, 69u8, 216u8, 173u8, 79u8, 238u8, 5u8,
                32u8, 52u8, 7u8, 133u8, 161u8, 30u8, 34u8, 30u8, 213u8, 18u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKskgenRequestId: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskgenRequestId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreprocessKskgenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreprocessKskgenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreprocessKskgenRequest,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PreprocessKskgenResponse(uint256,uint256)` and selector `0x76863545735c29cf1c7ebb0028e734d1d738d2a5d099ba8b529c1793354ae312`.
```solidity
event PreprocessKskgenResponse(uint256 preKskgenRequestId, uint256 preKskId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreprocessKskgenResponse {
        #[allow(missing_docs)]
        pub preKskgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreprocessKskgenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreprocessKskgenResponse(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                118u8, 134u8, 53u8, 69u8, 115u8, 92u8, 41u8, 207u8, 28u8, 126u8, 187u8,
                0u8, 40u8, 231u8, 52u8, 209u8, 215u8, 56u8, 210u8, 165u8, 208u8, 153u8,
                186u8, 139u8, 82u8, 156u8, 23u8, 147u8, 53u8, 74u8, 227u8, 18u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKskgenRequestId: data.0,
                    preKskId: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskgenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreprocessKskgenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreprocessKskgenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreprocessKskgenResponse,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `UpdateFheParams(string,bytes32)` and selector `0xf0bb05ed11b11e9a83db1fdfdb364ce1579b1bb34d4080b670b5794692079e3d`.
```solidity
event UpdateFheParams(string fheParamsName, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UpdateFheParams {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UpdateFheParams {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "UpdateFheParams(string,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                240u8, 187u8, 5u8, 237u8, 17u8, 177u8, 30u8, 154u8, 131u8, 219u8, 31u8,
                223u8, 219u8, 54u8, 76u8, 225u8, 87u8, 155u8, 27u8, 179u8, 77u8, 64u8,
                128u8, 182u8, 112u8, 181u8, 121u8, 70u8, 146u8, 7u8, 158u8, 61u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    fheParamsName: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UpdateFheParams {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UpdateFheParams> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UpdateFheParams) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Upgraded(address)` and selector `0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b`.
```solidity
event Upgraded(address indexed implementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Upgraded {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Upgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Upgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { implementation: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.implementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.implementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Upgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Upgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Upgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `UPGRADE_INTERFACE_VERSION()` and selector `0xad3cb1cc`.
```solidity
function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`UPGRADE_INTERFACE_VERSION()`](UPGRADE_INTERFACE_VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for UPGRADE_INTERFACE_VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UPGRADE_INTERFACE_VERSION()";
            const SELECTOR: [u8; 4] = [173u8, 60u8, 177u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: UPGRADE_INTERFACE_VERSIONReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: UPGRADE_INTERFACE_VERSIONReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `activateKeyRequest(uint256)` and selector `0x9e167f76`.
```solidity
function activateKeyRequest(uint256 keyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateKeyRequestCall {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`activateKeyRequest(uint256)`](activateKeyRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateKeyRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateKeyRequestCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateKeyRequestCall) -> Self {
                    (value.keyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateKeyRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { keyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateKeyRequestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateKeyRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateKeyRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl activateKeyRequestReturn {
            fn _tokenize(
                &self,
            ) -> <activateKeyRequestCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activateKeyRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activateKeyRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activateKeyRequest(uint256)";
            const SELECTOR: [u8; 4] = [158u8, 22u8, 127u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                activateKeyRequestReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `activateKeyResponse(uint256)` and selector `0x3b41a6dd`.
```solidity
function activateKeyResponse(uint256 keyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateKeyResponseCall {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`activateKeyResponse(uint256)`](activateKeyResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateKeyResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateKeyResponseCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateKeyResponseCall) -> Self {
                    (value.keyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateKeyResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { keyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateKeyResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateKeyResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateKeyResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl activateKeyResponseReturn {
            fn _tokenize(
                &self,
            ) -> <activateKeyResponseCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activateKeyResponseCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activateKeyResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activateKeyResponse(uint256)";
            const SELECTOR: [u8; 4] = [59u8, 65u8, 166u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                activateKeyResponseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `activatedKeyIds(uint256)` and selector `0x622c078f`.
```solidity
function activatedKeyIds(uint256 index) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activatedKeyIdsCall {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`activatedKeyIds(uint256)`](activatedKeyIdsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activatedKeyIdsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activatedKeyIdsCall> for UnderlyingRustTuple<'_> {
                fn from(value: activatedKeyIdsCall) -> Self {
                    (value.index,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for activatedKeyIdsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { index: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activatedKeyIdsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activatedKeyIdsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activatedKeyIdsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activatedKeyIdsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activatedKeyIds(uint256)";
            const SELECTOR: [u8; 4] = [98u8, 44u8, 7u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: activatedKeyIdsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: activatedKeyIdsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addFheParams(string,bytes32)` and selector `0xa7ab4440`.
```solidity
function addFheParams(string memory fheParamsName, bytes32 fheParamsDigest) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addFheParamsCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`addFheParams(string,bytes32)`](addFheParamsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addFheParamsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addFheParamsCall> for UnderlyingRustTuple<'_> {
                fn from(value: addFheParamsCall) -> Self {
                    (value.fheParamsName, value.fheParamsDigest)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addFheParamsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fheParamsName: tuple.0,
                        fheParamsDigest: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addFheParamsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addFheParamsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addFheParamsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addFheParamsReturn {
            fn _tokenize(
                &self,
            ) -> <addFheParamsCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addFheParamsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addFheParamsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addFheParams(string,bytes32)";
            const SELECTOR: [u8; 4] = [167u8, 171u8, 68u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addFheParamsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `crsFheParamsDigests(uint256)` and selector `0xeed01e7d`.
```solidity
function crsFheParamsDigests(uint256 crsId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsFheParamsDigestsCall {
        #[allow(missing_docs)]
        pub crsId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`crsFheParamsDigests(uint256)`](crsFheParamsDigestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsFheParamsDigestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsFheParamsDigestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: crsFheParamsDigestsCall) -> Self {
                    (value.crsId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crsFheParamsDigestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { crsId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsFheParamsDigestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crsFheParamsDigestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crsFheParamsDigestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crsFheParamsDigestsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crsFheParamsDigests(uint256)";
            const SELECTOR: [u8; 4] = [238u8, 208u8, 30u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: crsFheParamsDigestsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: crsFheParamsDigestsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `crsgenRequest(string)` and selector `0x6532745f`.
```solidity
function crsgenRequest(string memory fheParamsName) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsgenRequestCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`crsgenRequest(string)`](crsgenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsgenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsgenRequestCall> for UnderlyingRustTuple<'_> {
                fn from(value: crsgenRequestCall) -> Self {
                    (value.fheParamsName,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crsgenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { fheParamsName: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsgenRequestReturn> for UnderlyingRustTuple<'_> {
                fn from(value: crsgenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crsgenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl crsgenRequestReturn {
            fn _tokenize(
                &self,
            ) -> <crsgenRequestCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crsgenRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crsgenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crsgenRequest(string)";
            const SELECTOR: [u8; 4] = [101u8, 50u8, 116u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                crsgenRequestReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `crsgenResponse(uint256,uint256)` and selector `0x40c24f15`.
```solidity
function crsgenResponse(uint256 crsgenRequestId, uint256 crsId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsgenResponseCall {
        #[allow(missing_docs)]
        pub crsgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub crsId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`crsgenResponse(uint256,uint256)`](crsgenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsgenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsgenResponseCall> for UnderlyingRustTuple<'_> {
                fn from(value: crsgenResponseCall) -> Self {
                    (value.crsgenRequestId, value.crsId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crsgenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        crsgenRequestId: tuple.0,
                        crsId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsgenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crsgenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crsgenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl crsgenResponseReturn {
            fn _tokenize(
                &self,
            ) -> <crsgenResponseCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crsgenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crsgenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crsgenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [64u8, 194u8, 79u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsgenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                crsgenResponseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `fheParamsDigests(string)` and selector `0x45e3b193`.
```solidity
function fheParamsDigests(string memory fheParamsName) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fheParamsDigestsCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`fheParamsDigests(string)`](fheParamsDigestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fheParamsDigestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fheParamsDigestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: fheParamsDigestsCall) -> Self {
                    (value.fheParamsName,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fheParamsDigestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { fheParamsName: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fheParamsDigestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: fheParamsDigestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fheParamsDigestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for fheParamsDigestsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "fheParamsDigests(string)";
            const SELECTOR: [u8; 4] = [69u8, 227u8, 177u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: fheParamsDigestsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: fheParamsDigestsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCurrentKeyId()` and selector `0xd8909eab`.
```solidity
function getCurrentKeyId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentKeyIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCurrentKeyId()`](getCurrentKeyIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentKeyIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentKeyIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentKeyIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCurrentKeyIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentKeyIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentKeyIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentKeyIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentKeyIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentKeyId()";
            const SELECTOR: [u8; 4] = [216u8, 144u8, 158u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCurrentKeyIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCurrentKeyIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVersion()` and selector `0x0d8e6e2c`.
```solidity
function getVersion() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVersion()`](getVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVersion()";
            const SELECTOR: [u8; 4] = [13u8, 142u8, 110u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initializeFromEmptyProxy(string,bytes32)` and selector `0x1fbfe66e`.
```solidity
function initializeFromEmptyProxy(string memory fheParamsName, bytes32 fheParamsDigest) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeFromEmptyProxyCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`initializeFromEmptyProxy(string,bytes32)`](initializeFromEmptyProxyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeFromEmptyProxyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeFromEmptyProxyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: initializeFromEmptyProxyCall) -> Self {
                    (value.fheParamsName, value.fheParamsDigest)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initializeFromEmptyProxyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fheParamsName: tuple.0,
                        fheParamsDigest: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeFromEmptyProxyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: initializeFromEmptyProxyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initializeFromEmptyProxyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl initializeFromEmptyProxyReturn {
            fn _tokenize(
                &self,
            ) -> <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeFromEmptyProxyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeFromEmptyProxyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initializeFromEmptyProxy(string,bytes32)";
            const SELECTOR: [u8; 4] = [31u8, 191u8, 230u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                initializeFromEmptyProxyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `keyFheParamsDigests(uint256)` and selector `0x8af77f03`.
```solidity
function keyFheParamsDigests(uint256 keyId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keyFheParamsDigestsCall {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`keyFheParamsDigests(uint256)`](keyFheParamsDigestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keyFheParamsDigestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keyFheParamsDigestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: keyFheParamsDigestsCall) -> Self {
                    (value.keyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for keyFheParamsDigestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { keyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keyFheParamsDigestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: keyFheParamsDigestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for keyFheParamsDigestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for keyFheParamsDigestsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "keyFheParamsDigests(uint256)";
            const SELECTOR: [u8; 4] = [138u8, 247u8, 127u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: keyFheParamsDigestsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: keyFheParamsDigestsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `keygenRequest(uint256)` and selector `0xe0e55fd7`.
```solidity
function keygenRequest(uint256 preKeyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keygenRequestCall {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`keygenRequest(uint256)`](keygenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keygenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keygenRequestCall> for UnderlyingRustTuple<'_> {
                fn from(value: keygenRequestCall) -> Self {
                    (value.preKeyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for keygenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { preKeyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keygenRequestReturn> for UnderlyingRustTuple<'_> {
                fn from(value: keygenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for keygenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl keygenRequestReturn {
            fn _tokenize(
                &self,
            ) -> <keygenRequestCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for keygenRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = keygenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "keygenRequest(uint256)";
            const SELECTOR: [u8; 4] = [224u8, 229u8, 95u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                keygenRequestReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `keygenResponse(uint256,uint256)` and selector `0x6aafa976`.
```solidity
function keygenResponse(uint256 preKeyId, uint256 keyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keygenResponseCall {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`keygenResponse(uint256,uint256)`](keygenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keygenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keygenResponseCall> for UnderlyingRustTuple<'_> {
                fn from(value: keygenResponseCall) -> Self {
                    (value.preKeyId, value.keyId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for keygenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKeyId: tuple.0,
                        keyId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keygenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: keygenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for keygenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl keygenResponseReturn {
            fn _tokenize(
                &self,
            ) -> <keygenResponseCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for keygenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = keygenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "keygenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [106u8, 175u8, 169u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                keygenResponseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `kskFheParamsDigests(uint256)` and selector `0xf1244c5d`.
```solidity
function kskFheParamsDigests(uint256 kskId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskFheParamsDigestsCall {
        #[allow(missing_docs)]
        pub kskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`kskFheParamsDigests(uint256)`](kskFheParamsDigestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskFheParamsDigestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskFheParamsDigestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: kskFheParamsDigestsCall) -> Self {
                    (value.kskId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for kskFheParamsDigestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { kskId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskFheParamsDigestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: kskFheParamsDigestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for kskFheParamsDigestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for kskFheParamsDigestsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "kskFheParamsDigests(uint256)";
            const SELECTOR: [u8; 4] = [241u8, 36u8, 76u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.kskId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: kskFheParamsDigestsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: kskFheParamsDigestsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `kskgenRequest(uint256,uint256,uint256)` and selector `0x394c7bd6`.
```solidity
function kskgenRequest(uint256 preKskId, uint256 sourceKeyId, uint256 destKeyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskgenRequestCall {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sourceKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub destKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`kskgenRequest(uint256,uint256,uint256)`](kskgenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskgenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskgenRequestCall> for UnderlyingRustTuple<'_> {
                fn from(value: kskgenRequestCall) -> Self {
                    (value.preKskId, value.sourceKeyId, value.destKeyId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for kskgenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKskId: tuple.0,
                        sourceKeyId: tuple.1,
                        destKeyId: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskgenRequestReturn> for UnderlyingRustTuple<'_> {
                fn from(value: kskgenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for kskgenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl kskgenRequestReturn {
            fn _tokenize(
                &self,
            ) -> <kskgenRequestCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for kskgenRequestCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = kskgenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "kskgenRequest(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [57u8, 76u8, 123u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sourceKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.destKeyId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                kskgenRequestReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `kskgenResponse(uint256,uint256)` and selector `0x9594a901`.
```solidity
function kskgenResponse(uint256 preKskId, uint256 kskId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskgenResponseCall {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`kskgenResponse(uint256,uint256)`](kskgenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskgenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskgenResponseCall> for UnderlyingRustTuple<'_> {
                fn from(value: kskgenResponseCall) -> Self {
                    (value.preKskId, value.kskId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for kskgenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKskId: tuple.0,
                        kskId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskgenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: kskgenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for kskgenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl kskgenResponseReturn {
            fn _tokenize(
                &self,
            ) -> <kskgenResponseCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for kskgenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = kskgenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "kskgenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [149u8, 148u8, 169u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.kskId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                kskgenResponseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `preprocessKeygenRequest(string)` and selector `0x26739e7c`.
```solidity
function preprocessKeygenRequest(string memory fheParamsName) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKeygenRequestCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`preprocessKeygenRequest(string)`](preprocessKeygenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKeygenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKeygenRequestCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKeygenRequestCall) -> Self {
                    (value.fheParamsName,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKeygenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { fheParamsName: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKeygenRequestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKeygenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKeygenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl preprocessKeygenRequestReturn {
            fn _tokenize(
                &self,
            ) -> <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for preprocessKeygenRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = preprocessKeygenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "preprocessKeygenRequest(string)";
            const SELECTOR: [u8; 4] = [38u8, 115u8, 158u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                preprocessKeygenRequestReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `preprocessKeygenResponse(uint256,uint256)` and selector `0xfaac73b4`.
```solidity
function preprocessKeygenResponse(uint256 preKeygenRequestId, uint256 preKeyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKeygenResponseCall {
        #[allow(missing_docs)]
        pub preKeygenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`preprocessKeygenResponse(uint256,uint256)`](preprocessKeygenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKeygenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKeygenResponseCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKeygenResponseCall) -> Self {
                    (value.preKeygenRequestId, value.preKeyId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKeygenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKeygenRequestId: tuple.0,
                        preKeyId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKeygenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKeygenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKeygenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl preprocessKeygenResponseReturn {
            fn _tokenize(
                &self,
            ) -> <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for preprocessKeygenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = preprocessKeygenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "preprocessKeygenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [250u8, 172u8, 115u8, 180u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeygenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                preprocessKeygenResponseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `preprocessKskgenRequest(string)` and selector `0x428e76d8`.
```solidity
function preprocessKskgenRequest(string memory fheParamsName) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKskgenRequestCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`preprocessKskgenRequest(string)`](preprocessKskgenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKskgenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKskgenRequestCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKskgenRequestCall) -> Self {
                    (value.fheParamsName,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKskgenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { fheParamsName: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKskgenRequestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKskgenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKskgenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl preprocessKskgenRequestReturn {
            fn _tokenize(
                &self,
            ) -> <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for preprocessKskgenRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = preprocessKskgenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "preprocessKskgenRequest(string)";
            const SELECTOR: [u8; 4] = [66u8, 142u8, 118u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                preprocessKskgenRequestReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `preprocessKskgenResponse(uint256,uint256)` and selector `0x941c8df6`.
```solidity
function preprocessKskgenResponse(uint256 preKskgenRequestId, uint256 preKskId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKskgenResponseCall {
        #[allow(missing_docs)]
        pub preKskgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`preprocessKskgenResponse(uint256,uint256)`](preprocessKskgenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKskgenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKskgenResponseCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKskgenResponseCall) -> Self {
                    (value.preKskgenRequestId, value.preKskId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKskgenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKskgenRequestId: tuple.0,
                        preKskId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKskgenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKskgenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKskgenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl preprocessKskgenResponseReturn {
            fn _tokenize(
                &self,
            ) -> <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for preprocessKskgenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = preprocessKskgenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "preprocessKskgenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [148u8, 28u8, 141u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskgenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                preprocessKskgenResponseReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `proxiableUUID()` and selector `0x52d1902d`.
```solidity
function proxiableUUID() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`proxiableUUID()`](proxiableUUIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDCall> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proxiableUUIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proxiableUUID()";
            const SELECTOR: [u8; 4] = [82u8, 209u8, 144u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: proxiableUUIDReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: proxiableUUIDReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `updateFheParams(string,bytes32)` and selector `0x293479b1`.
```solidity
function updateFheParams(string memory fheParamsName, bytes32 fheParamsDigest) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateFheParamsCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`updateFheParams(string,bytes32)`](updateFheParamsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateFheParamsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateFheParamsCall> for UnderlyingRustTuple<'_> {
                fn from(value: updateFheParamsCall) -> Self {
                    (value.fheParamsName, value.fheParamsDigest)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for updateFheParamsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fheParamsName: tuple.0,
                        fheParamsDigest: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateFheParamsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateFheParamsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateFheParamsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl updateFheParamsReturn {
            fn _tokenize(
                &self,
            ) -> <updateFheParamsCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateFheParamsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateFheParamsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateFheParams(string,bytes32)";
            const SELECTOR: [u8; 4] = [41u8, 52u8, 121u8, 177u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                updateFheParamsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `upgradeToAndCall(address,bytes)` and selector `0x4f1ef286`.
```solidity
function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallCall {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`upgradeToAndCall(address,bytes)`](upgradeToAndCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallCall) -> Self {
                    (value.newImplementation, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newImplementation: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl upgradeToAndCallReturn {
            fn _tokenize(
                &self,
            ) -> <upgradeToAndCallCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeToAndCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeToAndCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeToAndCall(address,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 30u8, 242u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                upgradeToAndCallReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`KmsManagement`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum KmsManagementCalls {
        #[allow(missing_docs)]
        UPGRADE_INTERFACE_VERSION(UPGRADE_INTERFACE_VERSIONCall),
        #[allow(missing_docs)]
        activateKeyRequest(activateKeyRequestCall),
        #[allow(missing_docs)]
        activateKeyResponse(activateKeyResponseCall),
        #[allow(missing_docs)]
        activatedKeyIds(activatedKeyIdsCall),
        #[allow(missing_docs)]
        addFheParams(addFheParamsCall),
        #[allow(missing_docs)]
        crsFheParamsDigests(crsFheParamsDigestsCall),
        #[allow(missing_docs)]
        crsgenRequest(crsgenRequestCall),
        #[allow(missing_docs)]
        crsgenResponse(crsgenResponseCall),
        #[allow(missing_docs)]
        fheParamsDigests(fheParamsDigestsCall),
        #[allow(missing_docs)]
        getCurrentKeyId(getCurrentKeyIdCall),
        #[allow(missing_docs)]
        getVersion(getVersionCall),
        #[allow(missing_docs)]
        initializeFromEmptyProxy(initializeFromEmptyProxyCall),
        #[allow(missing_docs)]
        keyFheParamsDigests(keyFheParamsDigestsCall),
        #[allow(missing_docs)]
        keygenRequest(keygenRequestCall),
        #[allow(missing_docs)]
        keygenResponse(keygenResponseCall),
        #[allow(missing_docs)]
        kskFheParamsDigests(kskFheParamsDigestsCall),
        #[allow(missing_docs)]
        kskgenRequest(kskgenRequestCall),
        #[allow(missing_docs)]
        kskgenResponse(kskgenResponseCall),
        #[allow(missing_docs)]
        preprocessKeygenRequest(preprocessKeygenRequestCall),
        #[allow(missing_docs)]
        preprocessKeygenResponse(preprocessKeygenResponseCall),
        #[allow(missing_docs)]
        preprocessKskgenRequest(preprocessKskgenRequestCall),
        #[allow(missing_docs)]
        preprocessKskgenResponse(preprocessKskgenResponseCall),
        #[allow(missing_docs)]
        proxiableUUID(proxiableUUIDCall),
        #[allow(missing_docs)]
        updateFheParams(updateFheParamsCall),
        #[allow(missing_docs)]
        upgradeToAndCall(upgradeToAndCallCall),
    }
    #[automatically_derived]
    impl KmsManagementCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 142u8, 110u8, 44u8],
            [31u8, 191u8, 230u8, 110u8],
            [38u8, 115u8, 158u8, 124u8],
            [41u8, 52u8, 121u8, 177u8],
            [57u8, 76u8, 123u8, 214u8],
            [59u8, 65u8, 166u8, 221u8],
            [64u8, 194u8, 79u8, 21u8],
            [66u8, 142u8, 118u8, 216u8],
            [69u8, 227u8, 177u8, 147u8],
            [79u8, 30u8, 242u8, 134u8],
            [82u8, 209u8, 144u8, 45u8],
            [98u8, 44u8, 7u8, 143u8],
            [101u8, 50u8, 116u8, 95u8],
            [106u8, 175u8, 169u8, 118u8],
            [138u8, 247u8, 127u8, 3u8],
            [148u8, 28u8, 141u8, 246u8],
            [149u8, 148u8, 169u8, 1u8],
            [158u8, 22u8, 127u8, 118u8],
            [167u8, 171u8, 68u8, 64u8],
            [173u8, 60u8, 177u8, 204u8],
            [216u8, 144u8, 158u8, 171u8],
            [224u8, 229u8, 95u8, 215u8],
            [238u8, 208u8, 30u8, 125u8],
            [241u8, 36u8, 76u8, 93u8],
            [250u8, 172u8, 115u8, 180u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for KmsManagementCalls {
        const NAME: &'static str = "KmsManagementCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 25usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(_) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activateKeyRequest(_) => {
                    <activateKeyRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activateKeyResponse(_) => {
                    <activateKeyResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activatedKeyIds(_) => {
                    <activatedKeyIdsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addFheParams(_) => {
                    <addFheParamsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crsFheParamsDigests(_) => {
                    <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crsgenRequest(_) => {
                    <crsgenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crsgenResponse(_) => {
                    <crsgenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::fheParamsDigests(_) => {
                    <fheParamsDigestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentKeyId(_) => {
                    <getCurrentKeyIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVersion(_) => {
                    <getVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initializeFromEmptyProxy(_) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::keyFheParamsDigests(_) => {
                    <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::keygenRequest(_) => {
                    <keygenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::keygenResponse(_) => {
                    <keygenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::kskFheParamsDigests(_) => {
                    <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::kskgenRequest(_) => {
                    <kskgenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::kskgenResponse(_) => {
                    <kskgenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::preprocessKeygenRequest(_) => {
                    <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::preprocessKeygenResponse(_) => {
                    <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::preprocessKskgenRequest(_) => {
                    <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::preprocessKskgenResponse(_) => {
                    <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proxiableUUID(_) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateFheParams(_) => {
                    <updateFheParamsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgradeToAndCall(_) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<KmsManagementCalls>] = &[
                {
                    fn getVersion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn initializeFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::initializeFromEmptyProxy)
                    }
                    initializeFromEmptyProxy
                },
                {
                    fn preprocessKeygenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::preprocessKeygenRequest)
                    }
                    preprocessKeygenRequest
                },
                {
                    fn updateFheParams(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <updateFheParamsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::updateFheParams)
                    }
                    updateFheParams
                },
                {
                    fn kskgenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::kskgenRequest)
                    }
                    kskgenRequest
                },
                {
                    fn activateKeyResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activateKeyResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::activateKeyResponse)
                    }
                    activateKeyResponse
                },
                {
                    fn crsgenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::crsgenResponse)
                    }
                    crsgenResponse
                },
                {
                    fn preprocessKskgenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::preprocessKskgenRequest)
                    }
                    preprocessKskgenRequest
                },
                {
                    fn fheParamsDigests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <fheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::fheParamsDigests)
                    }
                    fheParamsDigests
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn activatedKeyIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activatedKeyIdsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::activatedKeyIds)
                    }
                    activatedKeyIds
                },
                {
                    fn crsgenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::crsgenRequest)
                    }
                    crsgenRequest
                },
                {
                    fn keygenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keygenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::keygenResponse)
                    }
                    keygenResponse
                },
                {
                    fn keyFheParamsDigests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::keyFheParamsDigests)
                    }
                    keyFheParamsDigests
                },
                {
                    fn preprocessKskgenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::preprocessKskgenResponse)
                    }
                    preprocessKskgenResponse
                },
                {
                    fn kskgenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::kskgenResponse)
                    }
                    kskgenResponse
                },
                {
                    fn activateKeyRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activateKeyRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::activateKeyRequest)
                    }
                    activateKeyRequest
                },
                {
                    fn addFheParams(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <addFheParamsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::addFheParams)
                    }
                    addFheParams
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn getCurrentKeyId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <getCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::getCurrentKeyId)
                    }
                    getCurrentKeyId
                },
                {
                    fn keygenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keygenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::keygenRequest)
                    }
                    keygenRequest
                },
                {
                    fn crsFheParamsDigests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::crsFheParamsDigests)
                    }
                    crsFheParamsDigests
                },
                {
                    fn kskFheParamsDigests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::kskFheParamsDigests)
                    }
                    kskFheParamsDigests
                },
                {
                    fn preprocessKeygenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementCalls::preprocessKeygenResponse)
                    }
                    preprocessKeygenResponse
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<KmsManagementCalls>] = &[
                {
                    fn getVersion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn initializeFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::initializeFromEmptyProxy)
                    }
                    initializeFromEmptyProxy
                },
                {
                    fn preprocessKeygenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::preprocessKeygenRequest)
                    }
                    preprocessKeygenRequest
                },
                {
                    fn updateFheParams(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <updateFheParamsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::updateFheParams)
                    }
                    updateFheParams
                },
                {
                    fn kskgenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::kskgenRequest)
                    }
                    kskgenRequest
                },
                {
                    fn activateKeyResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activateKeyResponseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::activateKeyResponse)
                    }
                    activateKeyResponse
                },
                {
                    fn crsgenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::crsgenResponse)
                    }
                    crsgenResponse
                },
                {
                    fn preprocessKskgenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::preprocessKskgenRequest)
                    }
                    preprocessKskgenRequest
                },
                {
                    fn fheParamsDigests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <fheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::fheParamsDigests)
                    }
                    fheParamsDigests
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn activatedKeyIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activatedKeyIdsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::activatedKeyIds)
                    }
                    activatedKeyIds
                },
                {
                    fn crsgenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::crsgenRequest)
                    }
                    crsgenRequest
                },
                {
                    fn keygenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keygenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::keygenResponse)
                    }
                    keygenResponse
                },
                {
                    fn keyFheParamsDigests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::keyFheParamsDigests)
                    }
                    keyFheParamsDigests
                },
                {
                    fn preprocessKskgenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::preprocessKskgenResponse)
                    }
                    preprocessKskgenResponse
                },
                {
                    fn kskgenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::kskgenResponse)
                    }
                    kskgenResponse
                },
                {
                    fn activateKeyRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activateKeyRequestCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::activateKeyRequest)
                    }
                    activateKeyRequest
                },
                {
                    fn addFheParams(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <addFheParamsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::addFheParams)
                    }
                    addFheParams
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn getCurrentKeyId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <getCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::getCurrentKeyId)
                    }
                    getCurrentKeyId
                },
                {
                    fn keygenRequest(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keygenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::keygenRequest)
                    }
                    keygenRequest
                },
                {
                    fn crsFheParamsDigests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::crsFheParamsDigests)
                    }
                    crsFheParamsDigests
                },
                {
                    fn kskFheParamsDigests(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::kskFheParamsDigests)
                    }
                    kskFheParamsDigests
                },
                {
                    fn preprocessKeygenResponse(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementCalls::preprocessKeygenResponse)
                    }
                    preprocessKeygenResponse
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::activateKeyRequest(inner) => {
                    <activateKeyRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::activateKeyResponse(inner) => {
                    <activateKeyResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::activatedKeyIds(inner) => {
                    <activatedKeyIdsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addFheParams(inner) => {
                    <addFheParamsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crsFheParamsDigests(inner) => {
                    <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crsgenRequest(inner) => {
                    <crsgenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crsgenResponse(inner) => {
                    <crsgenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::fheParamsDigests(inner) => {
                    <fheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentKeyId(inner) => {
                    <getCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initializeFromEmptyProxy(inner) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::keyFheParamsDigests(inner) => {
                    <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::keygenRequest(inner) => {
                    <keygenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::keygenResponse(inner) => {
                    <keygenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::kskFheParamsDigests(inner) => {
                    <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::kskgenRequest(inner) => {
                    <kskgenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::kskgenResponse(inner) => {
                    <kskgenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::preprocessKeygenRequest(inner) => {
                    <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::preprocessKeygenResponse(inner) => {
                    <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::preprocessKskgenRequest(inner) => {
                    <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::preprocessKskgenResponse(inner) => {
                    <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateFheParams(inner) => {
                    <updateFheParamsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activateKeyRequest(inner) => {
                    <activateKeyRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activateKeyResponse(inner) => {
                    <activateKeyResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activatedKeyIds(inner) => {
                    <activatedKeyIdsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addFheParams(inner) => {
                    <addFheParamsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crsFheParamsDigests(inner) => {
                    <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crsgenRequest(inner) => {
                    <crsgenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crsgenResponse(inner) => {
                    <crsgenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::fheParamsDigests(inner) => {
                    <fheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentKeyId(inner) => {
                    <getCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initializeFromEmptyProxy(inner) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::keyFheParamsDigests(inner) => {
                    <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::keygenRequest(inner) => {
                    <keygenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::keygenResponse(inner) => {
                    <keygenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::kskFheParamsDigests(inner) => {
                    <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::kskgenRequest(inner) => {
                    <kskgenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::kskgenResponse(inner) => {
                    <kskgenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::preprocessKeygenRequest(inner) => {
                    <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::preprocessKeygenResponse(inner) => {
                    <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::preprocessKskgenRequest(inner) => {
                    <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::preprocessKskgenResponse(inner) => {
                    <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateFheParams(inner) => {
                    <updateFheParamsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`KmsManagement`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum KmsManagementErrors {
        #[allow(missing_docs)]
        ActivateKeyCoprocessorAlreadyResponded(ActivateKeyCoprocessorAlreadyResponded),
        #[allow(missing_docs)]
        ActivateKeyRequestAlreadySent(ActivateKeyRequestAlreadySent),
        #[allow(missing_docs)]
        ActivateKeyRequiresKeygen(ActivateKeyRequiresKeygen),
        #[allow(missing_docs)]
        ActivateKeyRequiresKskgen(ActivateKeyRequiresKskgen),
        #[allow(missing_docs)]
        AddressEmptyCode(AddressEmptyCode),
        #[allow(missing_docs)]
        CrsgenKmsNodeAlreadyResponded(CrsgenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        ERC1967InvalidImplementation(ERC1967InvalidImplementation),
        #[allow(missing_docs)]
        ERC1967NonPayable(ERC1967NonPayable),
        #[allow(missing_docs)]
        FailedCall(FailedCall),
        #[allow(missing_docs)]
        FheParamsAlreadyInitialized(FheParamsAlreadyInitialized),
        #[allow(missing_docs)]
        FheParamsNotInitialized(FheParamsNotInitialized),
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        KeygenKmsNodeAlreadyResponded(KeygenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        KeygenPreprocessingRequired(KeygenPreprocessingRequired),
        #[allow(missing_docs)]
        KeygenRequestAlreadySent(KeygenRequestAlreadySent),
        #[allow(missing_docs)]
        KskgenDestKeyNotGenerated(KskgenDestKeyNotGenerated),
        #[allow(missing_docs)]
        KskgenKmsNodeAlreadyResponded(KskgenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        KskgenPreprocessingRequired(KskgenPreprocessingRequired),
        #[allow(missing_docs)]
        KskgenRequestAlreadySent(KskgenRequestAlreadySent),
        #[allow(missing_docs)]
        KskgenSameSrcAndDestKeyIds(KskgenSameSrcAndDestKeyIds),
        #[allow(missing_docs)]
        KskgenSourceKeyNotGenerated(KskgenSourceKeyNotGenerated),
        #[allow(missing_docs)]
        NotGatewayOwner(NotGatewayOwner),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        NotInitializingFromEmptyProxy(NotInitializingFromEmptyProxy),
        #[allow(missing_docs)]
        PreprocessKeygenKmsNodeAlreadyResponded(PreprocessKeygenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        PreprocessKskgenKmsNodeAlreadyResponded(PreprocessKskgenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        UUPSUnauthorizedCallContext(UUPSUnauthorizedCallContext),
        #[allow(missing_docs)]
        UUPSUnsupportedProxiableUUID(UUPSUnsupportedProxiableUUID),
    }
    #[automatically_derived]
    impl KmsManagementErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 252u8, 97u8, 97u8],
            [14u8, 86u8, 207u8, 61u8],
            [15u8, 245u8, 95u8, 232u8],
            [24u8, 30u8, 101u8, 1u8],
            [35u8, 189u8, 79u8, 211u8],
            [40u8, 0u8, 34u8, 157u8],
            [68u8, 9u8, 40u8, 45u8],
            [72u8, 129u8, 51u8, 231u8],
            [73u8, 203u8, 191u8, 52u8],
            [76u8, 156u8, 140u8, 227u8],
            [91u8, 248u8, 78u8, 17u8],
            [111u8, 79u8, 115u8, 31u8],
            [122u8, 235u8, 211u8, 189u8],
            [125u8, 205u8, 23u8, 249u8],
            [153u8, 150u8, 179u8, 21u8],
            [170u8, 29u8, 73u8, 164u8],
            [179u8, 152u8, 151u8, 159u8],
            [188u8, 223u8, 153u8, 147u8],
            [190u8, 72u8, 231u8, 208u8],
            [190u8, 161u8, 202u8, 76u8],
            [214u8, 189u8, 162u8, 117u8],
            [214u8, 244u8, 166u8, 135u8],
            [215u8, 230u8, 188u8, 248u8],
            [224u8, 124u8, 141u8, 186u8],
            [227u8, 179u8, 70u8, 9u8],
            [232u8, 84u8, 172u8, 40u8],
            [248u8, 157u8, 118u8, 13u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for KmsManagementErrors {
        const NAME: &'static str = "KmsManagementErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 28usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ActivateKeyCoprocessorAlreadyResponded(_) => {
                    <ActivateKeyCoprocessorAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ActivateKeyRequestAlreadySent(_) => {
                    <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ActivateKeyRequiresKeygen(_) => {
                    <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ActivateKeyRequiresKskgen(_) => {
                    <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressEmptyCode(_) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CrsgenKmsNodeAlreadyResponded(_) => {
                    <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967InvalidImplementation(_) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967NonPayable(_) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedCall(_) => {
                    <FailedCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FheParamsAlreadyInitialized(_) => {
                    <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FheParamsNotInitialized(_) => {
                    <FheParamsNotInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KeygenKmsNodeAlreadyResponded(_) => {
                    <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KeygenPreprocessingRequired(_) => {
                    <KeygenPreprocessingRequired as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KeygenRequestAlreadySent(_) => {
                    <KeygenRequestAlreadySent as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenDestKeyNotGenerated(_) => {
                    <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenKmsNodeAlreadyResponded(_) => {
                    <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenPreprocessingRequired(_) => {
                    <KskgenPreprocessingRequired as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenRequestAlreadySent(_) => {
                    <KskgenRequestAlreadySent as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenSameSrcAndDestKeyIds(_) => {
                    <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenSourceKeyNotGenerated(_) => {
                    <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotGatewayOwner(_) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializingFromEmptyProxy(_) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PreprocessKeygenKmsNodeAlreadyResponded(_) => {
                    <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PreprocessKskgenKmsNodeAlreadyResponded(_) => {
                    <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnauthorizedCallContext(_) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnsupportedProxiableUUID(_) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<KmsManagementErrors>] = &[
                {
                    fn KskgenSourceKeyNotGenerated(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenSourceKeyNotGenerated)
                    }
                    KskgenSourceKeyNotGenerated
                },
                {
                    fn NotGatewayOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <NotGatewayOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::NotGatewayOwner)
                    }
                    NotGatewayOwner
                },
                {
                    fn KskgenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenKmsNodeAlreadyResponded)
                    }
                    KskgenKmsNodeAlreadyResponded
                },
                {
                    fn KeygenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KeygenKmsNodeAlreadyResponded)
                    }
                    KeygenKmsNodeAlreadyResponded
                },
                {
                    fn ActivateKeyRequestAlreadySent(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequestAlreadySent)
                    }
                    ActivateKeyRequestAlreadySent
                },
                {
                    fn KskgenDestKeyNotGenerated(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenDestKeyNotGenerated)
                    }
                    KskgenDestKeyNotGenerated
                },
                {
                    fn PreprocessKeygenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                KmsManagementErrors::PreprocessKeygenKmsNodeAlreadyResponded,
                            )
                    }
                    PreprocessKeygenKmsNodeAlreadyResponded
                },
                {
                    fn ActivateKeyCoprocessorAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyCoprocessorAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                KmsManagementErrors::ActivateKeyCoprocessorAlreadyResponded,
                            )
                    }
                    ActivateKeyCoprocessorAlreadyResponded
                },
                {
                    fn KskgenRequestAlreadySent(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenRequestAlreadySent)
                    }
                    KskgenRequestAlreadySent
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn KeygenRequestAlreadySent(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KeygenRequestAlreadySent)
                    }
                    KeygenRequestAlreadySent
                },
                {
                    fn NotInitializingFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::NotInitializingFromEmptyProxy)
                    }
                    NotInitializingFromEmptyProxy
                },
                {
                    fn PreprocessKskgenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                KmsManagementErrors::PreprocessKskgenKmsNodeAlreadyResponded,
                            )
                    }
                    PreprocessKskgenKmsNodeAlreadyResponded
                },
                {
                    fn FheParamsNotInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FheParamsNotInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::FheParamsNotInitialized)
                    }
                    FheParamsNotInitialized
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn FheParamsAlreadyInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::FheParamsAlreadyInitialized)
                    }
                    FheParamsAlreadyInitialized
                },
                {
                    fn KskgenPreprocessingRequired(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenPreprocessingRequired as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenPreprocessingRequired)
                    }
                    KskgenPreprocessingRequired
                },
                {
                    fn KeygenPreprocessingRequired(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenPreprocessingRequired as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KeygenPreprocessingRequired)
                    }
                    KeygenPreprocessingRequired
                },
                {
                    fn FailedCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(KmsManagementErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn KskgenSameSrcAndDestKeyIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenSameSrcAndDestKeyIds)
                    }
                    KskgenSameSrcAndDestKeyIds
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn ActivateKeyRequiresKeygen(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequiresKeygen)
                    }
                    ActivateKeyRequiresKeygen
                },
                {
                    fn ActivateKeyRequiresKskgen(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequiresKskgen)
                    }
                    ActivateKeyRequiresKskgen
                },
                {
                    fn CrsgenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::CrsgenKmsNodeAlreadyResponded)
                    }
                    CrsgenKmsNodeAlreadyResponded
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(KmsManagementErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<KmsManagementErrors>] = &[
                {
                    fn KskgenSourceKeyNotGenerated(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenSourceKeyNotGenerated)
                    }
                    KskgenSourceKeyNotGenerated
                },
                {
                    fn NotGatewayOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <NotGatewayOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::NotGatewayOwner)
                    }
                    NotGatewayOwner
                },
                {
                    fn KskgenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenKmsNodeAlreadyResponded)
                    }
                    KskgenKmsNodeAlreadyResponded
                },
                {
                    fn KeygenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KeygenKmsNodeAlreadyResponded)
                    }
                    KeygenKmsNodeAlreadyResponded
                },
                {
                    fn ActivateKeyRequestAlreadySent(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequestAlreadySent)
                    }
                    ActivateKeyRequestAlreadySent
                },
                {
                    fn KskgenDestKeyNotGenerated(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenDestKeyNotGenerated)
                    }
                    KskgenDestKeyNotGenerated
                },
                {
                    fn PreprocessKeygenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                KmsManagementErrors::PreprocessKeygenKmsNodeAlreadyResponded,
                            )
                    }
                    PreprocessKeygenKmsNodeAlreadyResponded
                },
                {
                    fn ActivateKeyCoprocessorAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyCoprocessorAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                KmsManagementErrors::ActivateKeyCoprocessorAlreadyResponded,
                            )
                    }
                    ActivateKeyCoprocessorAlreadyResponded
                },
                {
                    fn KskgenRequestAlreadySent(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenRequestAlreadySent)
                    }
                    KskgenRequestAlreadySent
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn KeygenRequestAlreadySent(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KeygenRequestAlreadySent)
                    }
                    KeygenRequestAlreadySent
                },
                {
                    fn NotInitializingFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::NotInitializingFromEmptyProxy)
                    }
                    NotInitializingFromEmptyProxy
                },
                {
                    fn PreprocessKskgenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                KmsManagementErrors::PreprocessKskgenKmsNodeAlreadyResponded,
                            )
                    }
                    PreprocessKskgenKmsNodeAlreadyResponded
                },
                {
                    fn FheParamsNotInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FheParamsNotInitialized as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::FheParamsNotInitialized)
                    }
                    FheParamsNotInitialized
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn FheParamsAlreadyInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::FheParamsAlreadyInitialized)
                    }
                    FheParamsAlreadyInitialized
                },
                {
                    fn KskgenPreprocessingRequired(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenPreprocessingRequired as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenPreprocessingRequired)
                    }
                    KskgenPreprocessingRequired
                },
                {
                    fn KeygenPreprocessingRequired(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenPreprocessingRequired as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KeygenPreprocessingRequired)
                    }
                    KeygenPreprocessingRequired
                },
                {
                    fn FailedCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn KskgenSameSrcAndDestKeyIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::KskgenSameSrcAndDestKeyIds)
                    }
                    KskgenSameSrcAndDestKeyIds
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn ActivateKeyRequiresKeygen(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequiresKeygen)
                    }
                    ActivateKeyRequiresKeygen
                },
                {
                    fn ActivateKeyRequiresKskgen(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequiresKskgen)
                    }
                    ActivateKeyRequiresKskgen
                },
                {
                    fn CrsgenKmsNodeAlreadyResponded(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::CrsgenKmsNodeAlreadyResponded)
                    }
                    CrsgenKmsNodeAlreadyResponded
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(KmsManagementErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ActivateKeyCoprocessorAlreadyResponded(inner) => {
                    <ActivateKeyCoprocessorAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ActivateKeyRequestAlreadySent(inner) => {
                    <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ActivateKeyRequiresKeygen(inner) => {
                    <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ActivateKeyRequiresKskgen(inner) => {
                    <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CrsgenKmsNodeAlreadyResponded(inner) => {
                    <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::FheParamsAlreadyInitialized(inner) => {
                    <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FheParamsNotInitialized(inner) => {
                    <FheParamsNotInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KeygenKmsNodeAlreadyResponded(inner) => {
                    <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KeygenPreprocessingRequired(inner) => {
                    <KeygenPreprocessingRequired as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KeygenRequestAlreadySent(inner) => {
                    <KeygenRequestAlreadySent as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenDestKeyNotGenerated(inner) => {
                    <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenKmsNodeAlreadyResponded(inner) => {
                    <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenPreprocessingRequired(inner) => {
                    <KskgenPreprocessingRequired as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenRequestAlreadySent(inner) => {
                    <KskgenRequestAlreadySent as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenSameSrcAndDestKeyIds(inner) => {
                    <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenSourceKeyNotGenerated(inner) => {
                    <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotGatewayOwner(inner) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializingFromEmptyProxy(inner) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PreprocessKeygenKmsNodeAlreadyResponded(inner) => {
                    <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PreprocessKskgenKmsNodeAlreadyResponded(inner) => {
                    <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ActivateKeyCoprocessorAlreadyResponded(inner) => {
                    <ActivateKeyCoprocessorAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ActivateKeyRequestAlreadySent(inner) => {
                    <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ActivateKeyRequiresKeygen(inner) => {
                    <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ActivateKeyRequiresKskgen(inner) => {
                    <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CrsgenKmsNodeAlreadyResponded(inner) => {
                    <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::FheParamsAlreadyInitialized(inner) => {
                    <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FheParamsNotInitialized(inner) => {
                    <FheParamsNotInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KeygenKmsNodeAlreadyResponded(inner) => {
                    <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KeygenPreprocessingRequired(inner) => {
                    <KeygenPreprocessingRequired as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KeygenRequestAlreadySent(inner) => {
                    <KeygenRequestAlreadySent as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenDestKeyNotGenerated(inner) => {
                    <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenKmsNodeAlreadyResponded(inner) => {
                    <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenPreprocessingRequired(inner) => {
                    <KskgenPreprocessingRequired as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenRequestAlreadySent(inner) => {
                    <KskgenRequestAlreadySent as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenSameSrcAndDestKeyIds(inner) => {
                    <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenSourceKeyNotGenerated(inner) => {
                    <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotGatewayOwner(inner) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializingFromEmptyProxy(inner) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PreprocessKeygenKmsNodeAlreadyResponded(inner) => {
                    <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PreprocessKskgenKmsNodeAlreadyResponded(inner) => {
                    <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`KmsManagement`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum KmsManagementEvents {
        #[allow(missing_docs)]
        ActivateKeyRequest(ActivateKeyRequest),
        #[allow(missing_docs)]
        ActivateKeyResponse(ActivateKeyResponse),
        #[allow(missing_docs)]
        AddFheParams(AddFheParams),
        #[allow(missing_docs)]
        CrsgenRequest(CrsgenRequest),
        #[allow(missing_docs)]
        CrsgenResponse(CrsgenResponse),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        KeygenRequest(KeygenRequest),
        #[allow(missing_docs)]
        KeygenResponse(KeygenResponse),
        #[allow(missing_docs)]
        KskgenRequest(KskgenRequest),
        #[allow(missing_docs)]
        KskgenResponse(KskgenResponse),
        #[allow(missing_docs)]
        PreprocessKeygenRequest(PreprocessKeygenRequest),
        #[allow(missing_docs)]
        PreprocessKeygenResponse(PreprocessKeygenResponse),
        #[allow(missing_docs)]
        PreprocessKskgenRequest(PreprocessKskgenRequest),
        #[allow(missing_docs)]
        PreprocessKskgenResponse(PreprocessKskgenResponse),
        #[allow(missing_docs)]
        UpdateFheParams(UpdateFheParams),
        #[allow(missing_docs)]
        Upgraded(Upgraded),
    }
    #[automatically_derived]
    impl KmsManagementEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                4u8, 247u8, 182u8, 174u8, 34u8, 46u8, 244u8, 114u8, 137u8, 207u8, 220u8,
                124u8, 59u8, 130u8, 152u8, 39u8, 62u8, 27u8, 201u8, 46u8, 235u8, 52u8,
                110u8, 128u8, 81u8, 99u8, 237u8, 75u8, 55u8, 231u8, 107u8, 41u8,
            ],
            [
                65u8, 135u8, 1u8, 30u8, 89u8, 23u8, 22u8, 148u8, 135u8, 46u8, 8u8, 179u8,
                211u8, 205u8, 211u8, 201u8, 1u8, 86u8, 122u8, 160u8, 227u8, 138u8, 170u8,
                109u8, 187u8, 67u8, 104u8, 131u8, 124u8, 30u8, 142u8, 52u8,
            ],
            [
                89u8, 109u8, 17u8, 30u8, 117u8, 18u8, 164u8, 126u8, 224u8, 197u8, 235u8,
                102u8, 238u8, 246u8, 242u8, 44u8, 69u8, 216u8, 173u8, 79u8, 238u8, 5u8,
                32u8, 52u8, 7u8, 133u8, 161u8, 30u8, 34u8, 30u8, 213u8, 18u8,
            ],
            [
                112u8, 102u8, 150u8, 51u8, 121u8, 240u8, 100u8, 138u8, 100u8, 117u8,
                134u8, 13u8, 228u8, 68u8, 122u8, 236u8, 11u8, 4u8, 192u8, 61u8, 181u8,
                188u8, 22u8, 155u8, 64u8, 28u8, 136u8, 209u8, 111u8, 246u8, 87u8, 141u8,
            ],
            [
                118u8, 134u8, 53u8, 69u8, 115u8, 92u8, 41u8, 207u8, 28u8, 126u8, 187u8,
                0u8, 40u8, 231u8, 52u8, 209u8, 215u8, 56u8, 210u8, 165u8, 208u8, 153u8,
                186u8, 139u8, 82u8, 156u8, 23u8, 147u8, 53u8, 74u8, 227u8, 18u8,
            ],
            [
                121u8, 100u8, 130u8, 214u8, 0u8, 9u8, 168u8, 3u8, 49u8, 82u8, 154u8,
                251u8, 72u8, 191u8, 52u8, 21u8, 161u8, 108u8, 159u8, 245u8, 57u8, 168u8,
                205u8, 19u8, 142u8, 119u8, 167u8, 69u8, 175u8, 108u8, 123u8, 120u8,
            ],
            [
                133u8, 17u8, 51u8, 122u8, 216u8, 156u8, 32u8, 239u8, 144u8, 79u8, 19u8,
                233u8, 185u8, 231u8, 235u8, 5u8, 244u8, 192u8, 255u8, 241u8, 40u8, 168u8,
                118u8, 12u8, 44u8, 29u8, 67u8, 108u8, 17u8, 27u8, 48u8, 159u8,
            ],
            [
                149u8, 193u8, 35u8, 174u8, 62u8, 99u8, 87u8, 50u8, 49u8, 96u8, 82u8,
                114u8, 102u8, 126u8, 20u8, 16u8, 169u8, 227u8, 198u8, 24u8, 34u8, 127u8,
                245u8, 9u8, 227u8, 198u8, 161u8, 82u8, 198u8, 100u8, 179u8, 162u8,
            ],
            [
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ],
            [
                188u8, 157u8, 121u8, 54u8, 109u8, 173u8, 107u8, 151u8, 45u8, 97u8, 227u8,
                241u8, 86u8, 126u8, 226u8, 241u8, 226u8, 76u8, 12u8, 225u8, 12u8, 114u8,
                220u8, 251u8, 20u8, 82u8, 238u8, 59u8, 53u8, 200u8, 209u8, 62u8,
            ],
            [
                189u8, 220u8, 22u8, 98u8, 205u8, 170u8, 135u8, 26u8, 228u8, 13u8, 158u8,
                220u8, 14u8, 67u8, 94u8, 9u8, 136u8, 198u8, 9u8, 91u8, 252u8, 124u8,
                69u8, 42u8, 237u8, 177u8, 108u8, 137u8, 96u8, 107u8, 107u8, 117u8,
            ],
            [
                198u8, 7u8, 209u8, 105u8, 88u8, 64u8, 206u8, 13u8, 201u8, 210u8, 74u8,
                84u8, 126u8, 218u8, 236u8, 72u8, 94u8, 1u8, 229u8, 147u8, 154u8, 84u8,
                12u8, 46u8, 76u8, 35u8, 227u8, 96u8, 226u8, 36u8, 55u8, 103u8,
            ],
            [
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ],
            [
                230u8, 61u8, 186u8, 20u8, 186u8, 33u8, 108u8, 67u8, 239u8, 189u8, 110u8,
                2u8, 6u8, 205u8, 33u8, 114u8, 164u8, 166u8, 79u8, 137u8, 76u8, 143u8,
                175u8, 0u8, 70u8, 145u8, 170u8, 111u8, 136u8, 254u8, 202u8, 218u8,
            ],
            [
                240u8, 187u8, 5u8, 237u8, 17u8, 177u8, 30u8, 154u8, 131u8, 219u8, 31u8,
                223u8, 219u8, 54u8, 76u8, 225u8, 87u8, 155u8, 27u8, 179u8, 77u8, 64u8,
                128u8, 182u8, 112u8, 181u8, 121u8, 70u8, 146u8, 7u8, 158u8, 61u8,
            ],
            [
                253u8, 104u8, 87u8, 64u8, 62u8, 173u8, 189u8, 192u8, 200u8, 182u8, 139u8,
                21u8, 27u8, 180u8, 106u8, 49u8, 214u8, 195u8, 82u8, 175u8, 121u8, 176u8,
                101u8, 212u8, 114u8, 203u8, 215u8, 119u8, 129u8, 81u8, 77u8, 212u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for KmsManagementEvents {
        const NAME: &'static str = "KmsManagementEvents";
        const COUNT: usize = 16usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ActivateKeyRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ActivateKeyRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ActivateKeyRequest)
                }
                Some(
                    <ActivateKeyResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ActivateKeyResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ActivateKeyResponse)
                }
                Some(<AddFheParams as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AddFheParams as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::AddFheParams)
                }
                Some(<CrsgenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CrsgenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CrsgenRequest)
                }
                Some(<CrsgenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CrsgenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CrsgenResponse)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::Initialized)
                }
                Some(<KeygenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeygenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::KeygenRequest)
                }
                Some(<KeygenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeygenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::KeygenResponse)
                }
                Some(<KskgenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KskgenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::KskgenRequest)
                }
                Some(<KskgenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KskgenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::KskgenResponse)
                }
                Some(
                    <PreprocessKeygenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreprocessKeygenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PreprocessKeygenRequest)
                }
                Some(
                    <PreprocessKeygenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreprocessKeygenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PreprocessKeygenResponse)
                }
                Some(
                    <PreprocessKskgenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreprocessKskgenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PreprocessKskgenRequest)
                }
                Some(
                    <PreprocessKskgenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreprocessKskgenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PreprocessKskgenResponse)
                }
                Some(<UpdateFheParams as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UpdateFheParams as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::UpdateFheParams)
                }
                Some(<Upgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Upgraded as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Upgraded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for KmsManagementEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateKeyRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ActivateKeyResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::AddFheParams(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CrsgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CrsgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KeygenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KeygenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KskgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KskgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreprocessKeygenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreprocessKeygenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreprocessKskgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreprocessKskgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UpdateFheParams(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateKeyRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ActivateKeyResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::AddFheParams(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CrsgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CrsgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KeygenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KeygenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KskgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KskgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreprocessKeygenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreprocessKeygenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreprocessKskgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreprocessKskgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UpdateFheParams(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`KmsManagement`](self) contract instance.

See the [wrapper's documentation](`KmsManagementInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> KmsManagementInstance<P, N> {
        KmsManagementInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<KmsManagementInstance<P, N>>,
    > {
        KmsManagementInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        KmsManagementInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`KmsManagement`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`KmsManagement`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct KmsManagementInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for KmsManagementInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("KmsManagementInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > KmsManagementInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`KmsManagement`](self) contract instance.

See the [wrapper's documentation](`KmsManagementInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<KmsManagementInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> KmsManagementInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> KmsManagementInstance<P, N> {
            KmsManagementInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > KmsManagementInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`UPGRADE_INTERFACE_VERSION`] function.
        pub fn UPGRADE_INTERFACE_VERSION(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, UPGRADE_INTERFACE_VERSIONCall, N> {
            self.call_builder(&UPGRADE_INTERFACE_VERSIONCall)
        }
        ///Creates a new call builder for the [`activateKeyRequest`] function.
        pub fn activateKeyRequest(
            &self,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, activateKeyRequestCall, N> {
            self.call_builder(&activateKeyRequestCall { keyId })
        }
        ///Creates a new call builder for the [`activateKeyResponse`] function.
        pub fn activateKeyResponse(
            &self,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, activateKeyResponseCall, N> {
            self.call_builder(&activateKeyResponseCall { keyId })
        }
        ///Creates a new call builder for the [`activatedKeyIds`] function.
        pub fn activatedKeyIds(
            &self,
            index: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, activatedKeyIdsCall, N> {
            self.call_builder(&activatedKeyIdsCall { index })
        }
        ///Creates a new call builder for the [`addFheParams`] function.
        pub fn addFheParams(
            &self,
            fheParamsName: alloy::sol_types::private::String,
            fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, addFheParamsCall, N> {
            self.call_builder(
                &addFheParamsCall {
                    fheParamsName,
                    fheParamsDigest,
                },
            )
        }
        ///Creates a new call builder for the [`crsFheParamsDigests`] function.
        pub fn crsFheParamsDigests(
            &self,
            crsId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, crsFheParamsDigestsCall, N> {
            self.call_builder(&crsFheParamsDigestsCall { crsId })
        }
        ///Creates a new call builder for the [`crsgenRequest`] function.
        pub fn crsgenRequest(
            &self,
            fheParamsName: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<&P, crsgenRequestCall, N> {
            self.call_builder(&crsgenRequestCall { fheParamsName })
        }
        ///Creates a new call builder for the [`crsgenResponse`] function.
        pub fn crsgenResponse(
            &self,
            crsgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
            crsId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, crsgenResponseCall, N> {
            self.call_builder(
                &crsgenResponseCall {
                    crsgenRequestId,
                    crsId,
                },
            )
        }
        ///Creates a new call builder for the [`fheParamsDigests`] function.
        pub fn fheParamsDigests(
            &self,
            fheParamsName: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<&P, fheParamsDigestsCall, N> {
            self.call_builder(
                &fheParamsDigestsCall {
                    fheParamsName,
                },
            )
        }
        ///Creates a new call builder for the [`getCurrentKeyId`] function.
        pub fn getCurrentKeyId(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getCurrentKeyIdCall, N> {
            self.call_builder(&getCurrentKeyIdCall)
        }
        ///Creates a new call builder for the [`getVersion`] function.
        pub fn getVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getVersionCall, N> {
            self.call_builder(&getVersionCall)
        }
        ///Creates a new call builder for the [`initializeFromEmptyProxy`] function.
        pub fn initializeFromEmptyProxy(
            &self,
            fheParamsName: alloy::sol_types::private::String,
            fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, initializeFromEmptyProxyCall, N> {
            self.call_builder(
                &initializeFromEmptyProxyCall {
                    fheParamsName,
                    fheParamsDigest,
                },
            )
        }
        ///Creates a new call builder for the [`keyFheParamsDigests`] function.
        pub fn keyFheParamsDigests(
            &self,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, keyFheParamsDigestsCall, N> {
            self.call_builder(&keyFheParamsDigestsCall { keyId })
        }
        ///Creates a new call builder for the [`keygenRequest`] function.
        pub fn keygenRequest(
            &self,
            preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, keygenRequestCall, N> {
            self.call_builder(&keygenRequestCall { preKeyId })
        }
        ///Creates a new call builder for the [`keygenResponse`] function.
        pub fn keygenResponse(
            &self,
            preKeyId: alloy::sol_types::private::primitives::aliases::U256,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, keygenResponseCall, N> {
            self.call_builder(
                &keygenResponseCall {
                    preKeyId,
                    keyId,
                },
            )
        }
        ///Creates a new call builder for the [`kskFheParamsDigests`] function.
        pub fn kskFheParamsDigests(
            &self,
            kskId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, kskFheParamsDigestsCall, N> {
            self.call_builder(&kskFheParamsDigestsCall { kskId })
        }
        ///Creates a new call builder for the [`kskgenRequest`] function.
        pub fn kskgenRequest(
            &self,
            preKskId: alloy::sol_types::private::primitives::aliases::U256,
            sourceKeyId: alloy::sol_types::private::primitives::aliases::U256,
            destKeyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, kskgenRequestCall, N> {
            self.call_builder(
                &kskgenRequestCall {
                    preKskId,
                    sourceKeyId,
                    destKeyId,
                },
            )
        }
        ///Creates a new call builder for the [`kskgenResponse`] function.
        pub fn kskgenResponse(
            &self,
            preKskId: alloy::sol_types::private::primitives::aliases::U256,
            kskId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, kskgenResponseCall, N> {
            self.call_builder(
                &kskgenResponseCall {
                    preKskId,
                    kskId,
                },
            )
        }
        ///Creates a new call builder for the [`preprocessKeygenRequest`] function.
        pub fn preprocessKeygenRequest(
            &self,
            fheParamsName: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<&P, preprocessKeygenRequestCall, N> {
            self.call_builder(
                &preprocessKeygenRequestCall {
                    fheParamsName,
                },
            )
        }
        ///Creates a new call builder for the [`preprocessKeygenResponse`] function.
        pub fn preprocessKeygenResponse(
            &self,
            preKeygenRequestId: alloy::sol_types::private::primitives::aliases::U256,
            preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, preprocessKeygenResponseCall, N> {
            self.call_builder(
                &preprocessKeygenResponseCall {
                    preKeygenRequestId,
                    preKeyId,
                },
            )
        }
        ///Creates a new call builder for the [`preprocessKskgenRequest`] function.
        pub fn preprocessKskgenRequest(
            &self,
            fheParamsName: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<&P, preprocessKskgenRequestCall, N> {
            self.call_builder(
                &preprocessKskgenRequestCall {
                    fheParamsName,
                },
            )
        }
        ///Creates a new call builder for the [`preprocessKskgenResponse`] function.
        pub fn preprocessKskgenResponse(
            &self,
            preKskgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
            preKskId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, preprocessKskgenResponseCall, N> {
            self.call_builder(
                &preprocessKskgenResponseCall {
                    preKskgenRequestId,
                    preKskId,
                },
            )
        }
        ///Creates a new call builder for the [`proxiableUUID`] function.
        pub fn proxiableUUID(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, proxiableUUIDCall, N> {
            self.call_builder(&proxiableUUIDCall)
        }
        ///Creates a new call builder for the [`updateFheParams`] function.
        pub fn updateFheParams(
            &self,
            fheParamsName: alloy::sol_types::private::String,
            fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, updateFheParamsCall, N> {
            self.call_builder(
                &updateFheParamsCall {
                    fheParamsName,
                    fheParamsDigest,
                },
            )
        }
        ///Creates a new call builder for the [`upgradeToAndCall`] function.
        pub fn upgradeToAndCall(
            &self,
            newImplementation: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, upgradeToAndCallCall, N> {
            self.call_builder(
                &upgradeToAndCallCall {
                    newImplementation,
                    data,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > KmsManagementInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ActivateKeyRequest`] event.
        pub fn ActivateKeyRequest_filter(
            &self,
        ) -> alloy_contract::Event<&P, ActivateKeyRequest, N> {
            self.event_filter::<ActivateKeyRequest>()
        }
        ///Creates a new event filter for the [`ActivateKeyResponse`] event.
        pub fn ActivateKeyResponse_filter(
            &self,
        ) -> alloy_contract::Event<&P, ActivateKeyResponse, N> {
            self.event_filter::<ActivateKeyResponse>()
        }
        ///Creates a new event filter for the [`AddFheParams`] event.
        pub fn AddFheParams_filter(&self) -> alloy_contract::Event<&P, AddFheParams, N> {
            self.event_filter::<AddFheParams>()
        }
        ///Creates a new event filter for the [`CrsgenRequest`] event.
        pub fn CrsgenRequest_filter(
            &self,
        ) -> alloy_contract::Event<&P, CrsgenRequest, N> {
            self.event_filter::<CrsgenRequest>()
        }
        ///Creates a new event filter for the [`CrsgenResponse`] event.
        pub fn CrsgenResponse_filter(
            &self,
        ) -> alloy_contract::Event<&P, CrsgenResponse, N> {
            self.event_filter::<CrsgenResponse>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(&self) -> alloy_contract::Event<&P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`KeygenRequest`] event.
        pub fn KeygenRequest_filter(
            &self,
        ) -> alloy_contract::Event<&P, KeygenRequest, N> {
            self.event_filter::<KeygenRequest>()
        }
        ///Creates a new event filter for the [`KeygenResponse`] event.
        pub fn KeygenResponse_filter(
            &self,
        ) -> alloy_contract::Event<&P, KeygenResponse, N> {
            self.event_filter::<KeygenResponse>()
        }
        ///Creates a new event filter for the [`KskgenRequest`] event.
        pub fn KskgenRequest_filter(
            &self,
        ) -> alloy_contract::Event<&P, KskgenRequest, N> {
            self.event_filter::<KskgenRequest>()
        }
        ///Creates a new event filter for the [`KskgenResponse`] event.
        pub fn KskgenResponse_filter(
            &self,
        ) -> alloy_contract::Event<&P, KskgenResponse, N> {
            self.event_filter::<KskgenResponse>()
        }
        ///Creates a new event filter for the [`PreprocessKeygenRequest`] event.
        pub fn PreprocessKeygenRequest_filter(
            &self,
        ) -> alloy_contract::Event<&P, PreprocessKeygenRequest, N> {
            self.event_filter::<PreprocessKeygenRequest>()
        }
        ///Creates a new event filter for the [`PreprocessKeygenResponse`] event.
        pub fn PreprocessKeygenResponse_filter(
            &self,
        ) -> alloy_contract::Event<&P, PreprocessKeygenResponse, N> {
            self.event_filter::<PreprocessKeygenResponse>()
        }
        ///Creates a new event filter for the [`PreprocessKskgenRequest`] event.
        pub fn PreprocessKskgenRequest_filter(
            &self,
        ) -> alloy_contract::Event<&P, PreprocessKskgenRequest, N> {
            self.event_filter::<PreprocessKskgenRequest>()
        }
        ///Creates a new event filter for the [`PreprocessKskgenResponse`] event.
        pub fn PreprocessKskgenResponse_filter(
            &self,
        ) -> alloy_contract::Event<&P, PreprocessKskgenResponse, N> {
            self.event_filter::<PreprocessKskgenResponse>()
        }
        ///Creates a new event filter for the [`UpdateFheParams`] event.
        pub fn UpdateFheParams_filter(
            &self,
        ) -> alloy_contract::Event<&P, UpdateFheParams, N> {
            self.event_filter::<UpdateFheParams>()
        }
        ///Creates a new event filter for the [`Upgraded`] event.
        pub fn Upgraded_filter(&self) -> alloy_contract::Event<&P, Upgraded, N> {
            self.event_filter::<Upgraded>()
        }
    }
}
