/**

Generated by the following Solidity interface...
```solidity
interface CoprocessorContexts {
    type ContextStatus is uint8;
    struct CoprocessorContext {
        uint256 contextId;
        uint256 previousContextId;
        bytes blob;
        CoprocessorV2[] coprocessors;
    }
    struct CoprocessorContextTimePeriods {
        uint256 preActivationTimePeriod;
        uint256 suspendedTimePeriod;
    }
    struct CoprocessorV2 {
        string name;
        address txSenderAddress;
        address signerAddress;
        string storageUrl;
    }

    error ActiveContextOngoing(uint256 activeContextId);
    error AddressEmptyCode(address target);
    error ContextAlreadyExists(uint256 contextId);
    error ContextDoesNotExist(uint256 contextId);
    error ContextIsActive(uint256 contextId);
    error ContextIsGenerating(uint256 contextId);
    error ContextNotActive(uint256 contextId);
    error ContextNotGenerated(uint256 contextId);
    error ContextNotPreActivatedOrSuspended(uint256 contextId);
    error ContextNotSuspended(uint256 contextId);
    error CoprocessorContextNotInitialized(uint256 contextId);
    error CoprocessorSignerAddressesNotUnique(address signerAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error CoprocessorTxSenderAddressesNotUnique(address txSenderAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error ERC1967InvalidImplementation(address implementation);
    error ERC1967NonPayable();
    error EmptyCoprocessors();
    error FailedCall();
    error HostChainNotRegistered(uint256 chainId);
    error InvalidContextStatusForceUpdate(uint256 contextId, ContextStatus status);
    error InvalidInitialization();
    error InvalidNullContextId();
    error NoActiveCoprocessorContext();
    error NoPreActivationCoprocessorContext();
    error NoSuspendedCoprocessorContext();
    error NotCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress);
    error NotCustodianSigner(address signerAddress);
    error NotCustodianTxSender(address txSenderAddress);
    error NotGatewayOwner(address sender);
    error NotInitializing();
    error NotInitializingFromEmptyProxy();
    error NotKmsSigner(address signerAddress);
    error NotKmsTxSender(address txSenderAddress);
    error NullCoprocessorSignerAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error NullCoprocessorTxSenderAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error PreActivationContextOngoing(uint256 preActivationContextId);
    error SuspendedContextOngoing(uint256 suspendedContextId);
    error UUPSUnauthorizedCallContext();
    error UUPSUnsupportedProxiableUUID(bytes32 slot);

    event ActivateCoprocessorContext(uint256 contextId);
    event CompromiseCoprocessorContext(uint256 contextId);
    event DeactivateCoprocessorContext(uint256 contextId);
    event DestroyCoprocessorContext(uint256 contextId);
    event InitializeCoprocessorContexts(bytes blob, CoprocessorV2[] coprocessors);
    event Initialized(uint64 version);
    event NewCoprocessorContext(CoprocessorContext activeCoprocessorContext, CoprocessorContext newCoprocessorContext, CoprocessorContextTimePeriods timePeriods);
    event PreActivateCoprocessorContext(CoprocessorContext newCoprocessorContext, uint256 activationBlockTimestamp);
    event SuspendCoprocessorContext(uint256 contextId, uint256 deactivatedBlockTimestamp);
    event Upgraded(address indexed implementation);

    constructor();

    function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
    function addCoprocessorContext(bytes memory blob, CoprocessorV2[] memory coprocessors, CoprocessorContextTimePeriods memory timePeriods) external;
    function forceUpdateCoprocessorContextToStatus(uint256 contextId, ContextStatus status) external;
    function getActiveCoprocessorContext() external view returns (CoprocessorContext memory);
    function getActiveCoprocessorContextId() external view returns (uint256);
    function getCoprocessor(uint256 contextId, address coprocessorTxSenderAddress) external view returns (CoprocessorV2 memory);
    function getCoprocessorActivationBlockTimestamp(uint256 contextId) external view returns (uint256);
    function getCoprocessorContextStatus(uint256 contextId) external view returns (ContextStatus);
    function getCoprocessorDeactivatedBlockTimestamp(uint256 contextId) external view returns (uint256);
    function getCoprocessorMajorityThreshold(uint256 contextId) external view returns (uint256);
    function getCoprocessorSigners(uint256 contextId) external view returns (address[] memory);
    function getCoprocessorTxSenders(uint256 contextId) external view returns (address[] memory);
    function getPreActivationCoprocessorContextId() external view returns (uint256);
    function getSuspendedCoprocessorContextId() external view returns (uint256);
    function getVersion() external pure returns (string memory);
    function initializeFromEmptyProxy(bytes memory initialBlob, CoprocessorV2[] memory initialCoprocessors) external;
    function isCoprocessorContextOperating(uint256 contextId) external view returns (bool);
    function isCoprocessorSigner(uint256 contextId, address signerAddress) external view returns (bool);
    function isCoprocessorTxSender(uint256 contextId, address txSenderAddress) external view returns (bool);
    function proxiableUUID() external view returns (bytes32);
    function refreshCoprocessorContextStatuses() external;
    function swapSuspendedCoprocessorContextWithActive(uint256 suspendedTimePeriod) external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "UPGRADE_INTERFACE_VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addCoprocessorContext",
    "inputs": [
      {
        "name": "blob",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      },
      {
        "name": "timePeriods",
        "type": "tuple",
        "internalType": "struct CoprocessorContextTimePeriods",
        "components": [
          {
            "name": "preActivationTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "suspendedTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "forceUpdateCoprocessorContextToStatus",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getActiveCoprocessorContext",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "blob",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessor",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct CoprocessorV2",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorActivationBlockTimestamp",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorContextStatus",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorDeactivatedBlockTimestamp",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorMajorityThreshold",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorSigners",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorTxSenders",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPreActivationCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSuspendedCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initializeFromEmptyProxy",
    "inputs": [
      {
        "name": "initialBlob",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "initialCoprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isCoprocessorContextOperating",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCoprocessorSigner",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isCoprocessorTxSender",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proxiableUUID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "refreshCoprocessorContextStatuses",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapSuspendedCoprocessorContextWithActive",
    "inputs": [
      {
        "name": "suspendedTimePeriod",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeToAndCall",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "ActivateCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CompromiseCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DeactivateCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DestroyCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "InitializeCoprocessorContexts",
    "inputs": [
      {
        "name": "blob",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "indexed": false,
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NewCoprocessorContext",
    "inputs": [
      {
        "name": "activeCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "blob",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "newCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "blob",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "timePeriods",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContextTimePeriods",
        "components": [
          {
            "name": "preActivationTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "suspendedTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreActivateCoprocessorContext",
    "inputs": [
      {
        "name": "newCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "blob",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "activationBlockTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SuspendCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "deactivatedBlockTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Upgraded",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "ActiveContextOngoing",
    "inputs": [
      {
        "name": "activeContextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "AddressEmptyCode",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextAlreadyExists",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextDoesNotExist",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextIsActive",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextIsGenerating",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotActive",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotGenerated",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotPreActivatedOrSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorContextNotInitialized",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorSignerAddressesNotUnique",
    "inputs": [
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorTxSenderAddressesNotUnique",
    "inputs": [
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967InvalidImplementation",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967NonPayable",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyCoprocessors",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "HostChainNotRegistered",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidContextStatusForceUpdate",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidNullContextId",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoActiveCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoPreActivationCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoSuspendedCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotCoprocessorFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotCustodianSigner",
    "inputs": [
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotCustodianTxSender",
    "inputs": [
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotGatewayOwner",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializingFromEmptyProxy",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotKmsSigner",
    "inputs": [
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotKmsTxSender",
    "inputs": [
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NullCoprocessorSignerAddress",
    "inputs": [
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "NullCoprocessorTxSenderAddress",
    "inputs": [
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "PreActivationContextOngoing",
    "inputs": [
      {
        "name": "preActivationContextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "SuspendedContextOngoing",
    "inputs": [
      {
        "name": "suspendedContextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "UUPSUnauthorizedCallContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UUPSUnsupportedProxiableUUID",
    "inputs": [
      {
        "name": "slot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod CoprocessorContexts {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801562000043575f80fd5b50620000546200005a60201b60201c565b620001c4565b5f6200006b6200015e60201b60201c565b9050805f0160089054906101000a900460ff1615620000b6576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146200015b5767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051620001529190620001a9565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f67ffffffffffffffff82169050919050565b620001a38162000185565b82525050565b5f602082019050620001be5f83018462000198565b92915050565b608051615587620001eb5f395f8181611fda0152818161202f01526122d101526155875ff3fe60806040526004361061013f575f3560e01c8063991dc36d116100b5578063cac6a5a81161006e578063cac6a5a814610465578063cd8e993c1461048d578063cdbb5a82146104c9578063ecfb0b9414610505578063f88174ea1461052d578063fed9716b146105695761013f565b8063991dc36d14610347578063a1364d7914610371578063a9b4d07114610399578063ad3cb1cc146103d5578063b3f5403a146103ff578063be91187b1461043b5761013f565b80634f1ef286116101075780634f1ef2861461022557806352d1902d14610241578063820a91f81461026b5780638625e876146102a757806386dfc7de146102e3578063888b99e01461030b5761013f565b8063049f25ef14610143578063086e4e1c1461017f5780630d8e6e2c146101a95780633a5162e6146101d357806341618fe9146101e9575b5f80fd5b34801561014e575f80fd5b5061016960048036038101906101649190613dc4565b610593565b6040516101769190613ed6565b60405180910390f35b34801561018a575f80fd5b5061019361063d565b6040516101a09190613f05565b60405180910390f35b3480156101b4575f80fd5b506101bd610689565b6040516101ca9190613fa8565b60405180910390f35b3480156101de575f80fd5b506101e7610704565b005b3480156101f4575f80fd5b5061020f600480360381019061020a9190613dc4565b610882565b60405161021c9190613ed6565b60405180910390f35b61023f600480360381019061023a919061411e565b61092c565b005b34801561024c575f80fd5b5061025561094b565b6040516102629190614190565b60405180910390f35b348015610276575f80fd5b50610291600480360381019061028c91906141a9565b61097c565b60405161029e9190614296565b60405180910390f35b3480156102b2575f80fd5b506102cd60048036038101906102c891906141a9565b610c9c565b6040516102da91906142d0565b60405180910390f35b3480156102ee575f80fd5b5061030960048036038101906103049190613dc4565b610d73565b005b348015610316575f80fd5b50610331600480360381019061032c9190613dc4565b610f2f565b60405161033e919061435c565b60405180910390f35b348015610352575f80fd5b5061035b610f4f565b6040516103689190613f05565b60405180910390f35b34801561037c575f80fd5b5061039760048036038101906103929190614449565b610f9b565b005b3480156103a4575f80fd5b506103bf60048036038101906103ba9190613dc4565b61119d565b6040516103cc9190613f05565b60405180910390f35b3480156103e0575f80fd5b506103e961122c565b6040516103f69190613fa8565b60405180910390f35b34801561040a575f80fd5b5061042560048036038101906104209190613dc4565b611265565b6040516104329190613f05565b60405180910390f35b348015610446575f80fd5b5061044f6112f4565b60405161045c9190613f05565b60405180910390f35b348015610470575f80fd5b5061048b600480360381019061048691906144fd565b611340565b005b348015610498575f80fd5b506104b360048036038101906104ae9190613dc4565b6116fe565b6040516104c091906142d0565b60405180910390f35b3480156104d4575f80fd5b506104ef60048036038101906104ea91906141a9565b611788565b6040516104fc91906142d0565b60405180910390f35b348015610510575f80fd5b5061052b6004803603810190610526919061453b565b61185f565b005b348015610538575f80fd5b50610553600480360381019061054e9190613dc4565b611a3c565b6040516105609190613f05565b60405180910390f35b348015610574575f80fd5b5061057d611add565b60405161058a91906147a3565b60405180910390f35b60605f61059e611de8565b905080600a015f8481526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561063057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105e7575b5050505050915050919050565b5f80610647611e0f565b90505f8103610682576040517f21fb08f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b60606040518060400160405280601381526020017f436f70726f636573736f72436f6e7465787473000000000000000000000000008152506106ca5f611e28565b6106d46001611e28565b6106dd5f611e28565b6040516020016106f09493929190614891565b604051602081830303815290604052905090565b5f61070d611de8565b90505f815f016002015490505f811415801561073c575081600d015f8281526020019081526020015f20544210155b15610806575f61074a610f4f565b90505f83600f015f8381526020019081526020015f20544261076c919061491c565b90508084600e015f8481526020019081526020015f2081905550610793845f018484611ef2565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc82826040516107c492919061494f565b60405180910390a17f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71836040516107fb9190613f05565b60405180910390a150505b5f61080f611e0f565b90505f8114158015610834575082600e015f8281526020019081526020015f20544210155b1561087d57610845835f0182611f0b565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898816040516108749190613f05565b60405180910390a15b505050565b60605f61088d611de8565b905080600c015f8481526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561091f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108d6575b5050505050915050919050565b610934611fd8565b61093d826120be565b61094782826121b1565b5050565b5f6109546122cf565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b610984613d08565b825f61098e611de8565b90505f816006015f8481526020019081526020015f205f0154036109e957816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016109e09190613f05565b60405180910390fd5b5f6109f2611de8565b90505f816008015f8881526020019081526020015f205f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f82018054610a5d906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a89906149a3565b8015610ad45780601f10610aab57610100808354040283529160200191610ad4565b820191905f5260205f20905b815481529060010190602001808311610ab757829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054610b97906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc3906149a3565b8015610c0e5780601f10610be557610100808354040283529160200191610c0e565b820191905f5260205f20905b815481529060010190602001808311610bf157829003601f168201915b50505050508152505090505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610c8f5786866040517fc312e73e000000000000000000000000000000000000000000000000000000008152600401610c869291906149e2565b60405180910390fd5b8094505050505092915050565b5f825f610ca7611de8565b90505f816006015f8481526020019081526020015f205f015403610d0257816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610cf99190613f05565b60405180910390fd5b5f610d0b611de8565b9050806009015f8781526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16935050505092915050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610df49190614a1d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6357336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401610e5a9190614a48565b60405180910390fd5b5f610e6c61063d565b90505f610e77612356565b90505f610e82611de8565b9050610e91815f018484611ef2565b5f8442610e9e919061491c565b90508082600e015f8581526020019081526020015f20819055507f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc8382604051610ee992919061494f565b60405180910390a17f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be7184604051610f209190613f05565b60405180910390a15050505050565b5f80610f39611de8565b9050610f47815f018461236f565b915050919050565b5f80610f59612356565b90505f8103610f94576040517f046593ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061101c9190614a1d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461108b57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016110829190614a48565b60405180910390fd5b5f611094611de8565b90505f61109f611add565b90505f6110b2825f015189898989612397565b90507fbbb104c495886e5daa3efb6b281ec2840c69385af5cbfc1582fcf700de1ecd4b8282866040516110e793929190614ab4565b60405180910390a16110fe835f01825f0151612e8f565b61110d835f01825f0151612ff4565b5f845f01354261111d919061491c565b90508084600d015f845f015181526020019081526020015f2081905550846020013584600f015f855f015181526020019081526020015f20819055507f0425f54e602cbcf87fafd6a0b557fa5c4bc4bc6c251686255eb3bd775f452377828260405161118a929190614af7565b60405180910390a1505050505050505050565b5f815f6111a8611de8565b90505f816006015f8481526020019081526020015f205f01540361120357816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016111fa9190613f05565b60405180910390fd5b5f61120c611de8565b905080600e015f8681526020019081526020015f20549350505050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f815f611270611de8565b90505f816006015f8481526020019081526020015f205f0154036112cb57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016112c29190613f05565b60405180910390fd5b5f6112d4611de8565b905080600d015f8681526020019081526020015f20549350505050919050565b5f806112fe6130ca565b90505f8103611339576040517fb9e861b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561139d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c19190614a1d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461143057336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016114279190614a48565b60405180910390fd5b815f61143a611de8565b90505f816006015f8481526020019081526020015f205f01540361149557816040517fabf9e7b000000000000000000000000000000000000000000000000000000000815260040161148c9190613f05565b60405180910390fd5b5f61149e611de8565b9050600360078111156114b4576114b36142e9565b5b8460078111156114c7576114c66142e9565b5b0361155a575f6114d5610f4f565b90506114e4825f018783611ef2565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc814260405161151592919061494f565b60405180910390a17f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be718660405161154c9190613f05565b60405180910390a1506116f7565b6005600781111561156e5761156d6142e9565b5b846007811115611581576115806142e9565b5b036115ce57611592815f0186611f0b565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898856040516115c19190613f05565b60405180910390a16116f6565b600660078111156115e2576115e16142e9565b5b8460078111156115f5576115f46142e9565b5b0361164257611606815f01866130e3565b7fee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf21856040516116359190613f05565b60405180910390a16116f5565b600780811115611655576116546142e9565b5b846007811115611668576116676142e9565b5b036116b557611679815f018661326e565b7ff20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be5856040516116a89190613f05565b60405180910390a16116f4565b84846040517ff0bed68f0000000000000000000000000000000000000000000000000000000081526004016116eb929190614b25565b60405180910390fd5b5b5b5b5050505050565b5f815f611709611de8565b90505f816006015f8481526020019081526020015f205f01540361176457816040517fabf9e7b000000000000000000000000000000000000000000000000000000000815260040161175b9190613f05565b60405180910390fd5b61176c610f4f565b84148061177f575061177c611e0f565b84145b92505050919050565b5f825f611793611de8565b90505f816006015f8481526020019081526020015f205f0154036117ee57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016117e59190613f05565b60405180910390fd5b5f6117f7611de8565b905080600b015f8781526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16935050505092915050565b60016118696133c2565b67ffffffffffffffff16146118aa576040517f6f4f731f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f6118b56133e6565b9050805f0160089054906101000a900460ff16806118fd57508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b15611934576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff0219169083151502179055505f6119875f88888888612397565b90505f611992611de8565b90506119a3815f01835f015161340d565b7fd474068ecf914caa04868493bcefa56bfb049a54f1612c2726d112e1e60663b9888888886040516119d89493929190614d94565b60405180910390a150505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d282604051611a2c9190614def565b60405180910390a1505050505050565b5f815f611a47611de8565b90505f816006015f8481526020019081526020015f205f015403611aa257816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401611a999190613f05565b60405180910390fd5b5f611aab611de8565b905060018082600a015f8881526020019081526020015f2080549050901c611ad3919061491c565b9350505050919050565b611ae5613d5a565b5f611aee610f4f565b90505f611af9611de8565b9050806006015f8381526020019081526020015f206040518060800160405290815f820154815260200160018201548152602001600282018054611b3c906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611b68906149a3565b8015611bb35780601f10611b8a57610100808354040283529160200191611bb3565b820191905f5260205f20905b815481529060010190602001808311611b9657829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020015f905b82821015611dd9578382905f5260205f2090600402016040518060800160405290815f82018054611c10906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3c906149a3565b8015611c875780601f10611c5e57610100808354040283529160200191611c87565b820191905f5260205f20905b815481529060010190602001808311611c6a57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054611d4a906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611d76906149a3565b8015611dc15780601f10611d9857610100808354040283529160200191611dc1565b820191905f5260205f20905b815481529060010190602001808311611da457829003601f168201915b50505050508152505081526020019060010190611be0565b50505050815250509250505090565b5f7f1da8a9a065a2f0a895c457065eddd3cf4a4d0d5340aaa0ca54d3cd5b4a6aaf00905090565b5f80611e19611de8565b9050805f016004015491505090565b60605f6001611e36846134db565b0190505f8167ffffffffffffffff811115611e5457611e53613ffa565b5b6040519080825280601f01601f191660200182016040528015611e865781602001600182028036833780820191505090505b5090505f82602001820190505b600115611ee7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611edc57611edb614e08565b5b0494505f8503611e93575b819350505050919050565b611efc838261362c565b611f068383613702565b505050565b805f8103611f45576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f4f838361385a565b611f9057816040517f77bf5846000000000000000000000000000000000000000000000000000000008152600401611f879190613f05565b60405180910390fd5b6005835f015f8481526020019081526020015f205f6101000a81548160ff02191690836007811115611fc557611fc46142e9565b5b02179055505f8360040181905550505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061208557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661206c6138a9565b73ffffffffffffffffffffffffffffffffffffffff1614155b156120bc576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061213f9190614a1d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121ae57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016121a59190614a48565b60405180910390fd5b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561221957506040513d601f19601f820116820180604052508101906122169190614e5f565b60015b61225a57816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016122519190614a48565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146122c057806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016122b79190614190565b60405180910390fd5b6122ca83836138fc565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612354576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f80612360611de8565b9050805f016003015491505090565b5f825f015f8381526020019081526020015f205f9054906101000a900460ff16905092915050565b61239f613d5a565b5f83839050036123db576040517f8af082ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6123e4611de8565b9050806007015f8154809291906123fa90614e8a565b91905055505f8160070154905080826006015f8381526020019081526020015f205f018190555087826006015f8381526020019081526020015f20600101819055508686836006015f8481526020019081526020015f206002019182612461929190615078565b505f5b85859050811015612b9b575f73ffffffffffffffffffffffffffffffffffffffff1686868381811061249957612498615145565b5b90506020028101906124ab919061517e565b60200160208101906124bd91906151a5565b73ffffffffffffffffffffffffffffffffffffffff1603612519578086866040517f9edb7861000000000000000000000000000000000000000000000000000000008152600401612510939291906151d0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1686868381811061254357612542615145565b5b9050602002810190612555919061517e565b604001602081019061256791906151a5565b73ffffffffffffffffffffffffffffffffffffffff16036125c3578086866040517f4a6c59740000000000000000000000000000000000000000000000000000000081526004016125ba939291906151d0565b60405180910390fd5b826009015f8381526020019081526020015f205f8787848181106125ea576125e9615145565b5b90506020028101906125fc919061517e565b602001602081019061260e91906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156126d25785858281811061266c5761266b615145565b5b905060200281019061267e919061517e565b602001602081019061269091906151a5565b8187876040517f64d527590000000000000000000000000000000000000000000000000000000081526004016126c99493929190615200565b60405180910390fd5b82600b015f8381526020019081526020015f205f8787848181106126f9576126f8615145565b5b905060200281019061270b919061517e565b604001602081019061271d91906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156127e15785858281811061277b5761277a615145565b5b905060200281019061278d919061517e565b604001602081019061279f91906151a5565b8187876040517fc826e1a20000000000000000000000000000000000000000000000000000000081526004016127d89493929190615200565b60405180910390fd5b826006015f8381526020019081526020015f2060030186868381811061280a57612809615145565b5b905060200281019061281c919061517e565b908060018154018082558091505060019003905f5260205f2090600402015f90919091909150818161284e9190615529565b505085858281811061286357612862615145565b5b9050602002810190612875919061517e565b836008015f8481526020019081526020015f205f88888581811061289c5761289b615145565b5b90506020028101906128ae919061517e565b60200160208101906128c091906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081816129059190615529565b9050506001836009015f8481526020019081526020015f205f88888581811061293157612930615145565b5b9050602002810190612943919061517e565b602001602081019061295591906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600a015f8381526020019081526020015f208686838181106129ca576129c9615145565b5b90506020028101906129dc919061517e565b60200160208101906129ee91906151a5565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183600b015f8481526020019081526020015f205f888885818110612a7457612a73615145565b5b9050602002810190612a86919061517e565b6040016020810190612a9891906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600c015f8381526020019081526020015f20868683818110612b0d57612b0c615145565b5b9050602002810190612b1f919061517e565b6040016020810190612b3191906151a5565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050612464565b50816006015f8281526020019081526020015f206040518060800160405290815f820154815260200160018201548152602001600282018054612bdd906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612c09906149a3565b8015612c545780601f10612c2b57610100808354040283529160200191612c54565b820191905f5260205f20905b815481529060010190602001808311612c3757829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020015f905b82821015612e7a578382905f5260205f2090600402016040518060800160405290815f82018054612cb1906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612cdd906149a3565b8015612d285780601f10612cff57610100808354040283529160200191612d28565b820191905f5260205f20905b815481529060010190602001808311612d0b57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054612deb906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612e17906149a3565b8015612e625780601f10612e3957610100808354040283529160200191612e62565b820191905f5260205f20905b815481529060010190602001808311612e4557829003601f168201915b50505050508152505081526020019060010190612c81565b50505050815250509250505095945050505050565b805f8103612ec9576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ed3838361396e565b612f1457816040517f6653f6d7000000000000000000000000000000000000000000000000000000008152600401612f0b9190613f05565b60405180910390fd5b5f836002015414612f605782600201546040517fc470c022000000000000000000000000000000000000000000000000000000008152600401612f579190613f05565b60405180910390fd5b5f836004015414612fac5782600401546040517f7022ec41000000000000000000000000000000000000000000000000000000008152600401612fa39190613f05565b60405180910390fd5b6001835f015f8481526020019081526020015f205f6101000a81548160ff02191690836007811115612fe157612fe06142e9565b5b0217905550818360010181905550505050565b805f810361302e576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61303883836139bc565b61307957816040517fc0b5ee660000000000000000000000000000000000000000000000000000000081526004016130709190613f05565b60405180910390fd5b6002835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156130ae576130ad6142e9565b5b02179055508183600201819055505f8360010181905550505050565b5f806130d4611de8565b9050805f016002015491505090565b805f810361311d576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282613129828261396e565b1561316b57806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016131629190613f05565b60405180910390fd5b61317585856139bc565b156131b757836040517f0ddd14ca0000000000000000000000000000000000000000000000000000000081526004016131ae9190613f05565b60405180910390fd5b6131c18585613a0b565b1561320357836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016131fa9190613f05565b60405180910390fd5b6006855f015f8681526020019081526020015f205f6101000a81548160ff02191690836007811115613238576132376142e9565b5b021790555083856002015403613252575f85600201819055505b83856004015403613267575f85600401819055505b5050505050565b805f81036132a8576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826132b4828261396e565b156132f657806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016132ed9190613f05565b60405180910390fd5b6133008585613a0b565b1561334257836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016133399190613f05565b60405180910390fd5b6007855f015f8681526020019081526020015f205f6101000a81548160ff02191690836007811115613377576133766142e9565b5b021790555083856001015403613391575f85600101819055505b838560020154036133a6575f85600201819055505b838560040154036133bb575f85600401819055505b5050505050565b5f6133cb6133e6565b5f015f9054906101000a900467ffffffffffffffff16905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b805f8103613447576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8360030154146134935782600301546040517f7eea432b00000000000000000000000000000000000000000000000000000000815260040161348a9190613f05565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156134c8576134c76142e9565b5b0217905550818360030181905550505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613537577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161352d5761352c614e08565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613574576d04ee2d6d415b85acef8100000000838161356a57613569614e08565b5b0492506020810190505b662386f26fc1000083106135a357662386f26fc10000838161359957613598614e08565b5b0492506010810190505b6305f5e10083106135cc576305f5e10083816135c2576135c1614e08565b5b0492506008810190505b61271083106135f15761271083816135e7576135e6614e08565b5b0492506004810190505b60648310613614576064838161360a57613609614e08565b5b0492506002810190505b600a8310613623576001810190505b80915050919050565b805f8103613666576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6136708383613a0b565b6136b157816040517f331486b30000000000000000000000000000000000000000000000000000000081526004016136a89190613f05565b60405180910390fd5b6004835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156136e6576136e56142e9565b5b02179055508183600401819055505f8360030181905550505050565b805f810361373c576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6137468383613a5a565b15801561375a5750613758838361385a565b155b1561379c57816040517f12b49e3d0000000000000000000000000000000000000000000000000000000081526004016137939190613f05565b60405180910390fd5b5f8360030154146137e85782600301546040517f7eea432b0000000000000000000000000000000000000000000000000000000081526004016137df9190613f05565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561381d5761381c6142e9565b5b021790555081836003018190555081836002015403613840575f83600201819055505b81836004015403613855575f83600401819055505b505050565b5f6004600781111561386f5761386e6142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff1660078111156138a05761389f6142e9565b5b14905092915050565b5f6138d57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613aa9565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61390582613ab2565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f815111156139615761395b8282613b7b565b5061396a565b613969613bfb565b5b5050565b5f806007811115613982576139816142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff1660078111156139b3576139b26142e9565b5b14905092915050565b5f600160078111156139d1576139d06142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613a0257613a016142e9565b5b14905092915050565b5f60036007811115613a2057613a1f6142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613a5157613a506142e9565b5b14905092915050565b5f60026007811115613a6f57613a6e6142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613aa057613a9f6142e9565b5b14905092915050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b03613b0d57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401613b049190614a48565b60405180910390fd5b80613b397f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613aa9565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff1684604051613ba49190615571565b5f60405180830381855af49150503d805f8114613bdc576040519150601f19603f3d011682016040523d82523d5f602084013e613be1565b606091505b5091509150613bf1858383613c37565b9250505092915050565b5f341115613c35576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606082613c4c57613c4782613cc4565b613cbc565b5f8251148015613c7257505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15613cb457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613cab9190614a48565b60405180910390fd5b819050613cbd565b5b9392505050565b5f81511115613cd65780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60405180608001604052805f81526020015f815260200160608152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b613da381613d91565b8114613dad575f80fd5b50565b5f81359050613dbe81613d9a565b92915050565b5f60208284031215613dd957613dd8613d89565b5b5f613de684828501613db0565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f613e4182613e18565b9050919050565b613e5181613e37565b82525050565b5f613e628383613e48565b60208301905092915050565b5f602082019050919050565b5f613e8482613def565b613e8e8185613df9565b9350613e9983613e09565b805f5b83811015613ec9578151613eb08882613e57565b9750613ebb83613e6e565b925050600181019050613e9c565b5085935050505092915050565b5f6020820190508181035f830152613eee8184613e7a565b905092915050565b613eff81613d91565b82525050565b5f602082019050613f185f830184613ef6565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613f55578082015181840152602081019050613f3a565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613f7a82613f1e565b613f848185613f28565b9350613f94818560208601613f38565b613f9d81613f60565b840191505092915050565b5f6020820190508181035f830152613fc08184613f70565b905092915050565b613fd181613e37565b8114613fdb575f80fd5b50565b5f81359050613fec81613fc8565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61403082613f60565b810181811067ffffffffffffffff8211171561404f5761404e613ffa565b5b80604052505050565b5f614061613d80565b905061406d8282614027565b919050565b5f67ffffffffffffffff82111561408c5761408b613ffa565b5b61409582613f60565b9050602081019050919050565b828183375f83830152505050565b5f6140c26140bd84614072565b614058565b9050828152602081018484840111156140de576140dd613ff6565b5b6140e98482856140a2565b509392505050565b5f82601f83011261410557614104613ff2565b5b81356141158482602086016140b0565b91505092915050565b5f806040838503121561413457614133613d89565b5b5f61414185828601613fde565b925050602083013567ffffffffffffffff81111561416257614161613d8d565b5b61416e858286016140f1565b9150509250929050565b5f819050919050565b61418a81614178565b82525050565b5f6020820190506141a35f830184614181565b92915050565b5f80604083850312156141bf576141be613d89565b5b5f6141cc85828601613db0565b92505060206141dd85828601613fde565b9150509250929050565b5f82825260208201905092915050565b5f61420182613f1e565b61420b81856141e7565b935061421b818560208601613f38565b61422481613f60565b840191505092915050565b5f608083015f8301518482035f86015261424982826141f7565b915050602083015161425e6020860182613e48565b5060408301516142716040860182613e48565b506060830151848203606086015261428982826141f7565b9150508091505092915050565b5f6020820190508181035f8301526142ae818461422f565b905092915050565b5f8115159050919050565b6142ca816142b6565b82525050565b5f6020820190506142e35f8301846142c1565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60088110614327576143266142e9565b5b50565b5f81905061433782614316565b919050565b5f6143468261432a565b9050919050565b6143568161433c565b82525050565b5f60208201905061436f5f83018461434d565b92915050565b5f80fd5b5f80fd5b5f8083601f84011261439257614391613ff2565b5b8235905067ffffffffffffffff8111156143af576143ae614375565b5b6020830191508360018202830111156143cb576143ca614379565b5b9250929050565b5f8083601f8401126143e7576143e6613ff2565b5b8235905067ffffffffffffffff81111561440457614403614375565b5b6020830191508360208202830111156144205761441f614379565b5b9250929050565b5f80fd5b5f604082840312156144405761443f614427565b5b81905092915050565b5f805f805f6080868803121561446257614461613d89565b5b5f86013567ffffffffffffffff81111561447f5761447e613d8d565b5b61448b8882890161437d565b9550955050602086013567ffffffffffffffff8111156144ae576144ad613d8d565b5b6144ba888289016143d2565b935093505060406144cd8882890161442b565b9150509295509295909350565b600881106144e6575f80fd5b50565b5f813590506144f7816144da565b92915050565b5f806040838503121561451357614512613d89565b5b5f61452085828601613db0565b9250506020614531858286016144e9565b9150509250929050565b5f805f806040858703121561455357614552613d89565b5b5f85013567ffffffffffffffff8111156145705761456f613d8d565b5b61457c8782880161437d565b9450945050602085013567ffffffffffffffff81111561459f5761459e613d8d565b5b6145ab878288016143d2565b925092505092959194509250565b6145c281613d91565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f6145ec826145c8565b6145f681856145d2565b9350614606818560208601613f38565b61460f81613f60565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f86015261465d82826141f7565b91505060208301516146726020860182613e48565b5060408301516146856040860182613e48565b506060830151848203606086015261469d82826141f7565b9150508091505092915050565b5f6146b58383614643565b905092915050565b5f602082019050919050565b5f6146d38261461a565b6146dd8185614624565b9350836020820285016146ef85614634565b805f5b8581101561472a578484038952815161470b85826146aa565b9450614716836146bd565b925060208a019950506001810190506146f2565b50829750879550505050505092915050565b5f608083015f8301516147515f8601826145b9565b50602083015161476460208601826145b9565b506040830151848203604086015261477c82826145e2565b9150506060830151848203606086015261479682826146c9565b9150508091505092915050565b5f6020820190508181035f8301526147bb818461473c565b905092915050565b5f81905092915050565b5f6147d782613f1e565b6147e181856147c3565b93506147f1818560208601613f38565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f6148316002836147c3565b915061483c826147fd565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f61487b6001836147c3565b915061488682614847565b600182019050919050565b5f61489c82876147cd565b91506148a782614825565b91506148b382866147cd565b91506148be8261486f565b91506148ca82856147cd565b91506148d58261486f565b91506148e182846147cd565b915081905095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61492682613d91565b915061493183613d91565b9250828201905080821115614949576149486148ef565b5b92915050565b5f6040820190506149625f830185613ef6565b61496f6020830184613ef6565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806149ba57607f821691505b6020821081036149cd576149cc614976565b5b50919050565b6149dc81613e37565b82525050565b5f6040820190506149f55f830185613ef6565b614a0260208301846149d3565b9392505050565b5f81519050614a1781613fc8565b92915050565b5f60208284031215614a3257614a31613d89565b5b5f614a3f84828501614a09565b91505092915050565b5f602082019050614a5b5f8301846149d3565b92915050565b5f614a6f6020840184613db0565b905092915050565b60408201614a875f830183614a61565b614a935f8501826145b9565b50614aa16020830183614a61565b614aae60208501826145b9565b50505050565b5f6080820190508181035f830152614acc818661473c565b90508181036020830152614ae0818561473c565b9050614aef6040830184614a77565b949350505050565b5f6040820190508181035f830152614b0f818561473c565b9050614b1e6020830184613ef6565b9392505050565b5f604082019050614b385f830185613ef6565b614b45602083018461434d565b9392505050565b5f82825260208201905092915050565b5f614b678385614b4c565b9350614b748385846140a2565b614b7d83613f60565b840190509392505050565b5f82825260208201905092915050565b5f819050919050565b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112614bc957614bc8614ba9565b5b83810192508235915060208301925067ffffffffffffffff821115614bf157614bf0614ba1565b5b600182023603831315614c0757614c06614ba5565b5b509250929050565b5f614c1a83856141e7565b9350614c278385846140a2565b614c3083613f60565b840190509392505050565b5f614c496020840184613fde565b905092915050565b5f60808301614c625f840184614bad565b8583035f870152614c74838284614c0f565b92505050614c856020840184614c3b565b614c926020860182613e48565b50614ca06040840184614c3b565b614cad6040860182613e48565b50614cbb6060840184614bad565b8583036060870152614cce838284614c0f565b925050508091505092915050565b5f614ce78383614c51565b905092915050565b5f82356001608003833603038112614d0a57614d09614ba9565b5b82810191505092915050565b5f602082019050919050565b5f614d2d8385614b88565b935083602084028501614d3f84614b98565b805f5b87811015614d82578484038952614d598284614cef565b614d638582614cdc565b9450614d6e83614d16565b925060208a01995050600181019050614d42565b50829750879450505050509392505050565b5f6040820190508181035f830152614dad818688614b5c565b90508181036020830152614dc2818486614d22565b905095945050505050565b5f67ffffffffffffffff82169050919050565b614de981614dcd565b82525050565b5f602082019050614e025f830184614de0565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b614e3e81614178565b8114614e48575f80fd5b50565b5f81519050614e5981614e35565b92915050565b5f60208284031215614e7457614e73613d89565b5b5f614e8184828501614e4b565b91505092915050565b5f614e9482613d91565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ec657614ec56148ef565b5b600182019050919050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302614f377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614efc565b614f418683614efc565b95508019841693508086168417925050509392505050565b5f819050919050565b5f614f7c614f77614f7284613d91565b614f59565b613d91565b9050919050565b5f819050919050565b614f9583614f62565b614fa9614fa182614f83565b848454614f08565b825550505050565b5f90565b614fbd614fb1565b614fc8818484614f8c565b505050565b5b81811015614feb57614fe05f82614fb5565b600181019050614fce565b5050565b601f8211156150305761500181614edb565b61500a84614eed565b81016020851015615019578190505b61502d61502585614eed565b830182614fcd565b50505b505050565b5f82821c905092915050565b5f6150505f1984600802615035565b1980831691505092915050565b5f6150688383615041565b9150826002028217905092915050565b6150828383614ed1565b67ffffffffffffffff81111561509b5761509a613ffa565b5b6150a582546149a3565b6150b0828285614fef565b5f601f8311600181146150dd575f84156150cb578287013590505b6150d5858261505d565b86555061513c565b601f1984166150eb86614edb565b5f5b82811015615112578489013582556001820191506020850194506020810190506150ed565b8683101561512f578489013561512b601f891682615041565b8355505b6001600288020188555050505b50505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f8235600160800383360303811261519957615198615172565b5b80830191505092915050565b5f602082840312156151ba576151b9613d89565b5b5f6151c784828501613fde565b91505092915050565b5f6040820190506151e35f830186613ef6565b81810360208301526151f6818486614d22565b9050949350505050565b5f6060820190506152135f8301876149d3565b6152206020830186613ef6565b8181036040830152615233818486614d22565b905095945050505050565b5f808335600160200384360303811261525a57615259615172565b5b80840192508235915067ffffffffffffffff82111561527c5761527b615176565b5b6020830192506001820236038313156152985761529761517a565b5b509250929050565b5f82905092915050565b5f819050815f5260205f209050919050565b601f8211156152fd576152ce816152aa565b6152d784614eed565b810160208510156152e6578190505b6152fa6152f285614eed565b830182614fcd565b50505b505050565b61530c83836152a0565b67ffffffffffffffff81111561532557615324613ffa565b5b61532f82546149a3565b61533a8282856152bc565b5f601f831160018114615367575f8415615355578287013590505b61535f858261505d565b8655506153c6565b601f198416615375866152aa565b5f5b8281101561539c57848901358255600182019150602085019450602081019050615377565b868310156153b957848901356153b5601f891682615041565b8355505b6001600288020188555050505b50505050505050565b6153da838383615302565b505050565b5f81356153eb81613fc8565b80915050919050565b5f815f1b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff61541e846153f4565b9350801983169250808416831791505092915050565b5f61544e61544961544484613e18565b614f59565b613e18565b9050919050565b5f61545f82615434565b9050919050565b5f61547082615455565b9050919050565b5f819050919050565b61548982615466565b61549c61549582615477565b83546153ff565b8255505050565b5f81015f83016154b3818561523e565b6154be8183866153cf565b505050506001810160208301806154d4816153df565b90506154e08184615480565b5050506002810160408301806154f5816153df565b90506155018184615480565b5050506003810160608301615516818561523e565b6155218183866153cf565b505050505050565b61553382826154a3565b5050565b5f81905092915050565b5f61554b826145c8565b6155558185615537565b9350615565818560208601613f38565b80840191505092915050565b5f61557c8284615541565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP4\x80\x15b\0\0CW_\x80\xFD[Pb\0\0Tb\0\0Z` \x1B` \x1CV[b\0\x01\xC4V[_b\0\0kb\0\x01^` \x1B` \x1CV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15b\0\0\xB6W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14b\0\x01[Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Qb\0\x01R\x91\x90b\0\x01\xA9V[`@Q\x80\x91\x03\x90\xA1[PV[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[b\0\x01\xA3\x81b\0\x01\x85V[\x82RPPV[_` \x82\x01\x90Pb\0\x01\xBE_\x83\x01\x84b\0\x01\x98V[\x92\x91PPV[`\x80QaU\x87b\0\x01\xEB_9_\x81\x81a\x1F\xDA\x01R\x81\x81a /\x01Ra\"\xD1\x01RaU\x87_\xF3\xFE`\x80`@R`\x046\x10a\x01?W_5`\xE0\x1C\x80c\x99\x1D\xC3m\x11a\0\xB5W\x80c\xCA\xC6\xA5\xA8\x11a\0nW\x80c\xCA\xC6\xA5\xA8\x14a\x04eW\x80c\xCD\x8E\x99<\x14a\x04\x8DW\x80c\xCD\xBBZ\x82\x14a\x04\xC9W\x80c\xEC\xFB\x0B\x94\x14a\x05\x05W\x80c\xF8\x81t\xEA\x14a\x05-W\x80c\xFE\xD9qk\x14a\x05iWa\x01?V[\x80c\x99\x1D\xC3m\x14a\x03GW\x80c\xA16My\x14a\x03qW\x80c\xA9\xB4\xD0q\x14a\x03\x99W\x80c\xAD<\xB1\xCC\x14a\x03\xD5W\x80c\xB3\xF5@:\x14a\x03\xFFW\x80c\xBE\x91\x18{\x14a\x04;Wa\x01?V[\x80cO\x1E\xF2\x86\x11a\x01\x07W\x80cO\x1E\xF2\x86\x14a\x02%W\x80cR\xD1\x90-\x14a\x02AW\x80c\x82\n\x91\xF8\x14a\x02kW\x80c\x86%\xE8v\x14a\x02\xA7W\x80c\x86\xDF\xC7\xDE\x14a\x02\xE3W\x80c\x88\x8B\x99\xE0\x14a\x03\x0BWa\x01?V[\x80c\x04\x9F%\xEF\x14a\x01CW\x80c\x08nN\x1C\x14a\x01\x7FW\x80c\r\x8En,\x14a\x01\xA9W\x80c:Qb\xE6\x14a\x01\xD3W\x80cAa\x8F\xE9\x14a\x01\xE9W[_\x80\xFD[4\x80\x15a\x01NW_\x80\xFD[Pa\x01i`\x04\x806\x03\x81\x01\x90a\x01d\x91\x90a=\xC4V[a\x05\x93V[`@Qa\x01v\x91\x90a>\xD6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x8AW_\x80\xFD[Pa\x01\x93a\x06=V[`@Qa\x01\xA0\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xB4W_\x80\xFD[Pa\x01\xBDa\x06\x89V[`@Qa\x01\xCA\x91\x90a?\xA8V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xDEW_\x80\xFD[Pa\x01\xE7a\x07\x04V[\0[4\x80\x15a\x01\xF4W_\x80\xFD[Pa\x02\x0F`\x04\x806\x03\x81\x01\x90a\x02\n\x91\x90a=\xC4V[a\x08\x82V[`@Qa\x02\x1C\x91\x90a>\xD6V[`@Q\x80\x91\x03\x90\xF3[a\x02?`\x04\x806\x03\x81\x01\x90a\x02:\x91\x90aA\x1EV[a\t,V[\0[4\x80\x15a\x02LW_\x80\xFD[Pa\x02Ua\tKV[`@Qa\x02b\x91\x90aA\x90V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02vW_\x80\xFD[Pa\x02\x91`\x04\x806\x03\x81\x01\x90a\x02\x8C\x91\x90aA\xA9V[a\t|V[`@Qa\x02\x9E\x91\x90aB\x96V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xB2W_\x80\xFD[Pa\x02\xCD`\x04\x806\x03\x81\x01\x90a\x02\xC8\x91\x90aA\xA9V[a\x0C\x9CV[`@Qa\x02\xDA\x91\x90aB\xD0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xEEW_\x80\xFD[Pa\x03\t`\x04\x806\x03\x81\x01\x90a\x03\x04\x91\x90a=\xC4V[a\rsV[\0[4\x80\x15a\x03\x16W_\x80\xFD[Pa\x031`\x04\x806\x03\x81\x01\x90a\x03,\x91\x90a=\xC4V[a\x0F/V[`@Qa\x03>\x91\x90aC\\V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03RW_\x80\xFD[Pa\x03[a\x0FOV[`@Qa\x03h\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03|W_\x80\xFD[Pa\x03\x97`\x04\x806\x03\x81\x01\x90a\x03\x92\x91\x90aDIV[a\x0F\x9BV[\0[4\x80\x15a\x03\xA4W_\x80\xFD[Pa\x03\xBF`\x04\x806\x03\x81\x01\x90a\x03\xBA\x91\x90a=\xC4V[a\x11\x9DV[`@Qa\x03\xCC\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xE0W_\x80\xFD[Pa\x03\xE9a\x12,V[`@Qa\x03\xF6\x91\x90a?\xA8V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\nW_\x80\xFD[Pa\x04%`\x04\x806\x03\x81\x01\x90a\x04 \x91\x90a=\xC4V[a\x12eV[`@Qa\x042\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04FW_\x80\xFD[Pa\x04Oa\x12\xF4V[`@Qa\x04\\\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04pW_\x80\xFD[Pa\x04\x8B`\x04\x806\x03\x81\x01\x90a\x04\x86\x91\x90aD\xFDV[a\x13@V[\0[4\x80\x15a\x04\x98W_\x80\xFD[Pa\x04\xB3`\x04\x806\x03\x81\x01\x90a\x04\xAE\x91\x90a=\xC4V[a\x16\xFEV[`@Qa\x04\xC0\x91\x90aB\xD0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xD4W_\x80\xFD[Pa\x04\xEF`\x04\x806\x03\x81\x01\x90a\x04\xEA\x91\x90aA\xA9V[a\x17\x88V[`@Qa\x04\xFC\x91\x90aB\xD0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\x10W_\x80\xFD[Pa\x05+`\x04\x806\x03\x81\x01\x90a\x05&\x91\x90aE;V[a\x18_V[\0[4\x80\x15a\x058W_\x80\xFD[Pa\x05S`\x04\x806\x03\x81\x01\x90a\x05N\x91\x90a=\xC4V[a\x1A<V[`@Qa\x05`\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05tW_\x80\xFD[Pa\x05}a\x1A\xDDV[`@Qa\x05\x8A\x91\x90aG\xA3V[`@Q\x80\x91\x03\x90\xF3[``_a\x05\x9Ea\x1D\xE8V[\x90P\x80`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x060W` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x05\xE7W[PPPPP\x91PP\x91\x90PV[_\x80a\x06Ga\x1E\x0FV[\x90P_\x81\x03a\x06\x82W`@Q\x7F!\xFB\x08\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[```@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FCoprocessorContexts\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x06\xCA_a\x1E(V[a\x06\xD4`\x01a\x1E(V[a\x06\xDD_a\x1E(V[`@Q` \x01a\x06\xF0\x94\x93\x92\x91\x90aH\x91V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[_a\x07\ra\x1D\xE8V[\x90P_\x81_\x01`\x02\x01T\x90P_\x81\x14\x15\x80\x15a\x07<WP\x81`\r\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\x08\x06W_a\x07Ja\x0FOV[\x90P_\x83`\x0F\x01_\x83\x81R` \x01\x90\x81R` \x01_ TBa\x07l\x91\x90aI\x1CV[\x90P\x80\x84`\x0E\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UPa\x07\x93\x84_\x01\x84\x84a\x1E\xF2V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x82\x82`@Qa\x07\xC4\x92\x91\x90aIOV[`@Q\x80\x91\x03\x90\xA1\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x83`@Qa\x07\xFB\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1PP[_a\x08\x0Fa\x1E\x0FV[\x90P_\x81\x14\x15\x80\x15a\x084WP\x82`\x0E\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\x08}Wa\x08E\x83_\x01\x82a\x1F\x0BV[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x81`@Qa\x08t\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1[PPPV[``_a\x08\x8Da\x1D\xE8V[\x90P\x80`\x0C\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\t\x1FW` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x08\xD6W[PPPPP\x91PP\x91\x90PV[a\t4a\x1F\xD8V[a\t=\x82a \xBEV[a\tG\x82\x82a!\xB1V[PPV[_a\tTa\"\xCFV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[a\t\x84a=\x08V[\x82_a\t\x8Ea\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\t\xE9W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\t\xE0\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\t\xF2a\x1D\xE8V[\x90P_\x81`\x08\x01_\x88\x81R` \x01\x90\x81R` \x01_ _\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\n]\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\n\x89\x90aI\xA3V[\x80\x15a\n\xD4W\x80`\x1F\x10a\n\xABWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\n\xD4V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\n\xB7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x0B\x97\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0B\xC3\x90aI\xA3V[\x80\x15a\x0C\x0EW\x80`\x1F\x10a\x0B\xE5Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0C\x0EV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0B\xF1W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x0C\x8FW\x86\x86`@Q\x7F\xC3\x12\xE7>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0C\x86\x92\x91\x90aI\xE2V[`@Q\x80\x91\x03\x90\xFD[\x80\x94PPPPP\x92\x91PPV[_\x82_a\x0C\xA7a\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\r\x02W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0C\xF9\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\r\x0Ba\x1D\xE8V[\x90P\x80`\t\x01_\x87\x81R` \x01\x90\x81R` \x01_ _\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x93PPPP\x92\x91PPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xD0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\xF4\x91\x90aJ\x1DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0EcW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0EZ\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[_a\x0Ela\x06=V[\x90P_a\x0Ewa#VV[\x90P_a\x0E\x82a\x1D\xE8V[\x90Pa\x0E\x91\x81_\x01\x84\x84a\x1E\xF2V[_\x84Ba\x0E\x9E\x91\x90aI\x1CV[\x90P\x80\x82`\x0E\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x83\x82`@Qa\x0E\xE9\x92\x91\x90aIOV[`@Q\x80\x91\x03\x90\xA1\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x84`@Qa\x0F \x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1PPPPPV[_\x80a\x0F9a\x1D\xE8V[\x90Pa\x0FG\x81_\x01\x84a#oV[\x91PP\x91\x90PV[_\x80a\x0FYa#VV[\x90P_\x81\x03a\x0F\x94W`@Q\x7F\x04e\x93\xEA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xF8W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\x1C\x91\x90aJ\x1DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x10\x8BW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x10\x82\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[_a\x10\x94a\x1D\xE8V[\x90P_a\x10\x9Fa\x1A\xDDV[\x90P_a\x10\xB2\x82_\x01Q\x89\x89\x89\x89a#\x97V[\x90P\x7F\xBB\xB1\x04\xC4\x95\x88n]\xAA>\xFBk(\x1E\xC2\x84\x0Ci8Z\xF5\xCB\xFC\x15\x82\xFC\xF7\0\xDE\x1E\xCDK\x82\x82\x86`@Qa\x10\xE7\x93\x92\x91\x90aJ\xB4V[`@Q\x80\x91\x03\x90\xA1a\x10\xFE\x83_\x01\x82_\x01Qa.\x8FV[a\x11\r\x83_\x01\x82_\x01Qa/\xF4V[_\x84_\x015Ba\x11\x1D\x91\x90aI\x1CV[\x90P\x80\x84`\r\x01_\x84_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x84` \x015\x84`\x0F\x01_\x85_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x04%\xF5N`,\xBC\xF8\x7F\xAF\xD6\xA0\xB5W\xFA\\K\xC4\xBCl%\x16\x86%^\xB3\xBDw_E#w\x82\x82`@Qa\x11\x8A\x92\x91\x90aJ\xF7V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPPV[_\x81_a\x11\xA8a\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x12\x03W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11\xFA\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x12\x0Ca\x1D\xE8V[\x90P\x80`\x0E\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[_\x81_a\x12pa\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x12\xCBW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x12\xC2\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x12\xD4a\x1D\xE8V[\x90P\x80`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[_\x80a\x12\xFEa0\xCAV[\x90P_\x81\x03a\x139W`@Q\x7F\xB9\xE8a\xB2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x13\x9DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13\xC1\x91\x90aJ\x1DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x140W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x14'\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[\x81_a\x14:a\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x14\x95W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x14\x8C\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x14\x9Ea\x1D\xE8V[\x90P`\x03`\x07\x81\x11\x15a\x14\xB4Wa\x14\xB3aB\xE9V[[\x84`\x07\x81\x11\x15a\x14\xC7Wa\x14\xC6aB\xE9V[[\x03a\x15ZW_a\x14\xD5a\x0FOV[\x90Pa\x14\xE4\x82_\x01\x87\x83a\x1E\xF2V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x81B`@Qa\x15\x15\x92\x91\x90aIOV[`@Q\x80\x91\x03\x90\xA1\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x86`@Qa\x15L\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1Pa\x16\xF7V[`\x05`\x07\x81\x11\x15a\x15nWa\x15maB\xE9V[[\x84`\x07\x81\x11\x15a\x15\x81Wa\x15\x80aB\xE9V[[\x03a\x15\xCEWa\x15\x92\x81_\x01\x86a\x1F\x0BV[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x85`@Qa\x15\xC1\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1a\x16\xF6V[`\x06`\x07\x81\x11\x15a\x15\xE2Wa\x15\xE1aB\xE9V[[\x84`\x07\x81\x11\x15a\x15\xF5Wa\x15\xF4aB\xE9V[[\x03a\x16BWa\x16\x06\x81_\x01\x86a0\xE3V[\x7F\xEE~\xF89cAq%\xD2t0x\x9F\xC6\xE9A\x948\x1E\x82\xC3\xCD\xA6\x82`\xD0\xE7\xCF\xC3\x1E\xAF!\x85`@Qa\x165\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1a\x16\xF5V[`\x07\x80\x81\x11\x15a\x16UWa\x16TaB\xE9V[[\x84`\x07\x81\x11\x15a\x16hWa\x16gaB\xE9V[[\x03a\x16\xB5Wa\x16y\x81_\x01\x86a2nV[\x7F\xF2\x0B)\x98\x04\xC9\xC1\xD6\xDA;\x82ALz\xA0\xA8E\xCD\xBA\xBA\xE2\xD9\x0EF\xE3`\xA3y\xA7{{\xE5\x85`@Qa\x16\xA8\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1a\x16\xF4V[\x84\x84`@Q\x7F\xF0\xBE\xD6\x8F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\xEB\x92\x91\x90aK%V[`@Q\x80\x91\x03\x90\xFD[[[[PPPPPV[_\x81_a\x17\ta\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x17dW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17[\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[a\x17la\x0FOV[\x84\x14\x80a\x17\x7FWPa\x17|a\x1E\x0FV[\x84\x14[\x92PPP\x91\x90PV[_\x82_a\x17\x93a\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x17\xEEW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17\xE5\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x17\xF7a\x1D\xE8V[\x90P\x80`\x0B\x01_\x87\x81R` \x01\x90\x81R` \x01_ _\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x93PPPP\x92\x91PPV[`\x01a\x18ia3\xC2V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x18\xAAW`@Q\x7FoOs\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_a\x18\xB5a3\xE6V[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\x18\xFDWP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\x194W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_a\x19\x87_\x88\x88\x88\x88a#\x97V[\x90P_a\x19\x92a\x1D\xE8V[\x90Pa\x19\xA3\x81_\x01\x83_\x01Qa4\rV[\x7F\xD4t\x06\x8E\xCF\x91L\xAA\x04\x86\x84\x93\xBC\xEF\xA5k\xFB\x04\x9AT\xF1a,'&\xD1\x12\xE1\xE6\x06c\xB9\x88\x88\x88\x88`@Qa\x19\xD8\x94\x93\x92\x91\x90aM\x94V[`@Q\x80\x91\x03\x90\xA1PP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x1A,\x91\x90aM\xEFV[`@Q\x80\x91\x03\x90\xA1PPPPPPV[_\x81_a\x1AGa\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x1A\xA2W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1A\x99\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x1A\xABa\x1D\xE8V[\x90P`\x01\x80\x82`\n\x01_\x88\x81R` \x01\x90\x81R` \x01_ \x80T\x90P\x90\x1Ca\x1A\xD3\x91\x90aI\x1CV[\x93PPPP\x91\x90PV[a\x1A\xE5a=ZV[_a\x1A\xEEa\x0FOV[\x90P_a\x1A\xF9a\x1D\xE8V[\x90P\x80`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01\x80Ta\x1B<\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1Bh\x90aI\xA3V[\x80\x15a\x1B\xB3W\x80`\x1F\x10a\x1B\x8AWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1B\xB3V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1B\x96W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a\x1D\xD9W\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x1C\x10\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1C<\x90aI\xA3V[\x80\x15a\x1C\x87W\x80`\x1F\x10a\x1C^Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1C\x87V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1CjW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x1DJ\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1Dv\x90aI\xA3V[\x80\x15a\x1D\xC1W\x80`\x1F\x10a\x1D\x98Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1D\xC1V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1D\xA4W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a\x1B\xE0V[PPPP\x81RPP\x92PPP\x90V[_\x7F\x1D\xA8\xA9\xA0e\xA2\xF0\xA8\x95\xC4W\x06^\xDD\xD3\xCFJM\rS@\xAA\xA0\xCAT\xD3\xCD[Jj\xAF\0\x90P\x90V[_\x80a\x1E\x19a\x1D\xE8V[\x90P\x80_\x01`\x04\x01T\x91PP\x90V[``_`\x01a\x1E6\x84a4\xDBV[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1ETWa\x1ESa?\xFAV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x1E\x86W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a\x1E\xE7W\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a\x1E\xDCWa\x1E\xDBaN\x08V[[\x04\x94P_\x85\x03a\x1E\x93W[\x81\x93PPPP\x91\x90PV[a\x1E\xFC\x83\x82a6,V[a\x1F\x06\x83\x83a7\x02V[PPPV[\x80_\x81\x03a\x1FEW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x1FO\x83\x83a8ZV[a\x1F\x90W\x81`@Q\x7Fw\xBFXF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1F\x87\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x05\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a\x1F\xC5Wa\x1F\xC4aB\xE9V[[\x02\x17\x90UP_\x83`\x04\x01\x81\x90UPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a \x85WP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a la8\xA9V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a \xBCW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a!\x1BW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a!?\x91\x90aJ\x1DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a!\xAEW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a!\xA5\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\"\x19WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\"\x16\x91\x90aN_V[`\x01[a\"ZW\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"Q\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a\"\xC0W\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\xB7\x91\x90aA\x90V[`@Q\x80\x91\x03\x90\xFD[a\"\xCA\x83\x83a8\xFCV[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a#TW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_\x80a#`a\x1D\xE8V[\x90P\x80_\x01`\x03\x01T\x91PP\x90V[_\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x92\x91PPV[a#\x9Fa=ZV[_\x83\x83\x90P\x03a#\xDBW`@Q\x7F\x8A\xF0\x82\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a#\xE4a\x1D\xE8V[\x90P\x80`\x07\x01_\x81T\x80\x92\x91\x90a#\xFA\x90aN\x8AV[\x91\x90PUP_\x81`\x07\x01T\x90P\x80\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x01\x81\x90UP\x87\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x01\x01\x81\x90UP\x86\x86\x83`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ `\x02\x01\x91\x82a$a\x92\x91\x90aPxV[P_[\x85\x85\x90P\x81\x10\x15a+\x9BW_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a$\x99Wa$\x98aQEV[[\x90P` \x02\x81\x01\x90a$\xAB\x91\x90aQ~V[` \x01` \x81\x01\x90a$\xBD\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a%\x19W\x80\x86\x86`@Q\x7F\x9E\xDBxa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\x10\x93\x92\x91\x90aQ\xD0V[`@Q\x80\x91\x03\x90\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a%CWa%BaQEV[[\x90P` \x02\x81\x01\x90a%U\x91\x90aQ~V[`@\x01` \x81\x01\x90a%g\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a%\xC3W\x80\x86\x86`@Q\x7FJlYt\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\xBA\x93\x92\x91\x90aQ\xD0V[`@Q\x80\x91\x03\x90\xFD[\x82`\t\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x87\x87\x84\x81\x81\x10a%\xEAWa%\xE9aQEV[[\x90P` \x02\x81\x01\x90a%\xFC\x91\x90aQ~V[` \x01` \x81\x01\x90a&\x0E\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a&\xD2W\x85\x85\x82\x81\x81\x10a&lWa&kaQEV[[\x90P` \x02\x81\x01\x90a&~\x91\x90aQ~V[` \x01` \x81\x01\x90a&\x90\x91\x90aQ\xA5V[\x81\x87\x87`@Q\x7Fd\xD5'Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a&\xC9\x94\x93\x92\x91\x90aR\0V[`@Q\x80\x91\x03\x90\xFD[\x82`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x87\x87\x84\x81\x81\x10a&\xF9Wa&\xF8aQEV[[\x90P` \x02\x81\x01\x90a'\x0B\x91\x90aQ~V[`@\x01` \x81\x01\x90a'\x1D\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a'\xE1W\x85\x85\x82\x81\x81\x10a'{Wa'zaQEV[[\x90P` \x02\x81\x01\x90a'\x8D\x91\x90aQ~V[`@\x01` \x81\x01\x90a'\x9F\x91\x90aQ\xA5V[\x81\x87\x87`@Q\x7F\xC8&\xE1\xA2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a'\xD8\x94\x93\x92\x91\x90aR\0V[`@Q\x80\x91\x03\x90\xFD[\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x03\x01\x86\x86\x83\x81\x81\x10a(\nWa(\taQEV[[\x90P` \x02\x81\x01\x90a(\x1C\x91\x90aQ~V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x90`\x04\x02\x01_\x90\x91\x90\x91\x90\x91P\x81\x81a(N\x91\x90aU)V[PP\x85\x85\x82\x81\x81\x10a(cWa(baQEV[[\x90P` \x02\x81\x01\x90a(u\x91\x90aQ~V[\x83`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a(\x9CWa(\x9BaQEV[[\x90P` \x02\x81\x01\x90a(\xAE\x91\x90aQ~V[` \x01` \x81\x01\x90a(\xC0\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x81a)\x05\x91\x90aU)V[\x90PP`\x01\x83`\t\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a)1Wa)0aQEV[[\x90P` \x02\x81\x01\x90a)C\x91\x90aQ~V[` \x01` \x81\x01\x90a)U\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\n\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a)\xCAWa)\xC9aQEV[[\x90P` \x02\x81\x01\x90a)\xDC\x91\x90aQ~V[` \x01` \x81\x01\x90a)\xEE\x91\x90aQ\xA5V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x83`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a*tWa*saQEV[[\x90P` \x02\x81\x01\x90a*\x86\x91\x90aQ~V[`@\x01` \x81\x01\x90a*\x98\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\x0C\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a+\rWa+\x0CaQEV[[\x90P` \x02\x81\x01\x90a+\x1F\x91\x90aQ~V[`@\x01` \x81\x01\x90a+1\x91\x90aQ\xA5V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa$dV[P\x81`\x06\x01_\x82\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01\x80Ta+\xDD\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta,\t\x90aI\xA3V[\x80\x15a,TW\x80`\x1F\x10a,+Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a,TV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a,7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a.zW\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta,\xB1\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta,\xDD\x90aI\xA3V[\x80\x15a-(W\x80`\x1F\x10a,\xFFWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a-(V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a-\x0BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta-\xEB\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta.\x17\x90aI\xA3V[\x80\x15a.bW\x80`\x1F\x10a.9Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a.bV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a.EW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a,\x81V[PPPP\x81RPP\x92PPP\x95\x94PPPPPV[\x80_\x81\x03a.\xC9W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a.\xD3\x83\x83a9nV[a/\x14W\x81`@Q\x7FfS\xF6\xD7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/\x0B\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x02\x01T\x14a/`W\x82`\x02\x01T`@Q\x7F\xC4p\xC0\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/W\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x04\x01T\x14a/\xACW\x82`\x04\x01T`@Q\x7Fp\"\xECA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/\xA3\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x01\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a/\xE1Wa/\xE0aB\xE9V[[\x02\x17\x90UP\x81\x83`\x01\x01\x81\x90UPPPPV[\x80_\x81\x03a0.W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a08\x83\x83a9\xBCV[a0yW\x81`@Q\x7F\xC0\xB5\xEEf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0p\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x02\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a0\xAEWa0\xADaB\xE9V[[\x02\x17\x90UP\x81\x83`\x02\x01\x81\x90UP_\x83`\x01\x01\x81\x90UPPPPV[_\x80a0\xD4a\x1D\xE8V[\x90P\x80_\x01`\x02\x01T\x91PP\x90V[\x80_\x81\x03a1\x1DW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a1)\x82\x82a9nV[\x15a1kW\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1b\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[a1u\x85\x85a9\xBCV[\x15a1\xB7W\x83`@Q\x7F\r\xDD\x14\xCA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1\xAE\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[a1\xC1\x85\x85a:\x0BV[\x15a2\x03W\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1\xFA\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x06\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a28Wa27aB\xE9V[[\x02\x17\x90UP\x83\x85`\x02\x01T\x03a2RW_\x85`\x02\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a2gW_\x85`\x04\x01\x81\x90UP[PPPPPV[\x80_\x81\x03a2\xA8W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a2\xB4\x82\x82a9nV[\x15a2\xF6W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a2\xED\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[a3\0\x85\x85a:\x0BV[\x15a3BW\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a39\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x07\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a3wWa3vaB\xE9V[[\x02\x17\x90UP\x83\x85`\x01\x01T\x03a3\x91W_\x85`\x01\x01\x81\x90UP[\x83\x85`\x02\x01T\x03a3\xA6W_\x85`\x02\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a3\xBBW_\x85`\x04\x01\x81\x90UP[PPPPPV[_a3\xCBa3\xE6V[_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[\x80_\x81\x03a4GW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83`\x03\x01T\x14a4\x93W\x82`\x03\x01T`@Q\x7F~\xEAC+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a4\x8A\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a4\xC8Wa4\xC7aB\xE9V[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UPPPPV[_\x80_\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a57Wz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a5-Wa5,aN\x08V[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a5tWm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a5jWa5iaN\x08V[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a5\xA3Wf#\x86\xF2o\xC1\0\0\x83\x81a5\x99Wa5\x98aN\x08V[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a5\xCCWc\x05\xF5\xE1\0\x83\x81a5\xC2Wa5\xC1aN\x08V[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a5\xF1Wa'\x10\x83\x81a5\xE7Wa5\xE6aN\x08V[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a6\x14W`d\x83\x81a6\nWa6\taN\x08V[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a6#W`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[\x80_\x81\x03a6fW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a6p\x83\x83a:\x0BV[a6\xB1W\x81`@Q\x7F3\x14\x86\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a6\xA8\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x04\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a6\xE6Wa6\xE5aB\xE9V[[\x02\x17\x90UP\x81\x83`\x04\x01\x81\x90UP_\x83`\x03\x01\x81\x90UPPPPV[\x80_\x81\x03a7<W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a7F\x83\x83a:ZV[\x15\x80\x15a7ZWPa7X\x83\x83a8ZV[\x15[\x15a7\x9CW\x81`@Q\x7F\x12\xB4\x9E=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a7\x93\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x03\x01T\x14a7\xE8W\x82`\x03\x01T`@Q\x7F~\xEAC+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a7\xDF\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a8\x1DWa8\x1CaB\xE9V[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UP\x81\x83`\x02\x01T\x03a8@W_\x83`\x02\x01\x81\x90UP[\x81\x83`\x04\x01T\x03a8UW_\x83`\x04\x01\x81\x90UP[PPPV[_`\x04`\x07\x81\x11\x15a8oWa8naB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a8\xA0Wa8\x9FaB\xE9V[[\x14\x90P\x92\x91PPV[_a8\xD5\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba:\xA9V[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a9\x05\x82a:\xB2V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a9aWa9[\x82\x82a;{V[Pa9jV[a9ia;\xFBV[[PPV[_\x80`\x07\x81\x11\x15a9\x82Wa9\x81aB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a9\xB3Wa9\xB2aB\xE9V[[\x14\x90P\x92\x91PPV[_`\x01`\x07\x81\x11\x15a9\xD1Wa9\xD0aB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a:\x02Wa:\x01aB\xE9V[[\x14\x90P\x92\x91PPV[_`\x03`\x07\x81\x11\x15a: Wa:\x1FaB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a:QWa:PaB\xE9V[[\x14\x90P\x92\x91PPV[_`\x02`\x07\x81\x11\x15a:oWa:naB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a:\xA0Wa:\x9FaB\xE9V[[\x14\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a;\rW\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a;\x04\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[\x80a;9\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba:\xA9V[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa;\xA4\x91\x90aUqV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a;\xDCW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a;\xE1V[``\x91P[P\x91P\x91Pa;\xF1\x85\x83\x83a<7V[\x92PPP\x92\x91PPV[_4\x11\x15a<5W`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[``\x82a<LWa<G\x82a<\xC4V[a<\xBCV[_\x82Q\x14\x80\x15a<rWP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a<\xB4W\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a<\xAB\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa<\xBDV[[\x93\x92PPPV[_\x81Q\x11\x15a<\xD6W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80`\x80\x01`@R\x80``\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01``\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80_\x81R` \x01_\x81R` \x01``\x81R` \x01``\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a=\xA3\x81a=\x91V[\x81\x14a=\xADW_\x80\xFD[PV[_\x815\x90Pa=\xBE\x81a=\x9AV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a=\xD9Wa=\xD8a=\x89V[[_a=\xE6\x84\x82\x85\x01a=\xB0V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a>A\x82a>\x18V[\x90P\x91\x90PV[a>Q\x81a>7V[\x82RPPV[_a>b\x83\x83a>HV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a>\x84\x82a=\xEFV[a>\x8E\x81\x85a=\xF9V[\x93Pa>\x99\x83a>\tV[\x80_[\x83\x81\x10\x15a>\xC9W\x81Qa>\xB0\x88\x82a>WV[\x97Pa>\xBB\x83a>nV[\x92PP`\x01\x81\x01\x90Pa>\x9CV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra>\xEE\x81\x84a>zV[\x90P\x92\x91PPV[a>\xFF\x81a=\x91V[\x82RPPV[_` \x82\x01\x90Pa?\x18_\x83\x01\x84a>\xF6V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a?UW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa?:V[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a?z\x82a?\x1EV[a?\x84\x81\x85a?(V[\x93Pa?\x94\x81\x85` \x86\x01a?8V[a?\x9D\x81a?`V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra?\xC0\x81\x84a?pV[\x90P\x92\x91PPV[a?\xD1\x81a>7V[\x81\x14a?\xDBW_\x80\xFD[PV[_\x815\x90Pa?\xEC\x81a?\xC8V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a@0\x82a?`V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a@OWa@Na?\xFAV[[\x80`@RPPPV[_a@aa=\x80V[\x90Pa@m\x82\x82a@'V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a@\x8CWa@\x8Ba?\xFAV[[a@\x95\x82a?`V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a@\xC2a@\xBD\x84a@rV[a@XV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a@\xDEWa@\xDDa?\xF6V[[a@\xE9\x84\x82\x85a@\xA2V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12aA\x05WaA\x04a?\xF2V[[\x815aA\x15\x84\x82` \x86\x01a@\xB0V[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aA4WaA3a=\x89V[[_aAA\x85\x82\x86\x01a?\xDEV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aAbWaAaa=\x8DV[[aAn\x85\x82\x86\x01a@\xF1V[\x91PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[aA\x8A\x81aAxV[\x82RPPV[_` \x82\x01\x90PaA\xA3_\x83\x01\x84aA\x81V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aA\xBFWaA\xBEa=\x89V[[_aA\xCC\x85\x82\x86\x01a=\xB0V[\x92PP` aA\xDD\x85\x82\x86\x01a?\xDEV[\x91PP\x92P\x92\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aB\x01\x82a?\x1EV[aB\x0B\x81\x85aA\xE7V[\x93PaB\x1B\x81\x85` \x86\x01a?8V[aB$\x81a?`V[\x84\x01\x91PP\x92\x91PPV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaBI\x82\x82aA\xF7V[\x91PP` \x83\x01QaB^` \x86\x01\x82a>HV[P`@\x83\x01QaBq`@\x86\x01\x82a>HV[P``\x83\x01Q\x84\x82\x03``\x86\x01RaB\x89\x82\x82aA\xF7V[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaB\xAE\x81\x84aB/V[\x90P\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[aB\xCA\x81aB\xB6V[\x82RPPV[_` \x82\x01\x90PaB\xE3_\x83\x01\x84aB\xC1V[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`!`\x04R`$_\xFD[`\x08\x81\x10aC'WaC&aB\xE9V[[PV[_\x81\x90PaC7\x82aC\x16V[\x91\x90PV[_aCF\x82aC*V[\x90P\x91\x90PV[aCV\x81aC<V[\x82RPPV[_` \x82\x01\x90PaCo_\x83\x01\x84aCMV[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12aC\x92WaC\x91a?\xF2V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aC\xAFWaC\xAEaCuV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15aC\xCBWaC\xCAaCyV[[\x92P\x92\x90PV[_\x80\x83`\x1F\x84\x01\x12aC\xE7WaC\xE6a?\xF2V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aD\x04WaD\x03aCuV[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15aD WaD\x1FaCyV[[\x92P\x92\x90PV[_\x80\xFD[_`@\x82\x84\x03\x12\x15aD@WaD?aD'V[[\x81\x90P\x92\x91PPV[_\x80_\x80_`\x80\x86\x88\x03\x12\x15aDbWaDaa=\x89V[[_\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aD\x7FWaD~a=\x8DV[[aD\x8B\x88\x82\x89\x01aC}V[\x95P\x95PP` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aD\xAEWaD\xADa=\x8DV[[aD\xBA\x88\x82\x89\x01aC\xD2V[\x93P\x93PP`@aD\xCD\x88\x82\x89\x01aD+V[\x91PP\x92\x95P\x92\x95\x90\x93PV[`\x08\x81\x10aD\xE6W_\x80\xFD[PV[_\x815\x90PaD\xF7\x81aD\xDAV[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aE\x13WaE\x12a=\x89V[[_aE \x85\x82\x86\x01a=\xB0V[\x92PP` aE1\x85\x82\x86\x01aD\xE9V[\x91PP\x92P\x92\x90PV[_\x80_\x80`@\x85\x87\x03\x12\x15aESWaERa=\x89V[[_\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aEpWaEoa=\x8DV[[aE|\x87\x82\x88\x01aC}V[\x94P\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aE\x9FWaE\x9Ea=\x8DV[[aE\xAB\x87\x82\x88\x01aC\xD2V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[aE\xC2\x81a=\x91V[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aE\xEC\x82aE\xC8V[aE\xF6\x81\x85aE\xD2V[\x93PaF\x06\x81\x85` \x86\x01a?8V[aF\x0F\x81a?`V[\x84\x01\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaF]\x82\x82aA\xF7V[\x91PP` \x83\x01QaFr` \x86\x01\x82a>HV[P`@\x83\x01QaF\x85`@\x86\x01\x82a>HV[P``\x83\x01Q\x84\x82\x03``\x86\x01RaF\x9D\x82\x82aA\xF7V[\x91PP\x80\x91PP\x92\x91PPV[_aF\xB5\x83\x83aFCV[\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aF\xD3\x82aF\x1AV[aF\xDD\x81\x85aF$V[\x93P\x83` \x82\x02\x85\x01aF\xEF\x85aF4V[\x80_[\x85\x81\x10\x15aG*W\x84\x84\x03\x89R\x81QaG\x0B\x85\x82aF\xAAV[\x94PaG\x16\x83aF\xBDV[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaF\xF2V[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[_`\x80\x83\x01_\x83\x01QaGQ_\x86\x01\x82aE\xB9V[P` \x83\x01QaGd` \x86\x01\x82aE\xB9V[P`@\x83\x01Q\x84\x82\x03`@\x86\x01RaG|\x82\x82aE\xE2V[\x91PP``\x83\x01Q\x84\x82\x03``\x86\x01RaG\x96\x82\x82aF\xC9V[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaG\xBB\x81\x84aG<V[\x90P\x92\x91PPV[_\x81\x90P\x92\x91PPV[_aG\xD7\x82a?\x1EV[aG\xE1\x81\x85aG\xC3V[\x93PaG\xF1\x81\x85` \x86\x01a?8V[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aH1`\x02\x83aG\xC3V[\x91PaH<\x82aG\xFDV[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aH{`\x01\x83aG\xC3V[\x91PaH\x86\x82aHGV[`\x01\x82\x01\x90P\x91\x90PV[_aH\x9C\x82\x87aG\xCDV[\x91PaH\xA7\x82aH%V[\x91PaH\xB3\x82\x86aG\xCDV[\x91PaH\xBE\x82aHoV[\x91PaH\xCA\x82\x85aG\xCDV[\x91PaH\xD5\x82aHoV[\x91PaH\xE1\x82\x84aG\xCDV[\x91P\x81\x90P\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_aI&\x82a=\x91V[\x91PaI1\x83a=\x91V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15aIIWaIHaH\xEFV[[\x92\x91PPV[_`@\x82\x01\x90PaIb_\x83\x01\x85a>\xF6V[aIo` \x83\x01\x84a>\xF6V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80aI\xBAW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03aI\xCDWaI\xCCaIvV[[P\x91\x90PV[aI\xDC\x81a>7V[\x82RPPV[_`@\x82\x01\x90PaI\xF5_\x83\x01\x85a>\xF6V[aJ\x02` \x83\x01\x84aI\xD3V[\x93\x92PPPV[_\x81Q\x90PaJ\x17\x81a?\xC8V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aJ2WaJ1a=\x89V[[_aJ?\x84\x82\x85\x01aJ\tV[\x91PP\x92\x91PPV[_` \x82\x01\x90PaJ[_\x83\x01\x84aI\xD3V[\x92\x91PPV[_aJo` \x84\x01\x84a=\xB0V[\x90P\x92\x91PPV[`@\x82\x01aJ\x87_\x83\x01\x83aJaV[aJ\x93_\x85\x01\x82aE\xB9V[PaJ\xA1` \x83\x01\x83aJaV[aJ\xAE` \x85\x01\x82aE\xB9V[PPPPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01RaJ\xCC\x81\x86aG<V[\x90P\x81\x81\x03` \x83\x01RaJ\xE0\x81\x85aG<V[\x90PaJ\xEF`@\x83\x01\x84aJwV[\x94\x93PPPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01RaK\x0F\x81\x85aG<V[\x90PaK\x1E` \x83\x01\x84a>\xF6V[\x93\x92PPPV[_`@\x82\x01\x90PaK8_\x83\x01\x85a>\xF6V[aKE` \x83\x01\x84aCMV[\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aKg\x83\x85aKLV[\x93PaKt\x83\x85\x84a@\xA2V[aK}\x83a?`V[\x84\x01\x90P\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aK\xC9WaK\xC8aK\xA9V[[\x83\x81\x01\x92P\x825\x91P` \x83\x01\x92Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aK\xF1WaK\xF0aK\xA1V[[`\x01\x82\x026\x03\x83\x13\x15aL\x07WaL\x06aK\xA5V[[P\x92P\x92\x90PV[_aL\x1A\x83\x85aA\xE7V[\x93PaL'\x83\x85\x84a@\xA2V[aL0\x83a?`V[\x84\x01\x90P\x93\x92PPPV[_aLI` \x84\x01\x84a?\xDEV[\x90P\x92\x91PPV[_`\x80\x83\x01aLb_\x84\x01\x84aK\xADV[\x85\x83\x03_\x87\x01RaLt\x83\x82\x84aL\x0FV[\x92PPPaL\x85` \x84\x01\x84aL;V[aL\x92` \x86\x01\x82a>HV[PaL\xA0`@\x84\x01\x84aL;V[aL\xAD`@\x86\x01\x82a>HV[PaL\xBB``\x84\x01\x84aK\xADV[\x85\x83\x03``\x87\x01RaL\xCE\x83\x82\x84aL\x0FV[\x92PPP\x80\x91PP\x92\x91PPV[_aL\xE7\x83\x83aLQV[\x90P\x92\x91PPV[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aM\nWaM\taK\xA9V[[\x82\x81\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aM-\x83\x85aK\x88V[\x93P\x83` \x84\x02\x85\x01aM?\x84aK\x98V[\x80_[\x87\x81\x10\x15aM\x82W\x84\x84\x03\x89RaMY\x82\x84aL\xEFV[aMc\x85\x82aL\xDCV[\x94PaMn\x83aM\x16V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaMBV[P\x82\x97P\x87\x94PPPPP\x93\x92PPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01RaM\xAD\x81\x86\x88aK\\V[\x90P\x81\x81\x03` \x83\x01RaM\xC2\x81\x84\x86aM\"V[\x90P\x95\x94PPPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[aM\xE9\x81aM\xCDV[\x82RPPV[_` \x82\x01\x90PaN\x02_\x83\x01\x84aM\xE0V[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[aN>\x81aAxV[\x81\x14aNHW_\x80\xFD[PV[_\x81Q\x90PaNY\x81aN5V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aNtWaNsa=\x89V[[_aN\x81\x84\x82\x85\x01aNKV[\x91PP\x92\x91PPV[_aN\x94\x82a=\x91V[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03aN\xC6WaN\xC5aH\xEFV[[`\x01\x82\x01\x90P\x91\x90PV[_\x82\x90P\x92\x91PPV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[_` `\x1F\x83\x01\x04\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_`\x08\x83\x02aO7\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82aN\xFCV[aOA\x86\x83aN\xFCV[\x95P\x80\x19\x84\x16\x93P\x80\x86\x16\x84\x17\x92PPP\x93\x92PPPV[_\x81\x90P\x91\x90PV[_aO|aOwaOr\x84a=\x91V[aOYV[a=\x91V[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aO\x95\x83aObV[aO\xA9aO\xA1\x82aO\x83V[\x84\x84TaO\x08V[\x82UPPPPV[_\x90V[aO\xBDaO\xB1V[aO\xC8\x81\x84\x84aO\x8CV[PPPV[[\x81\x81\x10\x15aO\xEBWaO\xE0_\x82aO\xB5V[`\x01\x81\x01\x90PaO\xCEV[PPV[`\x1F\x82\x11\x15aP0WaP\x01\x81aN\xDBV[aP\n\x84aN\xEDV[\x81\x01` \x85\x10\x15aP\x19W\x81\x90P[aP-aP%\x85aN\xEDV[\x83\x01\x82aO\xCDV[PP[PPPV[_\x82\x82\x1C\x90P\x92\x91PPV[_aPP_\x19\x84`\x08\x02aP5V[\x19\x80\x83\x16\x91PP\x92\x91PPV[_aPh\x83\x83aPAV[\x91P\x82`\x02\x02\x82\x17\x90P\x92\x91PPV[aP\x82\x83\x83aN\xD1V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aP\x9BWaP\x9Aa?\xFAV[[aP\xA5\x82TaI\xA3V[aP\xB0\x82\x82\x85aO\xEFV[_`\x1F\x83\x11`\x01\x81\x14aP\xDDW_\x84\x15aP\xCBW\x82\x87\x015\x90P[aP\xD5\x85\x82aP]V[\x86UPaQ<V[`\x1F\x19\x84\x16aP\xEB\x86aN\xDBV[_[\x82\x81\x10\x15aQ\x12W\x84\x89\x015\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90PaP\xEDV[\x86\x83\x10\x15aQ/W\x84\x89\x015aQ+`\x1F\x89\x16\x82aPAV[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aQ\x99WaQ\x98aQrV[[\x80\x83\x01\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15aQ\xBAWaQ\xB9a=\x89V[[_aQ\xC7\x84\x82\x85\x01a?\xDEV[\x91PP\x92\x91PPV[_`@\x82\x01\x90PaQ\xE3_\x83\x01\x86a>\xF6V[\x81\x81\x03` \x83\x01RaQ\xF6\x81\x84\x86aM\"V[\x90P\x94\x93PPPPV[_``\x82\x01\x90PaR\x13_\x83\x01\x87aI\xD3V[aR ` \x83\x01\x86a>\xF6V[\x81\x81\x03`@\x83\x01RaR3\x81\x84\x86aM\"V[\x90P\x95\x94PPPPPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aRZWaRYaQrV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aR|WaR{aQvV[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15aR\x98WaR\x97aQzV[[P\x92P\x92\x90PV[_\x82\x90P\x92\x91PPV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[`\x1F\x82\x11\x15aR\xFDWaR\xCE\x81aR\xAAV[aR\xD7\x84aN\xEDV[\x81\x01` \x85\x10\x15aR\xE6W\x81\x90P[aR\xFAaR\xF2\x85aN\xEDV[\x83\x01\x82aO\xCDV[PP[PPPV[aS\x0C\x83\x83aR\xA0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aS%WaS$a?\xFAV[[aS/\x82TaI\xA3V[aS:\x82\x82\x85aR\xBCV[_`\x1F\x83\x11`\x01\x81\x14aSgW_\x84\x15aSUW\x82\x87\x015\x90P[aS_\x85\x82aP]V[\x86UPaS\xC6V[`\x1F\x19\x84\x16aSu\x86aR\xAAV[_[\x82\x81\x10\x15aS\x9CW\x84\x89\x015\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90PaSwV[\x86\x83\x10\x15aS\xB9W\x84\x89\x015aS\xB5`\x1F\x89\x16\x82aPAV[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPPV[aS\xDA\x83\x83\x83aS\x02V[PPPV[_\x815aS\xEB\x81a?\xC8V[\x80\x91PP\x91\x90PV[_\x81_\x1B\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaT\x1E\x84aS\xF4V[\x93P\x80\x19\x83\x16\x92P\x80\x84\x16\x83\x17\x91PP\x92\x91PPV[_aTNaTIaTD\x84a>\x18V[aOYV[a>\x18V[\x90P\x91\x90PV[_aT_\x82aT4V[\x90P\x91\x90PV[_aTp\x82aTUV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aT\x89\x82aTfV[aT\x9CaT\x95\x82aTwV[\x83TaS\xFFV[\x82UPPPV[_\x81\x01_\x83\x01aT\xB3\x81\x85aR>V[aT\xBE\x81\x83\x86aS\xCFV[PPPP`\x01\x81\x01` \x83\x01\x80aT\xD4\x81aS\xDFV[\x90PaT\xE0\x81\x84aT\x80V[PPP`\x02\x81\x01`@\x83\x01\x80aT\xF5\x81aS\xDFV[\x90PaU\x01\x81\x84aT\x80V[PPP`\x03\x81\x01``\x83\x01aU\x16\x81\x85aR>V[aU!\x81\x83\x86aS\xCFV[PPPPPPV[aU3\x82\x82aT\xA3V[PPV[_\x81\x90P\x92\x91PPV[_aUK\x82aE\xC8V[aUU\x81\x85aU7V[\x93PaUe\x81\x85` \x86\x01a?8V[\x80\x84\x01\x91PP\x92\x91PPV[_aU|\x82\x84aUAV[\x91P\x81\x90P\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061013f575f3560e01c8063991dc36d116100b5578063cac6a5a81161006e578063cac6a5a814610465578063cd8e993c1461048d578063cdbb5a82146104c9578063ecfb0b9414610505578063f88174ea1461052d578063fed9716b146105695761013f565b8063991dc36d14610347578063a1364d7914610371578063a9b4d07114610399578063ad3cb1cc146103d5578063b3f5403a146103ff578063be91187b1461043b5761013f565b80634f1ef286116101075780634f1ef2861461022557806352d1902d14610241578063820a91f81461026b5780638625e876146102a757806386dfc7de146102e3578063888b99e01461030b5761013f565b8063049f25ef14610143578063086e4e1c1461017f5780630d8e6e2c146101a95780633a5162e6146101d357806341618fe9146101e9575b5f80fd5b34801561014e575f80fd5b5061016960048036038101906101649190613dc4565b610593565b6040516101769190613ed6565b60405180910390f35b34801561018a575f80fd5b5061019361063d565b6040516101a09190613f05565b60405180910390f35b3480156101b4575f80fd5b506101bd610689565b6040516101ca9190613fa8565b60405180910390f35b3480156101de575f80fd5b506101e7610704565b005b3480156101f4575f80fd5b5061020f600480360381019061020a9190613dc4565b610882565b60405161021c9190613ed6565b60405180910390f35b61023f600480360381019061023a919061411e565b61092c565b005b34801561024c575f80fd5b5061025561094b565b6040516102629190614190565b60405180910390f35b348015610276575f80fd5b50610291600480360381019061028c91906141a9565b61097c565b60405161029e9190614296565b60405180910390f35b3480156102b2575f80fd5b506102cd60048036038101906102c891906141a9565b610c9c565b6040516102da91906142d0565b60405180910390f35b3480156102ee575f80fd5b5061030960048036038101906103049190613dc4565b610d73565b005b348015610316575f80fd5b50610331600480360381019061032c9190613dc4565b610f2f565b60405161033e919061435c565b60405180910390f35b348015610352575f80fd5b5061035b610f4f565b6040516103689190613f05565b60405180910390f35b34801561037c575f80fd5b5061039760048036038101906103929190614449565b610f9b565b005b3480156103a4575f80fd5b506103bf60048036038101906103ba9190613dc4565b61119d565b6040516103cc9190613f05565b60405180910390f35b3480156103e0575f80fd5b506103e961122c565b6040516103f69190613fa8565b60405180910390f35b34801561040a575f80fd5b5061042560048036038101906104209190613dc4565b611265565b6040516104329190613f05565b60405180910390f35b348015610446575f80fd5b5061044f6112f4565b60405161045c9190613f05565b60405180910390f35b348015610470575f80fd5b5061048b600480360381019061048691906144fd565b611340565b005b348015610498575f80fd5b506104b360048036038101906104ae9190613dc4565b6116fe565b6040516104c091906142d0565b60405180910390f35b3480156104d4575f80fd5b506104ef60048036038101906104ea91906141a9565b611788565b6040516104fc91906142d0565b60405180910390f35b348015610510575f80fd5b5061052b6004803603810190610526919061453b565b61185f565b005b348015610538575f80fd5b50610553600480360381019061054e9190613dc4565b611a3c565b6040516105609190613f05565b60405180910390f35b348015610574575f80fd5b5061057d611add565b60405161058a91906147a3565b60405180910390f35b60605f61059e611de8565b905080600a015f8481526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561063057602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105e7575b5050505050915050919050565b5f80610647611e0f565b90505f8103610682576040517f21fb08f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b60606040518060400160405280601381526020017f436f70726f636573736f72436f6e7465787473000000000000000000000000008152506106ca5f611e28565b6106d46001611e28565b6106dd5f611e28565b6040516020016106f09493929190614891565b604051602081830303815290604052905090565b5f61070d611de8565b90505f815f016002015490505f811415801561073c575081600d015f8281526020019081526020015f20544210155b15610806575f61074a610f4f565b90505f83600f015f8381526020019081526020015f20544261076c919061491c565b90508084600e015f8481526020019081526020015f2081905550610793845f018484611ef2565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc82826040516107c492919061494f565b60405180910390a17f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71836040516107fb9190613f05565b60405180910390a150505b5f61080f611e0f565b90505f8114158015610834575082600e015f8281526020019081526020015f20544210155b1561087d57610845835f0182611f0b565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898816040516108749190613f05565b60405180910390a15b505050565b60605f61088d611de8565b905080600c015f8481526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561091f57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108d6575b5050505050915050919050565b610934611fd8565b61093d826120be565b61094782826121b1565b5050565b5f6109546122cf565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b610984613d08565b825f61098e611de8565b90505f816006015f8481526020019081526020015f205f0154036109e957816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016109e09190613f05565b60405180910390fd5b5f6109f2611de8565b90505f816008015f8881526020019081526020015f205f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f82018054610a5d906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a89906149a3565b8015610ad45780601f10610aab57610100808354040283529160200191610ad4565b820191905f5260205f20905b815481529060010190602001808311610ab757829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054610b97906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc3906149a3565b8015610c0e5780601f10610be557610100808354040283529160200191610c0e565b820191905f5260205f20905b815481529060010190602001808311610bf157829003601f168201915b50505050508152505090505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610c8f5786866040517fc312e73e000000000000000000000000000000000000000000000000000000008152600401610c869291906149e2565b60405180910390fd5b8094505050505092915050565b5f825f610ca7611de8565b90505f816006015f8481526020019081526020015f205f015403610d0257816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610cf99190613f05565b60405180910390fd5b5f610d0b611de8565b9050806009015f8781526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16935050505092915050565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610df49190614a1d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6357336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401610e5a9190614a48565b60405180910390fd5b5f610e6c61063d565b90505f610e77612356565b90505f610e82611de8565b9050610e91815f018484611ef2565b5f8442610e9e919061491c565b90508082600e015f8581526020019081526020015f20819055507f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc8382604051610ee992919061494f565b60405180910390a17f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be7184604051610f209190613f05565b60405180910390a15050505050565b5f80610f39611de8565b9050610f47815f018461236f565b915050919050565b5f80610f59612356565b90505f8103610f94576040517f046593ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061101c9190614a1d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461108b57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016110829190614a48565b60405180910390fd5b5f611094611de8565b90505f61109f611add565b90505f6110b2825f015189898989612397565b90507fbbb104c495886e5daa3efb6b281ec2840c69385af5cbfc1582fcf700de1ecd4b8282866040516110e793929190614ab4565b60405180910390a16110fe835f01825f0151612e8f565b61110d835f01825f0151612ff4565b5f845f01354261111d919061491c565b90508084600d015f845f015181526020019081526020015f2081905550846020013584600f015f855f015181526020019081526020015f20819055507f0425f54e602cbcf87fafd6a0b557fa5c4bc4bc6c251686255eb3bd775f452377828260405161118a929190614af7565b60405180910390a1505050505050505050565b5f815f6111a8611de8565b90505f816006015f8481526020019081526020015f205f01540361120357816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016111fa9190613f05565b60405180910390fd5b5f61120c611de8565b905080600e015f8681526020019081526020015f20549350505050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f815f611270611de8565b90505f816006015f8481526020019081526020015f205f0154036112cb57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016112c29190613f05565b60405180910390fd5b5f6112d4611de8565b905080600d015f8681526020019081526020015f20549350505050919050565b5f806112fe6130ca565b90505f8103611339576040517fb9e861b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561139d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c19190614a1d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461143057336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016114279190614a48565b60405180910390fd5b815f61143a611de8565b90505f816006015f8481526020019081526020015f205f01540361149557816040517fabf9e7b000000000000000000000000000000000000000000000000000000000815260040161148c9190613f05565b60405180910390fd5b5f61149e611de8565b9050600360078111156114b4576114b36142e9565b5b8460078111156114c7576114c66142e9565b5b0361155a575f6114d5610f4f565b90506114e4825f018783611ef2565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc814260405161151592919061494f565b60405180910390a17f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be718660405161154c9190613f05565b60405180910390a1506116f7565b6005600781111561156e5761156d6142e9565b5b846007811115611581576115806142e9565b5b036115ce57611592815f0186611f0b565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898856040516115c19190613f05565b60405180910390a16116f6565b600660078111156115e2576115e16142e9565b5b8460078111156115f5576115f46142e9565b5b0361164257611606815f01866130e3565b7fee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf21856040516116359190613f05565b60405180910390a16116f5565b600780811115611655576116546142e9565b5b846007811115611668576116676142e9565b5b036116b557611679815f018661326e565b7ff20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be5856040516116a89190613f05565b60405180910390a16116f4565b84846040517ff0bed68f0000000000000000000000000000000000000000000000000000000081526004016116eb929190614b25565b60405180910390fd5b5b5b5b5050505050565b5f815f611709611de8565b90505f816006015f8481526020019081526020015f205f01540361176457816040517fabf9e7b000000000000000000000000000000000000000000000000000000000815260040161175b9190613f05565b60405180910390fd5b61176c610f4f565b84148061177f575061177c611e0f565b84145b92505050919050565b5f825f611793611de8565b90505f816006015f8481526020019081526020015f205f0154036117ee57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016117e59190613f05565b60405180910390fd5b5f6117f7611de8565b905080600b015f8781526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16935050505092915050565b60016118696133c2565b67ffffffffffffffff16146118aa576040517f6f4f731f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f6118b56133e6565b9050805f0160089054906101000a900460ff16806118fd57508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b15611934576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff0219169083151502179055505f6119875f88888888612397565b90505f611992611de8565b90506119a3815f01835f015161340d565b7fd474068ecf914caa04868493bcefa56bfb049a54f1612c2726d112e1e60663b9888888886040516119d89493929190614d94565b60405180910390a150505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d282604051611a2c9190614def565b60405180910390a1505050505050565b5f815f611a47611de8565b90505f816006015f8481526020019081526020015f205f015403611aa257816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401611a999190613f05565b60405180910390fd5b5f611aab611de8565b905060018082600a015f8881526020019081526020015f2080549050901c611ad3919061491c565b9350505050919050565b611ae5613d5a565b5f611aee610f4f565b90505f611af9611de8565b9050806006015f8381526020019081526020015f206040518060800160405290815f820154815260200160018201548152602001600282018054611b3c906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611b68906149a3565b8015611bb35780601f10611b8a57610100808354040283529160200191611bb3565b820191905f5260205f20905b815481529060010190602001808311611b9657829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020015f905b82821015611dd9578382905f5260205f2090600402016040518060800160405290815f82018054611c10906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3c906149a3565b8015611c875780601f10611c5e57610100808354040283529160200191611c87565b820191905f5260205f20905b815481529060010190602001808311611c6a57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054611d4a906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611d76906149a3565b8015611dc15780601f10611d9857610100808354040283529160200191611dc1565b820191905f5260205f20905b815481529060010190602001808311611da457829003601f168201915b50505050508152505081526020019060010190611be0565b50505050815250509250505090565b5f7f1da8a9a065a2f0a895c457065eddd3cf4a4d0d5340aaa0ca54d3cd5b4a6aaf00905090565b5f80611e19611de8565b9050805f016004015491505090565b60605f6001611e36846134db565b0190505f8167ffffffffffffffff811115611e5457611e53613ffa565b5b6040519080825280601f01601f191660200182016040528015611e865781602001600182028036833780820191505090505b5090505f82602001820190505b600115611ee7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611edc57611edb614e08565b5b0494505f8503611e93575b819350505050919050565b611efc838261362c565b611f068383613702565b505050565b805f8103611f45576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f4f838361385a565b611f9057816040517f77bf5846000000000000000000000000000000000000000000000000000000008152600401611f879190613f05565b60405180910390fd5b6005835f015f8481526020019081526020015f205f6101000a81548160ff02191690836007811115611fc557611fc46142e9565b5b02179055505f8360040181905550505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061208557507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661206c6138a9565b73ffffffffffffffffffffffffffffffffffffffff1614155b156120bc576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b73a50f5243c70c80a8309e3d39d8c9d958cda8397973ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061213f9190614a1d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121ae57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016121a59190614a48565b60405180910390fd5b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561221957506040513d601f19601f820116820180604052508101906122169190614e5f565b60015b61225a57816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016122519190614a48565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146122c057806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016122b79190614190565b60405180910390fd5b6122ca83836138fc565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612354576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f80612360611de8565b9050805f016003015491505090565b5f825f015f8381526020019081526020015f205f9054906101000a900460ff16905092915050565b61239f613d5a565b5f83839050036123db576040517f8af082ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6123e4611de8565b9050806007015f8154809291906123fa90614e8a565b91905055505f8160070154905080826006015f8381526020019081526020015f205f018190555087826006015f8381526020019081526020015f20600101819055508686836006015f8481526020019081526020015f206002019182612461929190615078565b505f5b85859050811015612b9b575f73ffffffffffffffffffffffffffffffffffffffff1686868381811061249957612498615145565b5b90506020028101906124ab919061517e565b60200160208101906124bd91906151a5565b73ffffffffffffffffffffffffffffffffffffffff1603612519578086866040517f9edb7861000000000000000000000000000000000000000000000000000000008152600401612510939291906151d0565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1686868381811061254357612542615145565b5b9050602002810190612555919061517e565b604001602081019061256791906151a5565b73ffffffffffffffffffffffffffffffffffffffff16036125c3578086866040517f4a6c59740000000000000000000000000000000000000000000000000000000081526004016125ba939291906151d0565b60405180910390fd5b826009015f8381526020019081526020015f205f8787848181106125ea576125e9615145565b5b90506020028101906125fc919061517e565b602001602081019061260e91906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156126d25785858281811061266c5761266b615145565b5b905060200281019061267e919061517e565b602001602081019061269091906151a5565b8187876040517f64d527590000000000000000000000000000000000000000000000000000000081526004016126c99493929190615200565b60405180910390fd5b82600b015f8381526020019081526020015f205f8787848181106126f9576126f8615145565b5b905060200281019061270b919061517e565b604001602081019061271d91906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156127e15785858281811061277b5761277a615145565b5b905060200281019061278d919061517e565b604001602081019061279f91906151a5565b8187876040517fc826e1a20000000000000000000000000000000000000000000000000000000081526004016127d89493929190615200565b60405180910390fd5b826006015f8381526020019081526020015f2060030186868381811061280a57612809615145565b5b905060200281019061281c919061517e565b908060018154018082558091505060019003905f5260205f2090600402015f90919091909150818161284e9190615529565b505085858281811061286357612862615145565b5b9050602002810190612875919061517e565b836008015f8481526020019081526020015f205f88888581811061289c5761289b615145565b5b90506020028101906128ae919061517e565b60200160208101906128c091906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081816129059190615529565b9050506001836009015f8481526020019081526020015f205f88888581811061293157612930615145565b5b9050602002810190612943919061517e565b602001602081019061295591906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600a015f8381526020019081526020015f208686838181106129ca576129c9615145565b5b90506020028101906129dc919061517e565b60200160208101906129ee91906151a5565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183600b015f8481526020019081526020015f205f888885818110612a7457612a73615145565b5b9050602002810190612a86919061517e565b6040016020810190612a9891906151a5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600c015f8381526020019081526020015f20868683818110612b0d57612b0c615145565b5b9050602002810190612b1f919061517e565b6040016020810190612b3191906151a5565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050612464565b50816006015f8281526020019081526020015f206040518060800160405290815f820154815260200160018201548152602001600282018054612bdd906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612c09906149a3565b8015612c545780601f10612c2b57610100808354040283529160200191612c54565b820191905f5260205f20905b815481529060010190602001808311612c3757829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020015f905b82821015612e7a578382905f5260205f2090600402016040518060800160405290815f82018054612cb1906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612cdd906149a3565b8015612d285780601f10612cff57610100808354040283529160200191612d28565b820191905f5260205f20905b815481529060010190602001808311612d0b57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054612deb906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612e17906149a3565b8015612e625780601f10612e3957610100808354040283529160200191612e62565b820191905f5260205f20905b815481529060010190602001808311612e4557829003601f168201915b50505050508152505081526020019060010190612c81565b50505050815250509250505095945050505050565b805f8103612ec9576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ed3838361396e565b612f1457816040517f6653f6d7000000000000000000000000000000000000000000000000000000008152600401612f0b9190613f05565b60405180910390fd5b5f836002015414612f605782600201546040517fc470c022000000000000000000000000000000000000000000000000000000008152600401612f579190613f05565b60405180910390fd5b5f836004015414612fac5782600401546040517f7022ec41000000000000000000000000000000000000000000000000000000008152600401612fa39190613f05565b60405180910390fd5b6001835f015f8481526020019081526020015f205f6101000a81548160ff02191690836007811115612fe157612fe06142e9565b5b0217905550818360010181905550505050565b805f810361302e576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61303883836139bc565b61307957816040517fc0b5ee660000000000000000000000000000000000000000000000000000000081526004016130709190613f05565b60405180910390fd5b6002835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156130ae576130ad6142e9565b5b02179055508183600201819055505f8360010181905550505050565b5f806130d4611de8565b9050805f016002015491505090565b805f810361311d576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282613129828261396e565b1561316b57806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016131629190613f05565b60405180910390fd5b61317585856139bc565b156131b757836040517f0ddd14ca0000000000000000000000000000000000000000000000000000000081526004016131ae9190613f05565b60405180910390fd5b6131c18585613a0b565b1561320357836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016131fa9190613f05565b60405180910390fd5b6006855f015f8681526020019081526020015f205f6101000a81548160ff02191690836007811115613238576132376142e9565b5b021790555083856002015403613252575f85600201819055505b83856004015403613267575f85600401819055505b5050505050565b805f81036132a8576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826132b4828261396e565b156132f657806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016132ed9190613f05565b60405180910390fd5b6133008585613a0b565b1561334257836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016133399190613f05565b60405180910390fd5b6007855f015f8681526020019081526020015f205f6101000a81548160ff02191690836007811115613377576133766142e9565b5b021790555083856001015403613391575f85600101819055505b838560020154036133a6575f85600201819055505b838560040154036133bb575f85600401819055505b5050505050565b5f6133cb6133e6565b5f015f9054906101000a900467ffffffffffffffff16905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b805f8103613447576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8360030154146134935782600301546040517f7eea432b00000000000000000000000000000000000000000000000000000000815260040161348a9190613f05565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156134c8576134c76142e9565b5b0217905550818360030181905550505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613537577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161352d5761352c614e08565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613574576d04ee2d6d415b85acef8100000000838161356a57613569614e08565b5b0492506020810190505b662386f26fc1000083106135a357662386f26fc10000838161359957613598614e08565b5b0492506010810190505b6305f5e10083106135cc576305f5e10083816135c2576135c1614e08565b5b0492506008810190505b61271083106135f15761271083816135e7576135e6614e08565b5b0492506004810190505b60648310613614576064838161360a57613609614e08565b5b0492506002810190505b600a8310613623576001810190505b80915050919050565b805f8103613666576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6136708383613a0b565b6136b157816040517f331486b30000000000000000000000000000000000000000000000000000000081526004016136a89190613f05565b60405180910390fd5b6004835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156136e6576136e56142e9565b5b02179055508183600401819055505f8360030181905550505050565b805f810361373c576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6137468383613a5a565b15801561375a5750613758838361385a565b155b1561379c57816040517f12b49e3d0000000000000000000000000000000000000000000000000000000081526004016137939190613f05565b60405180910390fd5b5f8360030154146137e85782600301546040517f7eea432b0000000000000000000000000000000000000000000000000000000081526004016137df9190613f05565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561381d5761381c6142e9565b5b021790555081836003018190555081836002015403613840575f83600201819055505b81836004015403613855575f83600401819055505b505050565b5f6004600781111561386f5761386e6142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff1660078111156138a05761389f6142e9565b5b14905092915050565b5f6138d57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613aa9565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61390582613ab2565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f815111156139615761395b8282613b7b565b5061396a565b613969613bfb565b5b5050565b5f806007811115613982576139816142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff1660078111156139b3576139b26142e9565b5b14905092915050565b5f600160078111156139d1576139d06142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613a0257613a016142e9565b5b14905092915050565b5f60036007811115613a2057613a1f6142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613a5157613a506142e9565b5b14905092915050565b5f60026007811115613a6f57613a6e6142e9565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613aa057613a9f6142e9565b5b14905092915050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b03613b0d57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401613b049190614a48565b60405180910390fd5b80613b397f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613aa9565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff1684604051613ba49190615571565b5f60405180830381855af49150503d805f8114613bdc576040519150601f19603f3d011682016040523d82523d5f602084013e613be1565b606091505b5091509150613bf1858383613c37565b9250505092915050565b5f341115613c35576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606082613c4c57613c4782613cc4565b613cbc565b5f8251148015613c7257505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15613cb457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613cab9190614a48565b60405180910390fd5b819050613cbd565b5b9392505050565b5f81511115613cd65780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60405180608001604052805f81526020015f815260200160608152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b613da381613d91565b8114613dad575f80fd5b50565b5f81359050613dbe81613d9a565b92915050565b5f60208284031215613dd957613dd8613d89565b5b5f613de684828501613db0565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f613e4182613e18565b9050919050565b613e5181613e37565b82525050565b5f613e628383613e48565b60208301905092915050565b5f602082019050919050565b5f613e8482613def565b613e8e8185613df9565b9350613e9983613e09565b805f5b83811015613ec9578151613eb08882613e57565b9750613ebb83613e6e565b925050600181019050613e9c565b5085935050505092915050565b5f6020820190508181035f830152613eee8184613e7a565b905092915050565b613eff81613d91565b82525050565b5f602082019050613f185f830184613ef6565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613f55578082015181840152602081019050613f3a565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613f7a82613f1e565b613f848185613f28565b9350613f94818560208601613f38565b613f9d81613f60565b840191505092915050565b5f6020820190508181035f830152613fc08184613f70565b905092915050565b613fd181613e37565b8114613fdb575f80fd5b50565b5f81359050613fec81613fc8565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61403082613f60565b810181811067ffffffffffffffff8211171561404f5761404e613ffa565b5b80604052505050565b5f614061613d80565b905061406d8282614027565b919050565b5f67ffffffffffffffff82111561408c5761408b613ffa565b5b61409582613f60565b9050602081019050919050565b828183375f83830152505050565b5f6140c26140bd84614072565b614058565b9050828152602081018484840111156140de576140dd613ff6565b5b6140e98482856140a2565b509392505050565b5f82601f83011261410557614104613ff2565b5b81356141158482602086016140b0565b91505092915050565b5f806040838503121561413457614133613d89565b5b5f61414185828601613fde565b925050602083013567ffffffffffffffff81111561416257614161613d8d565b5b61416e858286016140f1565b9150509250929050565b5f819050919050565b61418a81614178565b82525050565b5f6020820190506141a35f830184614181565b92915050565b5f80604083850312156141bf576141be613d89565b5b5f6141cc85828601613db0565b92505060206141dd85828601613fde565b9150509250929050565b5f82825260208201905092915050565b5f61420182613f1e565b61420b81856141e7565b935061421b818560208601613f38565b61422481613f60565b840191505092915050565b5f608083015f8301518482035f86015261424982826141f7565b915050602083015161425e6020860182613e48565b5060408301516142716040860182613e48565b506060830151848203606086015261428982826141f7565b9150508091505092915050565b5f6020820190508181035f8301526142ae818461422f565b905092915050565b5f8115159050919050565b6142ca816142b6565b82525050565b5f6020820190506142e35f8301846142c1565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60088110614327576143266142e9565b5b50565b5f81905061433782614316565b919050565b5f6143468261432a565b9050919050565b6143568161433c565b82525050565b5f60208201905061436f5f83018461434d565b92915050565b5f80fd5b5f80fd5b5f8083601f84011261439257614391613ff2565b5b8235905067ffffffffffffffff8111156143af576143ae614375565b5b6020830191508360018202830111156143cb576143ca614379565b5b9250929050565b5f8083601f8401126143e7576143e6613ff2565b5b8235905067ffffffffffffffff81111561440457614403614375565b5b6020830191508360208202830111156144205761441f614379565b5b9250929050565b5f80fd5b5f604082840312156144405761443f614427565b5b81905092915050565b5f805f805f6080868803121561446257614461613d89565b5b5f86013567ffffffffffffffff81111561447f5761447e613d8d565b5b61448b8882890161437d565b9550955050602086013567ffffffffffffffff8111156144ae576144ad613d8d565b5b6144ba888289016143d2565b935093505060406144cd8882890161442b565b9150509295509295909350565b600881106144e6575f80fd5b50565b5f813590506144f7816144da565b92915050565b5f806040838503121561451357614512613d89565b5b5f61452085828601613db0565b9250506020614531858286016144e9565b9150509250929050565b5f805f806040858703121561455357614552613d89565b5b5f85013567ffffffffffffffff8111156145705761456f613d8d565b5b61457c8782880161437d565b9450945050602085013567ffffffffffffffff81111561459f5761459e613d8d565b5b6145ab878288016143d2565b925092505092959194509250565b6145c281613d91565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f6145ec826145c8565b6145f681856145d2565b9350614606818560208601613f38565b61460f81613f60565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f86015261465d82826141f7565b91505060208301516146726020860182613e48565b5060408301516146856040860182613e48565b506060830151848203606086015261469d82826141f7565b9150508091505092915050565b5f6146b58383614643565b905092915050565b5f602082019050919050565b5f6146d38261461a565b6146dd8185614624565b9350836020820285016146ef85614634565b805f5b8581101561472a578484038952815161470b85826146aa565b9450614716836146bd565b925060208a019950506001810190506146f2565b50829750879550505050505092915050565b5f608083015f8301516147515f8601826145b9565b50602083015161476460208601826145b9565b506040830151848203604086015261477c82826145e2565b9150506060830151848203606086015261479682826146c9565b9150508091505092915050565b5f6020820190508181035f8301526147bb818461473c565b905092915050565b5f81905092915050565b5f6147d782613f1e565b6147e181856147c3565b93506147f1818560208601613f38565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f6148316002836147c3565b915061483c826147fd565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f61487b6001836147c3565b915061488682614847565b600182019050919050565b5f61489c82876147cd565b91506148a782614825565b91506148b382866147cd565b91506148be8261486f565b91506148ca82856147cd565b91506148d58261486f565b91506148e182846147cd565b915081905095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61492682613d91565b915061493183613d91565b9250828201905080821115614949576149486148ef565b5b92915050565b5f6040820190506149625f830185613ef6565b61496f6020830184613ef6565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806149ba57607f821691505b6020821081036149cd576149cc614976565b5b50919050565b6149dc81613e37565b82525050565b5f6040820190506149f55f830185613ef6565b614a0260208301846149d3565b9392505050565b5f81519050614a1781613fc8565b92915050565b5f60208284031215614a3257614a31613d89565b5b5f614a3f84828501614a09565b91505092915050565b5f602082019050614a5b5f8301846149d3565b92915050565b5f614a6f6020840184613db0565b905092915050565b60408201614a875f830183614a61565b614a935f8501826145b9565b50614aa16020830183614a61565b614aae60208501826145b9565b50505050565b5f6080820190508181035f830152614acc818661473c565b90508181036020830152614ae0818561473c565b9050614aef6040830184614a77565b949350505050565b5f6040820190508181035f830152614b0f818561473c565b9050614b1e6020830184613ef6565b9392505050565b5f604082019050614b385f830185613ef6565b614b45602083018461434d565b9392505050565b5f82825260208201905092915050565b5f614b678385614b4c565b9350614b748385846140a2565b614b7d83613f60565b840190509392505050565b5f82825260208201905092915050565b5f819050919050565b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112614bc957614bc8614ba9565b5b83810192508235915060208301925067ffffffffffffffff821115614bf157614bf0614ba1565b5b600182023603831315614c0757614c06614ba5565b5b509250929050565b5f614c1a83856141e7565b9350614c278385846140a2565b614c3083613f60565b840190509392505050565b5f614c496020840184613fde565b905092915050565b5f60808301614c625f840184614bad565b8583035f870152614c74838284614c0f565b92505050614c856020840184614c3b565b614c926020860182613e48565b50614ca06040840184614c3b565b614cad6040860182613e48565b50614cbb6060840184614bad565b8583036060870152614cce838284614c0f565b925050508091505092915050565b5f614ce78383614c51565b905092915050565b5f82356001608003833603038112614d0a57614d09614ba9565b5b82810191505092915050565b5f602082019050919050565b5f614d2d8385614b88565b935083602084028501614d3f84614b98565b805f5b87811015614d82578484038952614d598284614cef565b614d638582614cdc565b9450614d6e83614d16565b925060208a01995050600181019050614d42565b50829750879450505050509392505050565b5f6040820190508181035f830152614dad818688614b5c565b90508181036020830152614dc2818486614d22565b905095945050505050565b5f67ffffffffffffffff82169050919050565b614de981614dcd565b82525050565b5f602082019050614e025f830184614de0565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b614e3e81614178565b8114614e48575f80fd5b50565b5f81519050614e5981614e35565b92915050565b5f60208284031215614e7457614e73613d89565b5b5f614e8184828501614e4b565b91505092915050565b5f614e9482613d91565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ec657614ec56148ef565b5b600182019050919050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302614f377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614efc565b614f418683614efc565b95508019841693508086168417925050509392505050565b5f819050919050565b5f614f7c614f77614f7284613d91565b614f59565b613d91565b9050919050565b5f819050919050565b614f9583614f62565b614fa9614fa182614f83565b848454614f08565b825550505050565b5f90565b614fbd614fb1565b614fc8818484614f8c565b505050565b5b81811015614feb57614fe05f82614fb5565b600181019050614fce565b5050565b601f8211156150305761500181614edb565b61500a84614eed565b81016020851015615019578190505b61502d61502585614eed565b830182614fcd565b50505b505050565b5f82821c905092915050565b5f6150505f1984600802615035565b1980831691505092915050565b5f6150688383615041565b9150826002028217905092915050565b6150828383614ed1565b67ffffffffffffffff81111561509b5761509a613ffa565b5b6150a582546149a3565b6150b0828285614fef565b5f601f8311600181146150dd575f84156150cb578287013590505b6150d5858261505d565b86555061513c565b601f1984166150eb86614edb565b5f5b82811015615112578489013582556001820191506020850194506020810190506150ed565b8683101561512f578489013561512b601f891682615041565b8355505b6001600288020188555050505b50505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f8235600160800383360303811261519957615198615172565b5b80830191505092915050565b5f602082840312156151ba576151b9613d89565b5b5f6151c784828501613fde565b91505092915050565b5f6040820190506151e35f830186613ef6565b81810360208301526151f6818486614d22565b9050949350505050565b5f6060820190506152135f8301876149d3565b6152206020830186613ef6565b8181036040830152615233818486614d22565b905095945050505050565b5f808335600160200384360303811261525a57615259615172565b5b80840192508235915067ffffffffffffffff82111561527c5761527b615176565b5b6020830192506001820236038313156152985761529761517a565b5b509250929050565b5f82905092915050565b5f819050815f5260205f209050919050565b601f8211156152fd576152ce816152aa565b6152d784614eed565b810160208510156152e6578190505b6152fa6152f285614eed565b830182614fcd565b50505b505050565b61530c83836152a0565b67ffffffffffffffff81111561532557615324613ffa565b5b61532f82546149a3565b61533a8282856152bc565b5f601f831160018114615367575f8415615355578287013590505b61535f858261505d565b8655506153c6565b601f198416615375866152aa565b5f5b8281101561539c57848901358255600182019150602085019450602081019050615377565b868310156153b957848901356153b5601f891682615041565b8355505b6001600288020188555050505b50505050505050565b6153da838383615302565b505050565b5f81356153eb81613fc8565b80915050919050565b5f815f1b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff61541e846153f4565b9350801983169250808416831791505092915050565b5f61544e61544961544484613e18565b614f59565b613e18565b9050919050565b5f61545f82615434565b9050919050565b5f61547082615455565b9050919050565b5f819050919050565b61548982615466565b61549c61549582615477565b83546153ff565b8255505050565b5f81015f83016154b3818561523e565b6154be8183866153cf565b505050506001810160208301806154d4816153df565b90506154e08184615480565b5050506002810160408301806154f5816153df565b90506155018184615480565b5050506003810160608301615516818561523e565b6155218183866153cf565b505050505050565b61553382826154a3565b5050565b5f81905092915050565b5f61554b826145c8565b6155558185615537565b9350615565818560208601613f38565b80840191505092915050565b5f61557c8284615541565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01?W_5`\xE0\x1C\x80c\x99\x1D\xC3m\x11a\0\xB5W\x80c\xCA\xC6\xA5\xA8\x11a\0nW\x80c\xCA\xC6\xA5\xA8\x14a\x04eW\x80c\xCD\x8E\x99<\x14a\x04\x8DW\x80c\xCD\xBBZ\x82\x14a\x04\xC9W\x80c\xEC\xFB\x0B\x94\x14a\x05\x05W\x80c\xF8\x81t\xEA\x14a\x05-W\x80c\xFE\xD9qk\x14a\x05iWa\x01?V[\x80c\x99\x1D\xC3m\x14a\x03GW\x80c\xA16My\x14a\x03qW\x80c\xA9\xB4\xD0q\x14a\x03\x99W\x80c\xAD<\xB1\xCC\x14a\x03\xD5W\x80c\xB3\xF5@:\x14a\x03\xFFW\x80c\xBE\x91\x18{\x14a\x04;Wa\x01?V[\x80cO\x1E\xF2\x86\x11a\x01\x07W\x80cO\x1E\xF2\x86\x14a\x02%W\x80cR\xD1\x90-\x14a\x02AW\x80c\x82\n\x91\xF8\x14a\x02kW\x80c\x86%\xE8v\x14a\x02\xA7W\x80c\x86\xDF\xC7\xDE\x14a\x02\xE3W\x80c\x88\x8B\x99\xE0\x14a\x03\x0BWa\x01?V[\x80c\x04\x9F%\xEF\x14a\x01CW\x80c\x08nN\x1C\x14a\x01\x7FW\x80c\r\x8En,\x14a\x01\xA9W\x80c:Qb\xE6\x14a\x01\xD3W\x80cAa\x8F\xE9\x14a\x01\xE9W[_\x80\xFD[4\x80\x15a\x01NW_\x80\xFD[Pa\x01i`\x04\x806\x03\x81\x01\x90a\x01d\x91\x90a=\xC4V[a\x05\x93V[`@Qa\x01v\x91\x90a>\xD6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x8AW_\x80\xFD[Pa\x01\x93a\x06=V[`@Qa\x01\xA0\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xB4W_\x80\xFD[Pa\x01\xBDa\x06\x89V[`@Qa\x01\xCA\x91\x90a?\xA8V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xDEW_\x80\xFD[Pa\x01\xE7a\x07\x04V[\0[4\x80\x15a\x01\xF4W_\x80\xFD[Pa\x02\x0F`\x04\x806\x03\x81\x01\x90a\x02\n\x91\x90a=\xC4V[a\x08\x82V[`@Qa\x02\x1C\x91\x90a>\xD6V[`@Q\x80\x91\x03\x90\xF3[a\x02?`\x04\x806\x03\x81\x01\x90a\x02:\x91\x90aA\x1EV[a\t,V[\0[4\x80\x15a\x02LW_\x80\xFD[Pa\x02Ua\tKV[`@Qa\x02b\x91\x90aA\x90V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02vW_\x80\xFD[Pa\x02\x91`\x04\x806\x03\x81\x01\x90a\x02\x8C\x91\x90aA\xA9V[a\t|V[`@Qa\x02\x9E\x91\x90aB\x96V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xB2W_\x80\xFD[Pa\x02\xCD`\x04\x806\x03\x81\x01\x90a\x02\xC8\x91\x90aA\xA9V[a\x0C\x9CV[`@Qa\x02\xDA\x91\x90aB\xD0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xEEW_\x80\xFD[Pa\x03\t`\x04\x806\x03\x81\x01\x90a\x03\x04\x91\x90a=\xC4V[a\rsV[\0[4\x80\x15a\x03\x16W_\x80\xFD[Pa\x031`\x04\x806\x03\x81\x01\x90a\x03,\x91\x90a=\xC4V[a\x0F/V[`@Qa\x03>\x91\x90aC\\V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03RW_\x80\xFD[Pa\x03[a\x0FOV[`@Qa\x03h\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03|W_\x80\xFD[Pa\x03\x97`\x04\x806\x03\x81\x01\x90a\x03\x92\x91\x90aDIV[a\x0F\x9BV[\0[4\x80\x15a\x03\xA4W_\x80\xFD[Pa\x03\xBF`\x04\x806\x03\x81\x01\x90a\x03\xBA\x91\x90a=\xC4V[a\x11\x9DV[`@Qa\x03\xCC\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xE0W_\x80\xFD[Pa\x03\xE9a\x12,V[`@Qa\x03\xF6\x91\x90a?\xA8V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\nW_\x80\xFD[Pa\x04%`\x04\x806\x03\x81\x01\x90a\x04 \x91\x90a=\xC4V[a\x12eV[`@Qa\x042\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04FW_\x80\xFD[Pa\x04Oa\x12\xF4V[`@Qa\x04\\\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04pW_\x80\xFD[Pa\x04\x8B`\x04\x806\x03\x81\x01\x90a\x04\x86\x91\x90aD\xFDV[a\x13@V[\0[4\x80\x15a\x04\x98W_\x80\xFD[Pa\x04\xB3`\x04\x806\x03\x81\x01\x90a\x04\xAE\x91\x90a=\xC4V[a\x16\xFEV[`@Qa\x04\xC0\x91\x90aB\xD0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xD4W_\x80\xFD[Pa\x04\xEF`\x04\x806\x03\x81\x01\x90a\x04\xEA\x91\x90aA\xA9V[a\x17\x88V[`@Qa\x04\xFC\x91\x90aB\xD0V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\x10W_\x80\xFD[Pa\x05+`\x04\x806\x03\x81\x01\x90a\x05&\x91\x90aE;V[a\x18_V[\0[4\x80\x15a\x058W_\x80\xFD[Pa\x05S`\x04\x806\x03\x81\x01\x90a\x05N\x91\x90a=\xC4V[a\x1A<V[`@Qa\x05`\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05tW_\x80\xFD[Pa\x05}a\x1A\xDDV[`@Qa\x05\x8A\x91\x90aG\xA3V[`@Q\x80\x91\x03\x90\xF3[``_a\x05\x9Ea\x1D\xE8V[\x90P\x80`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x060W` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x05\xE7W[PPPPP\x91PP\x91\x90PV[_\x80a\x06Ga\x1E\x0FV[\x90P_\x81\x03a\x06\x82W`@Q\x7F!\xFB\x08\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[```@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FCoprocessorContexts\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x06\xCA_a\x1E(V[a\x06\xD4`\x01a\x1E(V[a\x06\xDD_a\x1E(V[`@Q` \x01a\x06\xF0\x94\x93\x92\x91\x90aH\x91V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[_a\x07\ra\x1D\xE8V[\x90P_\x81_\x01`\x02\x01T\x90P_\x81\x14\x15\x80\x15a\x07<WP\x81`\r\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\x08\x06W_a\x07Ja\x0FOV[\x90P_\x83`\x0F\x01_\x83\x81R` \x01\x90\x81R` \x01_ TBa\x07l\x91\x90aI\x1CV[\x90P\x80\x84`\x0E\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UPa\x07\x93\x84_\x01\x84\x84a\x1E\xF2V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x82\x82`@Qa\x07\xC4\x92\x91\x90aIOV[`@Q\x80\x91\x03\x90\xA1\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x83`@Qa\x07\xFB\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1PP[_a\x08\x0Fa\x1E\x0FV[\x90P_\x81\x14\x15\x80\x15a\x084WP\x82`\x0E\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\x08}Wa\x08E\x83_\x01\x82a\x1F\x0BV[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x81`@Qa\x08t\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1[PPPV[``_a\x08\x8Da\x1D\xE8V[\x90P\x80`\x0C\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\t\x1FW` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x08\xD6W[PPPPP\x91PP\x91\x90PV[a\t4a\x1F\xD8V[a\t=\x82a \xBEV[a\tG\x82\x82a!\xB1V[PPV[_a\tTa\"\xCFV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[a\t\x84a=\x08V[\x82_a\t\x8Ea\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\t\xE9W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\t\xE0\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\t\xF2a\x1D\xE8V[\x90P_\x81`\x08\x01_\x88\x81R` \x01\x90\x81R` \x01_ _\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\n]\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\n\x89\x90aI\xA3V[\x80\x15a\n\xD4W\x80`\x1F\x10a\n\xABWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\n\xD4V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\n\xB7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x0B\x97\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0B\xC3\x90aI\xA3V[\x80\x15a\x0C\x0EW\x80`\x1F\x10a\x0B\xE5Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0C\x0EV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0B\xF1W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x0C\x8FW\x86\x86`@Q\x7F\xC3\x12\xE7>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0C\x86\x92\x91\x90aI\xE2V[`@Q\x80\x91\x03\x90\xFD[\x80\x94PPPPP\x92\x91PPV[_\x82_a\x0C\xA7a\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\r\x02W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0C\xF9\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\r\x0Ba\x1D\xE8V[\x90P\x80`\t\x01_\x87\x81R` \x01\x90\x81R` \x01_ _\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x93PPPP\x92\x91PPV[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xD0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\xF4\x91\x90aJ\x1DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0EcW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0EZ\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[_a\x0Ela\x06=V[\x90P_a\x0Ewa#VV[\x90P_a\x0E\x82a\x1D\xE8V[\x90Pa\x0E\x91\x81_\x01\x84\x84a\x1E\xF2V[_\x84Ba\x0E\x9E\x91\x90aI\x1CV[\x90P\x80\x82`\x0E\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x83\x82`@Qa\x0E\xE9\x92\x91\x90aIOV[`@Q\x80\x91\x03\x90\xA1\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x84`@Qa\x0F \x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1PPPPPV[_\x80a\x0F9a\x1D\xE8V[\x90Pa\x0FG\x81_\x01\x84a#oV[\x91PP\x91\x90PV[_\x80a\x0FYa#VV[\x90P_\x81\x03a\x0F\x94W`@Q\x7F\x04e\x93\xEA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xF8W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10\x1C\x91\x90aJ\x1DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x10\x8BW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x10\x82\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[_a\x10\x94a\x1D\xE8V[\x90P_a\x10\x9Fa\x1A\xDDV[\x90P_a\x10\xB2\x82_\x01Q\x89\x89\x89\x89a#\x97V[\x90P\x7F\xBB\xB1\x04\xC4\x95\x88n]\xAA>\xFBk(\x1E\xC2\x84\x0Ci8Z\xF5\xCB\xFC\x15\x82\xFC\xF7\0\xDE\x1E\xCDK\x82\x82\x86`@Qa\x10\xE7\x93\x92\x91\x90aJ\xB4V[`@Q\x80\x91\x03\x90\xA1a\x10\xFE\x83_\x01\x82_\x01Qa.\x8FV[a\x11\r\x83_\x01\x82_\x01Qa/\xF4V[_\x84_\x015Ba\x11\x1D\x91\x90aI\x1CV[\x90P\x80\x84`\r\x01_\x84_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x84` \x015\x84`\x0F\x01_\x85_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x04%\xF5N`,\xBC\xF8\x7F\xAF\xD6\xA0\xB5W\xFA\\K\xC4\xBCl%\x16\x86%^\xB3\xBDw_E#w\x82\x82`@Qa\x11\x8A\x92\x91\x90aJ\xF7V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPPV[_\x81_a\x11\xA8a\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x12\x03W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x11\xFA\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x12\x0Ca\x1D\xE8V[\x90P\x80`\x0E\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[_\x81_a\x12pa\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x12\xCBW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x12\xC2\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x12\xD4a\x1D\xE8V[\x90P\x80`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[_\x80a\x12\xFEa0\xCAV[\x90P_\x81\x03a\x139W`@Q\x7F\xB9\xE8a\xB2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x13\x9DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13\xC1\x91\x90aJ\x1DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x140W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x14'\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[\x81_a\x14:a\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x14\x95W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x14\x8C\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x14\x9Ea\x1D\xE8V[\x90P`\x03`\x07\x81\x11\x15a\x14\xB4Wa\x14\xB3aB\xE9V[[\x84`\x07\x81\x11\x15a\x14\xC7Wa\x14\xC6aB\xE9V[[\x03a\x15ZW_a\x14\xD5a\x0FOV[\x90Pa\x14\xE4\x82_\x01\x87\x83a\x1E\xF2V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x81B`@Qa\x15\x15\x92\x91\x90aIOV[`@Q\x80\x91\x03\x90\xA1\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x86`@Qa\x15L\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1Pa\x16\xF7V[`\x05`\x07\x81\x11\x15a\x15nWa\x15maB\xE9V[[\x84`\x07\x81\x11\x15a\x15\x81Wa\x15\x80aB\xE9V[[\x03a\x15\xCEWa\x15\x92\x81_\x01\x86a\x1F\x0BV[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x85`@Qa\x15\xC1\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1a\x16\xF6V[`\x06`\x07\x81\x11\x15a\x15\xE2Wa\x15\xE1aB\xE9V[[\x84`\x07\x81\x11\x15a\x15\xF5Wa\x15\xF4aB\xE9V[[\x03a\x16BWa\x16\x06\x81_\x01\x86a0\xE3V[\x7F\xEE~\xF89cAq%\xD2t0x\x9F\xC6\xE9A\x948\x1E\x82\xC3\xCD\xA6\x82`\xD0\xE7\xCF\xC3\x1E\xAF!\x85`@Qa\x165\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1a\x16\xF5V[`\x07\x80\x81\x11\x15a\x16UWa\x16TaB\xE9V[[\x84`\x07\x81\x11\x15a\x16hWa\x16gaB\xE9V[[\x03a\x16\xB5Wa\x16y\x81_\x01\x86a2nV[\x7F\xF2\x0B)\x98\x04\xC9\xC1\xD6\xDA;\x82ALz\xA0\xA8E\xCD\xBA\xBA\xE2\xD9\x0EF\xE3`\xA3y\xA7{{\xE5\x85`@Qa\x16\xA8\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xA1a\x16\xF4V[\x84\x84`@Q\x7F\xF0\xBE\xD6\x8F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\xEB\x92\x91\x90aK%V[`@Q\x80\x91\x03\x90\xFD[[[[PPPPPV[_\x81_a\x17\ta\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x17dW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17[\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[a\x17la\x0FOV[\x84\x14\x80a\x17\x7FWPa\x17|a\x1E\x0FV[\x84\x14[\x92PPP\x91\x90PV[_\x82_a\x17\x93a\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x17\xEEW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17\xE5\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x17\xF7a\x1D\xE8V[\x90P\x80`\x0B\x01_\x87\x81R` \x01\x90\x81R` \x01_ _\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x93PPPP\x92\x91PPV[`\x01a\x18ia3\xC2V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x18\xAAW`@Q\x7FoOs\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_a\x18\xB5a3\xE6V[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\x18\xFDWP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\x194W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_a\x19\x87_\x88\x88\x88\x88a#\x97V[\x90P_a\x19\x92a\x1D\xE8V[\x90Pa\x19\xA3\x81_\x01\x83_\x01Qa4\rV[\x7F\xD4t\x06\x8E\xCF\x91L\xAA\x04\x86\x84\x93\xBC\xEF\xA5k\xFB\x04\x9AT\xF1a,'&\xD1\x12\xE1\xE6\x06c\xB9\x88\x88\x88\x88`@Qa\x19\xD8\x94\x93\x92\x91\x90aM\x94V[`@Q\x80\x91\x03\x90\xA1PP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x1A,\x91\x90aM\xEFV[`@Q\x80\x91\x03\x90\xA1PPPPPPV[_\x81_a\x1AGa\x1D\xE8V[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x1A\xA2W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1A\x99\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_a\x1A\xABa\x1D\xE8V[\x90P`\x01\x80\x82`\n\x01_\x88\x81R` \x01\x90\x81R` \x01_ \x80T\x90P\x90\x1Ca\x1A\xD3\x91\x90aI\x1CV[\x93PPPP\x91\x90PV[a\x1A\xE5a=ZV[_a\x1A\xEEa\x0FOV[\x90P_a\x1A\xF9a\x1D\xE8V[\x90P\x80`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01\x80Ta\x1B<\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1Bh\x90aI\xA3V[\x80\x15a\x1B\xB3W\x80`\x1F\x10a\x1B\x8AWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1B\xB3V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1B\x96W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a\x1D\xD9W\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x1C\x10\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1C<\x90aI\xA3V[\x80\x15a\x1C\x87W\x80`\x1F\x10a\x1C^Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1C\x87V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1CjW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x1DJ\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1Dv\x90aI\xA3V[\x80\x15a\x1D\xC1W\x80`\x1F\x10a\x1D\x98Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1D\xC1V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1D\xA4W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a\x1B\xE0V[PPPP\x81RPP\x92PPP\x90V[_\x7F\x1D\xA8\xA9\xA0e\xA2\xF0\xA8\x95\xC4W\x06^\xDD\xD3\xCFJM\rS@\xAA\xA0\xCAT\xD3\xCD[Jj\xAF\0\x90P\x90V[_\x80a\x1E\x19a\x1D\xE8V[\x90P\x80_\x01`\x04\x01T\x91PP\x90V[``_`\x01a\x1E6\x84a4\xDBV[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1ETWa\x1ESa?\xFAV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x1E\x86W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a\x1E\xE7W\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a\x1E\xDCWa\x1E\xDBaN\x08V[[\x04\x94P_\x85\x03a\x1E\x93W[\x81\x93PPPP\x91\x90PV[a\x1E\xFC\x83\x82a6,V[a\x1F\x06\x83\x83a7\x02V[PPPV[\x80_\x81\x03a\x1FEW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x1FO\x83\x83a8ZV[a\x1F\x90W\x81`@Q\x7Fw\xBFXF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1F\x87\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x05\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a\x1F\xC5Wa\x1F\xC4aB\xE9V[[\x02\x17\x90UP_\x83`\x04\x01\x81\x90UPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a \x85WP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a la8\xA9V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a \xBCW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[s\xA5\x0FRC\xC7\x0C\x80\xA80\x9E=9\xD8\xC9\xD9X\xCD\xA89ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a!\x1BW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a!?\x91\x90aJ\x1DV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a!\xAEW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a!\xA5\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\"\x19WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\"\x16\x91\x90aN_V[`\x01[a\"ZW\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"Q\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a\"\xC0W\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\xB7\x91\x90aA\x90V[`@Q\x80\x91\x03\x90\xFD[a\"\xCA\x83\x83a8\xFCV[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a#TW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_\x80a#`a\x1D\xE8V[\x90P\x80_\x01`\x03\x01T\x91PP\x90V[_\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x92\x91PPV[a#\x9Fa=ZV[_\x83\x83\x90P\x03a#\xDBW`@Q\x7F\x8A\xF0\x82\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a#\xE4a\x1D\xE8V[\x90P\x80`\x07\x01_\x81T\x80\x92\x91\x90a#\xFA\x90aN\x8AV[\x91\x90PUP_\x81`\x07\x01T\x90P\x80\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x01\x81\x90UP\x87\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x01\x01\x81\x90UP\x86\x86\x83`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ `\x02\x01\x91\x82a$a\x92\x91\x90aPxV[P_[\x85\x85\x90P\x81\x10\x15a+\x9BW_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a$\x99Wa$\x98aQEV[[\x90P` \x02\x81\x01\x90a$\xAB\x91\x90aQ~V[` \x01` \x81\x01\x90a$\xBD\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a%\x19W\x80\x86\x86`@Q\x7F\x9E\xDBxa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\x10\x93\x92\x91\x90aQ\xD0V[`@Q\x80\x91\x03\x90\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a%CWa%BaQEV[[\x90P` \x02\x81\x01\x90a%U\x91\x90aQ~V[`@\x01` \x81\x01\x90a%g\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a%\xC3W\x80\x86\x86`@Q\x7FJlYt\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\xBA\x93\x92\x91\x90aQ\xD0V[`@Q\x80\x91\x03\x90\xFD[\x82`\t\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x87\x87\x84\x81\x81\x10a%\xEAWa%\xE9aQEV[[\x90P` \x02\x81\x01\x90a%\xFC\x91\x90aQ~V[` \x01` \x81\x01\x90a&\x0E\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a&\xD2W\x85\x85\x82\x81\x81\x10a&lWa&kaQEV[[\x90P` \x02\x81\x01\x90a&~\x91\x90aQ~V[` \x01` \x81\x01\x90a&\x90\x91\x90aQ\xA5V[\x81\x87\x87`@Q\x7Fd\xD5'Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a&\xC9\x94\x93\x92\x91\x90aR\0V[`@Q\x80\x91\x03\x90\xFD[\x82`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x87\x87\x84\x81\x81\x10a&\xF9Wa&\xF8aQEV[[\x90P` \x02\x81\x01\x90a'\x0B\x91\x90aQ~V[`@\x01` \x81\x01\x90a'\x1D\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a'\xE1W\x85\x85\x82\x81\x81\x10a'{Wa'zaQEV[[\x90P` \x02\x81\x01\x90a'\x8D\x91\x90aQ~V[`@\x01` \x81\x01\x90a'\x9F\x91\x90aQ\xA5V[\x81\x87\x87`@Q\x7F\xC8&\xE1\xA2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a'\xD8\x94\x93\x92\x91\x90aR\0V[`@Q\x80\x91\x03\x90\xFD[\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x03\x01\x86\x86\x83\x81\x81\x10a(\nWa(\taQEV[[\x90P` \x02\x81\x01\x90a(\x1C\x91\x90aQ~V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x90`\x04\x02\x01_\x90\x91\x90\x91\x90\x91P\x81\x81a(N\x91\x90aU)V[PP\x85\x85\x82\x81\x81\x10a(cWa(baQEV[[\x90P` \x02\x81\x01\x90a(u\x91\x90aQ~V[\x83`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a(\x9CWa(\x9BaQEV[[\x90P` \x02\x81\x01\x90a(\xAE\x91\x90aQ~V[` \x01` \x81\x01\x90a(\xC0\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x81a)\x05\x91\x90aU)V[\x90PP`\x01\x83`\t\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a)1Wa)0aQEV[[\x90P` \x02\x81\x01\x90a)C\x91\x90aQ~V[` \x01` \x81\x01\x90a)U\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\n\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a)\xCAWa)\xC9aQEV[[\x90P` \x02\x81\x01\x90a)\xDC\x91\x90aQ~V[` \x01` \x81\x01\x90a)\xEE\x91\x90aQ\xA5V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x83`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a*tWa*saQEV[[\x90P` \x02\x81\x01\x90a*\x86\x91\x90aQ~V[`@\x01` \x81\x01\x90a*\x98\x91\x90aQ\xA5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\x0C\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a+\rWa+\x0CaQEV[[\x90P` \x02\x81\x01\x90a+\x1F\x91\x90aQ~V[`@\x01` \x81\x01\x90a+1\x91\x90aQ\xA5V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa$dV[P\x81`\x06\x01_\x82\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01\x80Ta+\xDD\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta,\t\x90aI\xA3V[\x80\x15a,TW\x80`\x1F\x10a,+Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a,TV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a,7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a.zW\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta,\xB1\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta,\xDD\x90aI\xA3V[\x80\x15a-(W\x80`\x1F\x10a,\xFFWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a-(V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a-\x0BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta-\xEB\x90aI\xA3V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta.\x17\x90aI\xA3V[\x80\x15a.bW\x80`\x1F\x10a.9Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a.bV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a.EW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a,\x81V[PPPP\x81RPP\x92PPP\x95\x94PPPPPV[\x80_\x81\x03a.\xC9W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a.\xD3\x83\x83a9nV[a/\x14W\x81`@Q\x7FfS\xF6\xD7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/\x0B\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x02\x01T\x14a/`W\x82`\x02\x01T`@Q\x7F\xC4p\xC0\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/W\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x04\x01T\x14a/\xACW\x82`\x04\x01T`@Q\x7Fp\"\xECA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/\xA3\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x01\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a/\xE1Wa/\xE0aB\xE9V[[\x02\x17\x90UP\x81\x83`\x01\x01\x81\x90UPPPPV[\x80_\x81\x03a0.W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a08\x83\x83a9\xBCV[a0yW\x81`@Q\x7F\xC0\xB5\xEEf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0p\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x02\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a0\xAEWa0\xADaB\xE9V[[\x02\x17\x90UP\x81\x83`\x02\x01\x81\x90UP_\x83`\x01\x01\x81\x90UPPPPV[_\x80a0\xD4a\x1D\xE8V[\x90P\x80_\x01`\x02\x01T\x91PP\x90V[\x80_\x81\x03a1\x1DW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a1)\x82\x82a9nV[\x15a1kW\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1b\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[a1u\x85\x85a9\xBCV[\x15a1\xB7W\x83`@Q\x7F\r\xDD\x14\xCA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1\xAE\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[a1\xC1\x85\x85a:\x0BV[\x15a2\x03W\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1\xFA\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x06\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a28Wa27aB\xE9V[[\x02\x17\x90UP\x83\x85`\x02\x01T\x03a2RW_\x85`\x02\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a2gW_\x85`\x04\x01\x81\x90UP[PPPPPV[\x80_\x81\x03a2\xA8W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a2\xB4\x82\x82a9nV[\x15a2\xF6W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a2\xED\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[a3\0\x85\x85a:\x0BV[\x15a3BW\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a39\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x07\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a3wWa3vaB\xE9V[[\x02\x17\x90UP\x83\x85`\x01\x01T\x03a3\x91W_\x85`\x01\x01\x81\x90UP[\x83\x85`\x02\x01T\x03a3\xA6W_\x85`\x02\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a3\xBBW_\x85`\x04\x01\x81\x90UP[PPPPPV[_a3\xCBa3\xE6V[_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[\x80_\x81\x03a4GW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83`\x03\x01T\x14a4\x93W\x82`\x03\x01T`@Q\x7F~\xEAC+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a4\x8A\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a4\xC8Wa4\xC7aB\xE9V[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UPPPPV[_\x80_\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a57Wz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a5-Wa5,aN\x08V[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a5tWm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a5jWa5iaN\x08V[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a5\xA3Wf#\x86\xF2o\xC1\0\0\x83\x81a5\x99Wa5\x98aN\x08V[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a5\xCCWc\x05\xF5\xE1\0\x83\x81a5\xC2Wa5\xC1aN\x08V[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a5\xF1Wa'\x10\x83\x81a5\xE7Wa5\xE6aN\x08V[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a6\x14W`d\x83\x81a6\nWa6\taN\x08V[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a6#W`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[\x80_\x81\x03a6fW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a6p\x83\x83a:\x0BV[a6\xB1W\x81`@Q\x7F3\x14\x86\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a6\xA8\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x04\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a6\xE6Wa6\xE5aB\xE9V[[\x02\x17\x90UP\x81\x83`\x04\x01\x81\x90UP_\x83`\x03\x01\x81\x90UPPPPV[\x80_\x81\x03a7<W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a7F\x83\x83a:ZV[\x15\x80\x15a7ZWPa7X\x83\x83a8ZV[\x15[\x15a7\x9CW\x81`@Q\x7F\x12\xB4\x9E=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a7\x93\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x03\x01T\x14a7\xE8W\x82`\x03\x01T`@Q\x7F~\xEAC+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a7\xDF\x91\x90a?\x05V[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a8\x1DWa8\x1CaB\xE9V[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UP\x81\x83`\x02\x01T\x03a8@W_\x83`\x02\x01\x81\x90UP[\x81\x83`\x04\x01T\x03a8UW_\x83`\x04\x01\x81\x90UP[PPPV[_`\x04`\x07\x81\x11\x15a8oWa8naB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a8\xA0Wa8\x9FaB\xE9V[[\x14\x90P\x92\x91PPV[_a8\xD5\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba:\xA9V[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a9\x05\x82a:\xB2V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a9aWa9[\x82\x82a;{V[Pa9jV[a9ia;\xFBV[[PPV[_\x80`\x07\x81\x11\x15a9\x82Wa9\x81aB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a9\xB3Wa9\xB2aB\xE9V[[\x14\x90P\x92\x91PPV[_`\x01`\x07\x81\x11\x15a9\xD1Wa9\xD0aB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a:\x02Wa:\x01aB\xE9V[[\x14\x90P\x92\x91PPV[_`\x03`\x07\x81\x11\x15a: Wa:\x1FaB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a:QWa:PaB\xE9V[[\x14\x90P\x92\x91PPV[_`\x02`\x07\x81\x11\x15a:oWa:naB\xE9V[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a:\xA0Wa:\x9FaB\xE9V[[\x14\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a;\rW\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a;\x04\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[\x80a;9\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba:\xA9V[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa;\xA4\x91\x90aUqV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a;\xDCW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a;\xE1V[``\x91P[P\x91P\x91Pa;\xF1\x85\x83\x83a<7V[\x92PPP\x92\x91PPV[_4\x11\x15a<5W`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[``\x82a<LWa<G\x82a<\xC4V[a<\xBCV[_\x82Q\x14\x80\x15a<rWP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a<\xB4W\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a<\xAB\x91\x90aJHV[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa<\xBDV[[\x93\x92PPPV[_\x81Q\x11\x15a<\xD6W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80`\x80\x01`@R\x80``\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01``\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80_\x81R` \x01_\x81R` \x01``\x81R` \x01``\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x81\x90P\x91\x90PV[a=\xA3\x81a=\x91V[\x81\x14a=\xADW_\x80\xFD[PV[_\x815\x90Pa=\xBE\x81a=\x9AV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a=\xD9Wa=\xD8a=\x89V[[_a=\xE6\x84\x82\x85\x01a=\xB0V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a>A\x82a>\x18V[\x90P\x91\x90PV[a>Q\x81a>7V[\x82RPPV[_a>b\x83\x83a>HV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a>\x84\x82a=\xEFV[a>\x8E\x81\x85a=\xF9V[\x93Pa>\x99\x83a>\tV[\x80_[\x83\x81\x10\x15a>\xC9W\x81Qa>\xB0\x88\x82a>WV[\x97Pa>\xBB\x83a>nV[\x92PP`\x01\x81\x01\x90Pa>\x9CV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra>\xEE\x81\x84a>zV[\x90P\x92\x91PPV[a>\xFF\x81a=\x91V[\x82RPPV[_` \x82\x01\x90Pa?\x18_\x83\x01\x84a>\xF6V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a?UW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa?:V[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a?z\x82a?\x1EV[a?\x84\x81\x85a?(V[\x93Pa?\x94\x81\x85` \x86\x01a?8V[a?\x9D\x81a?`V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra?\xC0\x81\x84a?pV[\x90P\x92\x91PPV[a?\xD1\x81a>7V[\x81\x14a?\xDBW_\x80\xFD[PV[_\x815\x90Pa?\xEC\x81a?\xC8V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a@0\x82a?`V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a@OWa@Na?\xFAV[[\x80`@RPPPV[_a@aa=\x80V[\x90Pa@m\x82\x82a@'V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a@\x8CWa@\x8Ba?\xFAV[[a@\x95\x82a?`V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a@\xC2a@\xBD\x84a@rV[a@XV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a@\xDEWa@\xDDa?\xF6V[[a@\xE9\x84\x82\x85a@\xA2V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12aA\x05WaA\x04a?\xF2V[[\x815aA\x15\x84\x82` \x86\x01a@\xB0V[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aA4WaA3a=\x89V[[_aAA\x85\x82\x86\x01a?\xDEV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aAbWaAaa=\x8DV[[aAn\x85\x82\x86\x01a@\xF1V[\x91PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[aA\x8A\x81aAxV[\x82RPPV[_` \x82\x01\x90PaA\xA3_\x83\x01\x84aA\x81V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aA\xBFWaA\xBEa=\x89V[[_aA\xCC\x85\x82\x86\x01a=\xB0V[\x92PP` aA\xDD\x85\x82\x86\x01a?\xDEV[\x91PP\x92P\x92\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aB\x01\x82a?\x1EV[aB\x0B\x81\x85aA\xE7V[\x93PaB\x1B\x81\x85` \x86\x01a?8V[aB$\x81a?`V[\x84\x01\x91PP\x92\x91PPV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaBI\x82\x82aA\xF7V[\x91PP` \x83\x01QaB^` \x86\x01\x82a>HV[P`@\x83\x01QaBq`@\x86\x01\x82a>HV[P``\x83\x01Q\x84\x82\x03``\x86\x01RaB\x89\x82\x82aA\xF7V[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaB\xAE\x81\x84aB/V[\x90P\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[aB\xCA\x81aB\xB6V[\x82RPPV[_` \x82\x01\x90PaB\xE3_\x83\x01\x84aB\xC1V[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`!`\x04R`$_\xFD[`\x08\x81\x10aC'WaC&aB\xE9V[[PV[_\x81\x90PaC7\x82aC\x16V[\x91\x90PV[_aCF\x82aC*V[\x90P\x91\x90PV[aCV\x81aC<V[\x82RPPV[_` \x82\x01\x90PaCo_\x83\x01\x84aCMV[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12aC\x92WaC\x91a?\xF2V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aC\xAFWaC\xAEaCuV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15aC\xCBWaC\xCAaCyV[[\x92P\x92\x90PV[_\x80\x83`\x1F\x84\x01\x12aC\xE7WaC\xE6a?\xF2V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aD\x04WaD\x03aCuV[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15aD WaD\x1FaCyV[[\x92P\x92\x90PV[_\x80\xFD[_`@\x82\x84\x03\x12\x15aD@WaD?aD'V[[\x81\x90P\x92\x91PPV[_\x80_\x80_`\x80\x86\x88\x03\x12\x15aDbWaDaa=\x89V[[_\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aD\x7FWaD~a=\x8DV[[aD\x8B\x88\x82\x89\x01aC}V[\x95P\x95PP` \x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aD\xAEWaD\xADa=\x8DV[[aD\xBA\x88\x82\x89\x01aC\xD2V[\x93P\x93PP`@aD\xCD\x88\x82\x89\x01aD+V[\x91PP\x92\x95P\x92\x95\x90\x93PV[`\x08\x81\x10aD\xE6W_\x80\xFD[PV[_\x815\x90PaD\xF7\x81aD\xDAV[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aE\x13WaE\x12a=\x89V[[_aE \x85\x82\x86\x01a=\xB0V[\x92PP` aE1\x85\x82\x86\x01aD\xE9V[\x91PP\x92P\x92\x90PV[_\x80_\x80`@\x85\x87\x03\x12\x15aESWaERa=\x89V[[_\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aEpWaEoa=\x8DV[[aE|\x87\x82\x88\x01aC}V[\x94P\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aE\x9FWaE\x9Ea=\x8DV[[aE\xAB\x87\x82\x88\x01aC\xD2V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[aE\xC2\x81a=\x91V[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aE\xEC\x82aE\xC8V[aE\xF6\x81\x85aE\xD2V[\x93PaF\x06\x81\x85` \x86\x01a?8V[aF\x0F\x81a?`V[\x84\x01\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaF]\x82\x82aA\xF7V[\x91PP` \x83\x01QaFr` \x86\x01\x82a>HV[P`@\x83\x01QaF\x85`@\x86\x01\x82a>HV[P``\x83\x01Q\x84\x82\x03``\x86\x01RaF\x9D\x82\x82aA\xF7V[\x91PP\x80\x91PP\x92\x91PPV[_aF\xB5\x83\x83aFCV[\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aF\xD3\x82aF\x1AV[aF\xDD\x81\x85aF$V[\x93P\x83` \x82\x02\x85\x01aF\xEF\x85aF4V[\x80_[\x85\x81\x10\x15aG*W\x84\x84\x03\x89R\x81QaG\x0B\x85\x82aF\xAAV[\x94PaG\x16\x83aF\xBDV[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaF\xF2V[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[_`\x80\x83\x01_\x83\x01QaGQ_\x86\x01\x82aE\xB9V[P` \x83\x01QaGd` \x86\x01\x82aE\xB9V[P`@\x83\x01Q\x84\x82\x03`@\x86\x01RaG|\x82\x82aE\xE2V[\x91PP``\x83\x01Q\x84\x82\x03``\x86\x01RaG\x96\x82\x82aF\xC9V[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaG\xBB\x81\x84aG<V[\x90P\x92\x91PPV[_\x81\x90P\x92\x91PPV[_aG\xD7\x82a?\x1EV[aG\xE1\x81\x85aG\xC3V[\x93PaG\xF1\x81\x85` \x86\x01a?8V[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aH1`\x02\x83aG\xC3V[\x91PaH<\x82aG\xFDV[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aH{`\x01\x83aG\xC3V[\x91PaH\x86\x82aHGV[`\x01\x82\x01\x90P\x91\x90PV[_aH\x9C\x82\x87aG\xCDV[\x91PaH\xA7\x82aH%V[\x91PaH\xB3\x82\x86aG\xCDV[\x91PaH\xBE\x82aHoV[\x91PaH\xCA\x82\x85aG\xCDV[\x91PaH\xD5\x82aHoV[\x91PaH\xE1\x82\x84aG\xCDV[\x91P\x81\x90P\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_aI&\x82a=\x91V[\x91PaI1\x83a=\x91V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15aIIWaIHaH\xEFV[[\x92\x91PPV[_`@\x82\x01\x90PaIb_\x83\x01\x85a>\xF6V[aIo` \x83\x01\x84a>\xF6V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80aI\xBAW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03aI\xCDWaI\xCCaIvV[[P\x91\x90PV[aI\xDC\x81a>7V[\x82RPPV[_`@\x82\x01\x90PaI\xF5_\x83\x01\x85a>\xF6V[aJ\x02` \x83\x01\x84aI\xD3V[\x93\x92PPPV[_\x81Q\x90PaJ\x17\x81a?\xC8V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aJ2WaJ1a=\x89V[[_aJ?\x84\x82\x85\x01aJ\tV[\x91PP\x92\x91PPV[_` \x82\x01\x90PaJ[_\x83\x01\x84aI\xD3V[\x92\x91PPV[_aJo` \x84\x01\x84a=\xB0V[\x90P\x92\x91PPV[`@\x82\x01aJ\x87_\x83\x01\x83aJaV[aJ\x93_\x85\x01\x82aE\xB9V[PaJ\xA1` \x83\x01\x83aJaV[aJ\xAE` \x85\x01\x82aE\xB9V[PPPPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01RaJ\xCC\x81\x86aG<V[\x90P\x81\x81\x03` \x83\x01RaJ\xE0\x81\x85aG<V[\x90PaJ\xEF`@\x83\x01\x84aJwV[\x94\x93PPPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01RaK\x0F\x81\x85aG<V[\x90PaK\x1E` \x83\x01\x84a>\xF6V[\x93\x92PPPV[_`@\x82\x01\x90PaK8_\x83\x01\x85a>\xF6V[aKE` \x83\x01\x84aCMV[\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aKg\x83\x85aKLV[\x93PaKt\x83\x85\x84a@\xA2V[aK}\x83a?`V[\x84\x01\x90P\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aK\xC9WaK\xC8aK\xA9V[[\x83\x81\x01\x92P\x825\x91P` \x83\x01\x92Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aK\xF1WaK\xF0aK\xA1V[[`\x01\x82\x026\x03\x83\x13\x15aL\x07WaL\x06aK\xA5V[[P\x92P\x92\x90PV[_aL\x1A\x83\x85aA\xE7V[\x93PaL'\x83\x85\x84a@\xA2V[aL0\x83a?`V[\x84\x01\x90P\x93\x92PPPV[_aLI` \x84\x01\x84a?\xDEV[\x90P\x92\x91PPV[_`\x80\x83\x01aLb_\x84\x01\x84aK\xADV[\x85\x83\x03_\x87\x01RaLt\x83\x82\x84aL\x0FV[\x92PPPaL\x85` \x84\x01\x84aL;V[aL\x92` \x86\x01\x82a>HV[PaL\xA0`@\x84\x01\x84aL;V[aL\xAD`@\x86\x01\x82a>HV[PaL\xBB``\x84\x01\x84aK\xADV[\x85\x83\x03``\x87\x01RaL\xCE\x83\x82\x84aL\x0FV[\x92PPP\x80\x91PP\x92\x91PPV[_aL\xE7\x83\x83aLQV[\x90P\x92\x91PPV[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aM\nWaM\taK\xA9V[[\x82\x81\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aM-\x83\x85aK\x88V[\x93P\x83` \x84\x02\x85\x01aM?\x84aK\x98V[\x80_[\x87\x81\x10\x15aM\x82W\x84\x84\x03\x89RaMY\x82\x84aL\xEFV[aMc\x85\x82aL\xDCV[\x94PaMn\x83aM\x16V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaMBV[P\x82\x97P\x87\x94PPPPP\x93\x92PPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01RaM\xAD\x81\x86\x88aK\\V[\x90P\x81\x81\x03` \x83\x01RaM\xC2\x81\x84\x86aM\"V[\x90P\x95\x94PPPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[aM\xE9\x81aM\xCDV[\x82RPPV[_` \x82\x01\x90PaN\x02_\x83\x01\x84aM\xE0V[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[aN>\x81aAxV[\x81\x14aNHW_\x80\xFD[PV[_\x81Q\x90PaNY\x81aN5V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aNtWaNsa=\x89V[[_aN\x81\x84\x82\x85\x01aNKV[\x91PP\x92\x91PPV[_aN\x94\x82a=\x91V[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03aN\xC6WaN\xC5aH\xEFV[[`\x01\x82\x01\x90P\x91\x90PV[_\x82\x90P\x92\x91PPV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[_` `\x1F\x83\x01\x04\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_`\x08\x83\x02aO7\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82aN\xFCV[aOA\x86\x83aN\xFCV[\x95P\x80\x19\x84\x16\x93P\x80\x86\x16\x84\x17\x92PPP\x93\x92PPPV[_\x81\x90P\x91\x90PV[_aO|aOwaOr\x84a=\x91V[aOYV[a=\x91V[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aO\x95\x83aObV[aO\xA9aO\xA1\x82aO\x83V[\x84\x84TaO\x08V[\x82UPPPPV[_\x90V[aO\xBDaO\xB1V[aO\xC8\x81\x84\x84aO\x8CV[PPPV[[\x81\x81\x10\x15aO\xEBWaO\xE0_\x82aO\xB5V[`\x01\x81\x01\x90PaO\xCEV[PPV[`\x1F\x82\x11\x15aP0WaP\x01\x81aN\xDBV[aP\n\x84aN\xEDV[\x81\x01` \x85\x10\x15aP\x19W\x81\x90P[aP-aP%\x85aN\xEDV[\x83\x01\x82aO\xCDV[PP[PPPV[_\x82\x82\x1C\x90P\x92\x91PPV[_aPP_\x19\x84`\x08\x02aP5V[\x19\x80\x83\x16\x91PP\x92\x91PPV[_aPh\x83\x83aPAV[\x91P\x82`\x02\x02\x82\x17\x90P\x92\x91PPV[aP\x82\x83\x83aN\xD1V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aP\x9BWaP\x9Aa?\xFAV[[aP\xA5\x82TaI\xA3V[aP\xB0\x82\x82\x85aO\xEFV[_`\x1F\x83\x11`\x01\x81\x14aP\xDDW_\x84\x15aP\xCBW\x82\x87\x015\x90P[aP\xD5\x85\x82aP]V[\x86UPaQ<V[`\x1F\x19\x84\x16aP\xEB\x86aN\xDBV[_[\x82\x81\x10\x15aQ\x12W\x84\x89\x015\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90PaP\xEDV[\x86\x83\x10\x15aQ/W\x84\x89\x015aQ+`\x1F\x89\x16\x82aPAV[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aQ\x99WaQ\x98aQrV[[\x80\x83\x01\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15aQ\xBAWaQ\xB9a=\x89V[[_aQ\xC7\x84\x82\x85\x01a?\xDEV[\x91PP\x92\x91PPV[_`@\x82\x01\x90PaQ\xE3_\x83\x01\x86a>\xF6V[\x81\x81\x03` \x83\x01RaQ\xF6\x81\x84\x86aM\"V[\x90P\x94\x93PPPPV[_``\x82\x01\x90PaR\x13_\x83\x01\x87aI\xD3V[aR ` \x83\x01\x86a>\xF6V[\x81\x81\x03`@\x83\x01RaR3\x81\x84\x86aM\"V[\x90P\x95\x94PPPPPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aRZWaRYaQrV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aR|WaR{aQvV[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15aR\x98WaR\x97aQzV[[P\x92P\x92\x90PV[_\x82\x90P\x92\x91PPV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[`\x1F\x82\x11\x15aR\xFDWaR\xCE\x81aR\xAAV[aR\xD7\x84aN\xEDV[\x81\x01` \x85\x10\x15aR\xE6W\x81\x90P[aR\xFAaR\xF2\x85aN\xEDV[\x83\x01\x82aO\xCDV[PP[PPPV[aS\x0C\x83\x83aR\xA0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aS%WaS$a?\xFAV[[aS/\x82TaI\xA3V[aS:\x82\x82\x85aR\xBCV[_`\x1F\x83\x11`\x01\x81\x14aSgW_\x84\x15aSUW\x82\x87\x015\x90P[aS_\x85\x82aP]V[\x86UPaS\xC6V[`\x1F\x19\x84\x16aSu\x86aR\xAAV[_[\x82\x81\x10\x15aS\x9CW\x84\x89\x015\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90PaSwV[\x86\x83\x10\x15aS\xB9W\x84\x89\x015aS\xB5`\x1F\x89\x16\x82aPAV[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPPV[aS\xDA\x83\x83\x83aS\x02V[PPPV[_\x815aS\xEB\x81a?\xC8V[\x80\x91PP\x91\x90PV[_\x81_\x1B\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaT\x1E\x84aS\xF4V[\x93P\x80\x19\x83\x16\x92P\x80\x84\x16\x83\x17\x91PP\x92\x91PPV[_aTNaTIaTD\x84a>\x18V[aOYV[a>\x18V[\x90P\x91\x90PV[_aT_\x82aT4V[\x90P\x91\x90PV[_aTp\x82aTUV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aT\x89\x82aTfV[aT\x9CaT\x95\x82aTwV[\x83TaS\xFFV[\x82UPPPV[_\x81\x01_\x83\x01aT\xB3\x81\x85aR>V[aT\xBE\x81\x83\x86aS\xCFV[PPPP`\x01\x81\x01` \x83\x01\x80aT\xD4\x81aS\xDFV[\x90PaT\xE0\x81\x84aT\x80V[PPP`\x02\x81\x01`@\x83\x01\x80aT\xF5\x81aS\xDFV[\x90PaU\x01\x81\x84aT\x80V[PPP`\x03\x81\x01``\x83\x01aU\x16\x81\x85aR>V[aU!\x81\x83\x86aS\xCFV[PPPPPPV[aU3\x82\x82aT\xA3V[PPV[_\x81\x90P\x92\x91PPV[_aUK\x82aE\xC8V[aUU\x81\x85aU7V[\x93PaUe\x81\x85` \x86\x01a?8V[\x80\x84\x01\x91PP\x92\x91PPV[_aU|\x82\x84aUAV[\x91P\x81\x90P\x92\x91PPV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ContextStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ContextStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from_underlying(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into_underlying(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl From<u8> for ContextStatus {
            fn from(value: u8) -> Self {
                Self::from_underlying(value)
            }
        }
        #[automatically_derived]
        impl From<ContextStatus> for u8 {
            fn from(value: ContextStatus) -> Self {
                value.into_underlying()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ContextStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ContextStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorContext { uint256 contextId; uint256 previousContextId; bytes blob; CoprocessorV2[] coprocessors; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub previousContextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub blob: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContext> for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContext) -> Self {
                (
                    value.contextId,
                    value.previousContextId,
                    value.blob,
                    value.coprocessors,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    previousContextId: tuple.1,
                    blob: tuple.2,
                    coprocessors: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CoprocessorContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousContextId),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.blob,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorContext {
            const NAME: &'static str = "CoprocessorContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorContext(uint256 contextId,uint256 previousContextId,bytes blob,CoprocessorV2[] coprocessors)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <CoprocessorV2 as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <CoprocessorV2 as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contextId)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.previousContextId,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.blob,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.coprocessors)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contextId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.previousContextId,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.blob,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.coprocessors,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contextId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.previousContextId,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.blob,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    CoprocessorV2,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.coprocessors,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorContextTimePeriods { uint256 preActivationTimePeriod; uint256 suspendedTimePeriod; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContextTimePeriods {
        #[allow(missing_docs)]
        pub preActivationTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContextTimePeriods>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContextTimePeriods) -> Self {
                (value.preActivationTimePeriod, value.suspendedTimePeriod)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorContextTimePeriods {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preActivationTimePeriod: tuple.0,
                    suspendedTimePeriod: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorContextTimePeriods {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self>
        for CoprocessorContextTimePeriods {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.preActivationTimePeriod,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedTimePeriod),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorContextTimePeriods {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorContextTimePeriods {
            const NAME: &'static str = "CoprocessorContextTimePeriods";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorContextTimePeriods(uint256 preActivationTimePeriod,uint256 suspendedTimePeriod)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.preActivationTimePeriod,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.suspendedTimePeriod,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorContextTimePeriods {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.preActivationTimePeriod,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.suspendedTimePeriod,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.preActivationTimePeriod,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.suspendedTimePeriod,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorV2 { string name; address txSenderAddress; address signerAddress; string storageUrl; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorV2 {
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub storageUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::String,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::String,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::String,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::String,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorV2> for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorV2) -> Self {
                (
                    value.name,
                    value.txSenderAddress,
                    value.signerAddress,
                    value.storageUrl,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CoprocessorV2 {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    name: tuple.0,
                    txSenderAddress: tuple.1,
                    signerAddress: tuple.2,
                    storageUrl: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorV2 {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CoprocessorV2 {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.storageUrl,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorV2 {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorV2 {
            const NAME: &'static str = "CoprocessorV2";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorV2(string name,address txSenderAddress,address signerAddress,string storageUrl)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.name,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.txSenderAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.signerAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.storageUrl,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorV2 {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.name,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.txSenderAddress,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.signerAddress,
                    )
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.storageUrl,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.name,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.txSenderAddress,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.signerAddress,
                    out,
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.storageUrl,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ActiveContextOngoing(uint256)` and selector `0x7eea432b`.
```solidity
error ActiveContextOngoing(uint256 activeContextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActiveContextOngoing {
        #[allow(missing_docs)]
        pub activeContextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActiveContextOngoing> for UnderlyingRustTuple<'_> {
            fn from(value: ActiveContextOngoing) -> Self {
                (value.activeContextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ActiveContextOngoing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { activeContextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActiveContextOngoing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActiveContextOngoing(uint256)";
            const SELECTOR: [u8; 4] = [126u8, 234u8, 67u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.activeContextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressEmptyCode(address)` and selector `0x9996b315`.
```solidity
error AddressEmptyCode(address target);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressEmptyCode {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressEmptyCode> for UnderlyingRustTuple<'_> {
            fn from(value: AddressEmptyCode) -> Self {
                (value.target,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressEmptyCode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { target: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressEmptyCode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressEmptyCode(address)";
            const SELECTOR: [u8; 4] = [153u8, 150u8, 179u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextAlreadyExists(uint256)` and selector `0x6653f6d7`.
```solidity
error ContextAlreadyExists(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextAlreadyExists {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: ContextAlreadyExists) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextAlreadyExists(uint256)";
            const SELECTOR: [u8; 4] = [102u8, 83u8, 246u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextDoesNotExist(uint256)` and selector `0x61544cfc`.
```solidity
error ContextDoesNotExist(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextDoesNotExist {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: ContextDoesNotExist) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextDoesNotExist(uint256)";
            const SELECTOR: [u8; 4] = [97u8, 84u8, 76u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextIsActive(uint256)` and selector `0xcd494e49`.
```solidity
error ContextIsActive(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextIsActive {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextIsActive> for UnderlyingRustTuple<'_> {
            fn from(value: ContextIsActive) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextIsActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextIsActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextIsActive(uint256)";
            const SELECTOR: [u8; 4] = [205u8, 73u8, 78u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextIsGenerating(uint256)` and selector `0x0ddd14ca`.
```solidity
error ContextIsGenerating(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextIsGenerating {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextIsGenerating> for UnderlyingRustTuple<'_> {
            fn from(value: ContextIsGenerating) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextIsGenerating {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextIsGenerating {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextIsGenerating(uint256)";
            const SELECTOR: [u8; 4] = [13u8, 221u8, 20u8, 202u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotActive(uint256)` and selector `0x331486b3`.
```solidity
error ContextNotActive(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotActive {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotActive) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotActive(uint256)";
            const SELECTOR: [u8; 4] = [51u8, 20u8, 134u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotGenerated(uint256)` and selector `0xc0b5ee66`.
```solidity
error ContextNotGenerated(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotGenerated {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotGenerated> for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotGenerated) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextNotGenerated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotGenerated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotGenerated(uint256)";
            const SELECTOR: [u8; 4] = [192u8, 181u8, 238u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotPreActivatedOrSuspended(uint256)` and selector `0x12b49e3d`.
```solidity
error ContextNotPreActivatedOrSuspended(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotPreActivatedOrSuspended {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotPreActivatedOrSuspended>
        for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotPreActivatedOrSuspended) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ContextNotPreActivatedOrSuspended {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotPreActivatedOrSuspended {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotPreActivatedOrSuspended(uint256)";
            const SELECTOR: [u8; 4] = [18u8, 180u8, 158u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotSuspended(uint256)` and selector `0x77bf5846`.
```solidity
error ContextNotSuspended(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotSuspended {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotSuspended> for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotSuspended) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextNotSuspended {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotSuspended {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotSuspended(uint256)";
            const SELECTOR: [u8; 4] = [119u8, 191u8, 88u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorContextNotInitialized(uint256)` and selector `0xabf9e7b0`.
```solidity
error CoprocessorContextNotInitialized(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContextNotInitialized {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContextNotInitialized>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContextNotInitialized) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorContextNotInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorContextNotInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorContextNotInitialized(uint256)";
            const SELECTOR: [u8; 4] = [171u8, 249u8, 231u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorSignerAddressesNotUnique(address,uint256,(string,address,address,string)[])` and selector `0xc826e1a2`.
```solidity
error CoprocessorSignerAddressesNotUnique(address signerAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorSignerAddressesNotUnique {
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorSignerAddressesNotUnique>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorSignerAddressesNotUnique) -> Self {
                (value.signerAddress, value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorSignerAddressesNotUnique {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    signerAddress: tuple.0,
                    coprocessorIndex: tuple.1,
                    coprocessors: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorSignerAddressesNotUnique {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorSignerAddressesNotUnique(address,uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [200u8, 38u8, 225u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorTxSenderAddressesNotUnique(address,uint256,(string,address,address,string)[])` and selector `0x64d52759`.
```solidity
error CoprocessorTxSenderAddressesNotUnique(address txSenderAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorTxSenderAddressesNotUnique {
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorTxSenderAddressesNotUnique>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorTxSenderAddressesNotUnique) -> Self {
                (value.txSenderAddress, value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorTxSenderAddressesNotUnique {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    txSenderAddress: tuple.0,
                    coprocessorIndex: tuple.1,
                    coprocessors: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorTxSenderAddressesNotUnique {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorTxSenderAddressesNotUnique(address,uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [100u8, 213u8, 39u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967InvalidImplementation(address)` and selector `0x4c9c8ce3`.
```solidity
error ERC1967InvalidImplementation(address implementation);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967InvalidImplementation {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967InvalidImplementation>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967InvalidImplementation) -> Self {
                (value.implementation,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1967InvalidImplementation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { implementation: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967InvalidImplementation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967InvalidImplementation(address)";
            const SELECTOR: [u8; 4] = [76u8, 156u8, 140u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967NonPayable()` and selector `0xb398979f`.
```solidity
error ERC1967NonPayable();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967NonPayable;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967NonPayable> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967NonPayable) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1967NonPayable {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967NonPayable {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967NonPayable()";
            const SELECTOR: [u8; 4] = [179u8, 152u8, 151u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EmptyCoprocessors()` and selector `0x8af082ef`.
```solidity
error EmptyCoprocessors();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyCoprocessors;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyCoprocessors> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyCoprocessors) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyCoprocessors {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyCoprocessors {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyCoprocessors()";
            const SELECTOR: [u8; 4] = [138u8, 240u8, 130u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FailedCall()` and selector `0xd6bda275`.
```solidity
error FailedCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedCall;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedCall> for UnderlyingRustTuple<'_> {
            fn from(value: FailedCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedCall()";
            const SELECTOR: [u8; 4] = [214u8, 189u8, 162u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `HostChainNotRegistered(uint256)` and selector `0xb6679c3b`.
```solidity
error HostChainNotRegistered(uint256 chainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HostChainNotRegistered {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<HostChainNotRegistered> for UnderlyingRustTuple<'_> {
            fn from(value: HostChainNotRegistered) -> Self {
                (value.chainId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for HostChainNotRegistered {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { chainId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for HostChainNotRegistered {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "HostChainNotRegistered(uint256)";
            const SELECTOR: [u8; 4] = [182u8, 103u8, 156u8, 59u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidContextStatusForceUpdate(uint256,uint8)` and selector `0xf0bed68f`.
```solidity
error InvalidContextStatusForceUpdate(uint256 contextId, ContextStatus status);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidContextStatusForceUpdate {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            ContextStatus,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            <ContextStatus as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidContextStatusForceUpdate>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidContextStatusForceUpdate) -> Self {
                (value.contextId, value.status)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidContextStatusForceUpdate {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    status: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidContextStatusForceUpdate {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidContextStatusForceUpdate(uint256,uint8)";
            const SELECTOR: [u8; 4] = [240u8, 190u8, 214u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <ContextStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidNullContextId()` and selector `0xcb17b7a5`.
```solidity
error InvalidNullContextId();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidNullContextId;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidNullContextId> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidNullContextId) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidNullContextId {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidNullContextId {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidNullContextId()";
            const SELECTOR: [u8; 4] = [203u8, 23u8, 183u8, 165u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoActiveCoprocessorContext()` and selector `0x046593ea`.
```solidity
error NoActiveCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoActiveCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoActiveCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoActiveCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoActiveCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoActiveCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoActiveCoprocessorContext()";
            const SELECTOR: [u8; 4] = [4u8, 101u8, 147u8, 234u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoPreActivationCoprocessorContext()` and selector `0xb9e861b2`.
```solidity
error NoPreActivationCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoPreActivationCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoPreActivationCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoPreActivationCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoPreActivationCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoPreActivationCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoPreActivationCoprocessorContext()";
            const SELECTOR: [u8; 4] = [185u8, 232u8, 97u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoSuspendedCoprocessorContext()` and selector `0x21fb08f9`.
```solidity
error NoSuspendedCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoSuspendedCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoSuspendedCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoSuspendedCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoSuspendedCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoSuspendedCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoSuspendedCoprocessorContext()";
            const SELECTOR: [u8; 4] = [33u8, 251u8, 8u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorFromContext(uint256,address)` and selector `0xc312e73e`.
```solidity
error NotCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorFromContext) -> Self {
                (value.contextId, value.coprocessorTxSenderAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    coprocessorTxSenderAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [195u8, 18u8, 231u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCustodianSigner(address)` and selector `0x391672a7`.
```solidity
error NotCustodianSigner(address signerAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCustodianSigner {
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCustodianSigner> for UnderlyingRustTuple<'_> {
            fn from(value: NotCustodianSigner) -> Self {
                (value.signerAddress,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotCustodianSigner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { signerAddress: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCustodianSigner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCustodianSigner(address)";
            const SELECTOR: [u8; 4] = [57u8, 22u8, 114u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCustodianTxSender(address)` and selector `0xf924a0cf`.
```solidity
error NotCustodianTxSender(address txSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCustodianTxSender {
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCustodianTxSender> for UnderlyingRustTuple<'_> {
            fn from(value: NotCustodianTxSender) -> Self {
                (value.txSenderAddress,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotCustodianTxSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { txSenderAddress: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCustodianTxSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCustodianTxSender(address)";
            const SELECTOR: [u8; 4] = [249u8, 36u8, 160u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotGatewayOwner(address)` and selector `0x0e56cf3d`.
```solidity
error NotGatewayOwner(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotGatewayOwner {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotGatewayOwner> for UnderlyingRustTuple<'_> {
            fn from(value: NotGatewayOwner) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotGatewayOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotGatewayOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotGatewayOwner(address)";
            const SELECTOR: [u8; 4] = [14u8, 86u8, 207u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializingFromEmptyProxy()` and selector `0x6f4f731f`.
```solidity
error NotInitializingFromEmptyProxy();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializingFromEmptyProxy;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializingFromEmptyProxy>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializingFromEmptyProxy) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotInitializingFromEmptyProxy {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializingFromEmptyProxy {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializingFromEmptyProxy()";
            const SELECTOR: [u8; 4] = [111u8, 79u8, 115u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotKmsSigner(address)` and selector `0x2a7c6ef6`.
```solidity
error NotKmsSigner(address signerAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotKmsSigner {
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotKmsSigner> for UnderlyingRustTuple<'_> {
            fn from(value: NotKmsSigner) -> Self {
                (value.signerAddress,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotKmsSigner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { signerAddress: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotKmsSigner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotKmsSigner(address)";
            const SELECTOR: [u8; 4] = [42u8, 124u8, 110u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotKmsTxSender(address)` and selector `0xaee86323`.
```solidity
error NotKmsTxSender(address txSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotKmsTxSender {
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotKmsTxSender> for UnderlyingRustTuple<'_> {
            fn from(value: NotKmsTxSender) -> Self {
                (value.txSenderAddress,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotKmsTxSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { txSenderAddress: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotKmsTxSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotKmsTxSender(address)";
            const SELECTOR: [u8; 4] = [174u8, 232u8, 99u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NullCoprocessorSignerAddress(uint256,(string,address,address,string)[])` and selector `0x4a6c5974`.
```solidity
error NullCoprocessorSignerAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NullCoprocessorSignerAddress {
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NullCoprocessorSignerAddress>
        for UnderlyingRustTuple<'_> {
            fn from(value: NullCoprocessorSignerAddress) -> Self {
                (value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NullCoprocessorSignerAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    coprocessorIndex: tuple.0,
                    coprocessors: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NullCoprocessorSignerAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NullCoprocessorSignerAddress(uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [74u8, 108u8, 89u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NullCoprocessorTxSenderAddress(uint256,(string,address,address,string)[])` and selector `0x9edb7861`.
```solidity
error NullCoprocessorTxSenderAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NullCoprocessorTxSenderAddress {
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NullCoprocessorTxSenderAddress>
        for UnderlyingRustTuple<'_> {
            fn from(value: NullCoprocessorTxSenderAddress) -> Self {
                (value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NullCoprocessorTxSenderAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    coprocessorIndex: tuple.0,
                    coprocessors: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NullCoprocessorTxSenderAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NullCoprocessorTxSenderAddress(uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [158u8, 219u8, 120u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `PreActivationContextOngoing(uint256)` and selector `0xc470c022`.
```solidity
error PreActivationContextOngoing(uint256 preActivationContextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PreActivationContextOngoing {
        #[allow(missing_docs)]
        pub preActivationContextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PreActivationContextOngoing>
        for UnderlyingRustTuple<'_> {
            fn from(value: PreActivationContextOngoing) -> Self {
                (value.preActivationContextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for PreActivationContextOngoing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preActivationContextId: tuple.0,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PreActivationContextOngoing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PreActivationContextOngoing(uint256)";
            const SELECTOR: [u8; 4] = [196u8, 112u8, 192u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.preActivationContextId,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SuspendedContextOngoing(uint256)` and selector `0x7022ec41`.
```solidity
error SuspendedContextOngoing(uint256 suspendedContextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SuspendedContextOngoing {
        #[allow(missing_docs)]
        pub suspendedContextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SuspendedContextOngoing> for UnderlyingRustTuple<'_> {
            fn from(value: SuspendedContextOngoing) -> Self {
                (value.suspendedContextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SuspendedContextOngoing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    suspendedContextId: tuple.0,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SuspendedContextOngoing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SuspendedContextOngoing(uint256)";
            const SELECTOR: [u8; 4] = [112u8, 34u8, 236u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedContextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnauthorizedCallContext()` and selector `0xe07c8dba`.
```solidity
error UUPSUnauthorizedCallContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnauthorizedCallContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnauthorizedCallContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnauthorizedCallContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnauthorizedCallContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnauthorizedCallContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnauthorizedCallContext()";
            const SELECTOR: [u8; 4] = [224u8, 124u8, 141u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnsupportedProxiableUUID(bytes32)` and selector `0xaa1d49a4`.
```solidity
error UUPSUnsupportedProxiableUUID(bytes32 slot);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnsupportedProxiableUUID {
        #[allow(missing_docs)]
        pub slot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnsupportedProxiableUUID>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnsupportedProxiableUUID) -> Self {
                (value.slot,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnsupportedProxiableUUID {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { slot: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnsupportedProxiableUUID {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnsupportedProxiableUUID(bytes32)";
            const SELECTOR: [u8; 4] = [170u8, 29u8, 73u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ActivateCoprocessorContext(uint256)` and selector `0x6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71`.
```solidity
event ActivateCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActivateCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActivateCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ActivateCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                108u8, 140u8, 4u8, 201u8, 254u8, 163u8, 55u8, 114u8, 11u8, 125u8, 250u8,
                220u8, 163u8, 101u8, 232u8, 80u8, 3u8, 81u8, 20u8, 253u8, 8u8, 27u8,
                88u8, 208u8, 48u8, 175u8, 190u8, 139u8, 93u8, 195u8, 190u8, 113u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &ActivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CompromiseCoprocessorContext(uint256)` and selector `0xee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf21`.
```solidity
event CompromiseCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CompromiseCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CompromiseCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CompromiseCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                238u8, 126u8, 248u8, 57u8, 99u8, 65u8, 113u8, 37u8, 210u8, 116u8, 48u8,
                120u8, 159u8, 198u8, 233u8, 65u8, 148u8, 56u8, 30u8, 130u8, 195u8, 205u8,
                166u8, 130u8, 96u8, 208u8, 231u8, 207u8, 195u8, 30u8, 175u8, 33u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CompromiseCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CompromiseCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &CompromiseCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DeactivateCoprocessorContext(uint256)` and selector `0x1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898`.
```solidity
event DeactivateCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DeactivateCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DeactivateCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DeactivateCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                27u8, 170u8, 8u8, 216u8, 222u8, 24u8, 232u8, 226u8, 40u8, 118u8, 145u8,
                177u8, 48u8, 151u8, 72u8, 1u8, 9u8, 129u8, 235u8, 223u8, 209u8, 42u8,
                23u8, 61u8, 133u8, 116u8, 101u8, 117u8, 72u8, 165u8, 40u8, 152u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DeactivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DeactivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DeactivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DestroyCoprocessorContext(uint256)` and selector `0xf20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be5`.
```solidity
event DestroyCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DestroyCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DestroyCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DestroyCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                242u8, 11u8, 41u8, 152u8, 4u8, 201u8, 193u8, 214u8, 218u8, 59u8, 130u8,
                65u8, 76u8, 122u8, 160u8, 168u8, 69u8, 205u8, 186u8, 186u8, 226u8, 217u8,
                14u8, 70u8, 227u8, 96u8, 163u8, 121u8, 167u8, 123u8, 123u8, 229u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DestroyCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DestroyCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DestroyCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `InitializeCoprocessorContexts(bytes,(string,address,address,string)[])` and selector `0xd474068ecf914caa04868493bcefa56bfb049a54f1612c2726d112e1e60663b9`.
```solidity
event InitializeCoprocessorContexts(bytes blob, CoprocessorV2[] coprocessors);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct InitializeCoprocessorContexts {
        #[allow(missing_docs)]
        pub blob: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for InitializeCoprocessorContexts {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "InitializeCoprocessorContexts(bytes,(string,address,address,string)[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                212u8, 116u8, 6u8, 142u8, 207u8, 145u8, 76u8, 170u8, 4u8, 134u8, 132u8,
                147u8, 188u8, 239u8, 165u8, 107u8, 251u8, 4u8, 154u8, 84u8, 241u8, 97u8,
                44u8, 39u8, 38u8, 209u8, 18u8, 225u8, 230u8, 6u8, 99u8, 185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    blob: data.0,
                    coprocessors: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.blob,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for InitializeCoprocessorContexts {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&InitializeCoprocessorContexts> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &InitializeCoprocessorContexts,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `NewCoprocessorContext((uint256,uint256,bytes,(string,address,address,string)[]),(uint256,uint256,bytes,(string,address,address,string)[]),(uint256,uint256))` and selector `0xbbb104c495886e5daa3efb6b281ec2840c69385af5cbfc1582fcf700de1ecd4b`.
```solidity
event NewCoprocessorContext(CoprocessorContext activeCoprocessorContext, CoprocessorContext newCoprocessorContext, CoprocessorContextTimePeriods timePeriods);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewCoprocessorContext {
        #[allow(missing_docs)]
        pub activeCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub newCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewCoprocessorContext {
            type DataTuple<'a> = (
                CoprocessorContext,
                CoprocessorContext,
                CoprocessorContextTimePeriods,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "NewCoprocessorContext((uint256,uint256,bytes,(string,address,address,string)[]),(uint256,uint256,bytes,(string,address,address,string)[]),(uint256,uint256))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                187u8, 177u8, 4u8, 196u8, 149u8, 136u8, 110u8, 93u8, 170u8, 62u8, 251u8,
                107u8, 40u8, 30u8, 194u8, 132u8, 12u8, 105u8, 56u8, 90u8, 245u8, 203u8,
                252u8, 21u8, 130u8, 252u8, 247u8, 0u8, 222u8, 30u8, 205u8, 75u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    activeCoprocessorContext: data.0,
                    newCoprocessorContext: data.1,
                    timePeriods: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.activeCoprocessorContext,
                    ),
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.newCoprocessorContext,
                    ),
                    <CoprocessorContextTimePeriods as alloy_sol_types::SolType>::tokenize(
                        &self.timePeriods,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NewCoprocessorContext) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PreActivateCoprocessorContext((uint256,uint256,bytes,(string,address,address,string)[]),uint256)` and selector `0x0425f54e602cbcf87fafd6a0b557fa5c4bc4bc6c251686255eb3bd775f452377`.
```solidity
event PreActivateCoprocessorContext(CoprocessorContext newCoprocessorContext, uint256 activationBlockTimestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreActivateCoprocessorContext {
        #[allow(missing_docs)]
        pub newCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub activationBlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreActivateCoprocessorContext {
            type DataTuple<'a> = (
                CoprocessorContext,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreActivateCoprocessorContext((uint256,uint256,bytes,(string,address,address,string)[]),uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                4u8, 37u8, 245u8, 78u8, 96u8, 44u8, 188u8, 248u8, 127u8, 175u8, 214u8,
                160u8, 181u8, 87u8, 250u8, 92u8, 75u8, 196u8, 188u8, 108u8, 37u8, 22u8,
                134u8, 37u8, 94u8, 179u8, 189u8, 119u8, 95u8, 69u8, 35u8, 119u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    newCoprocessorContext: data.0,
                    activationBlockTimestamp: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.newCoprocessorContext,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.activationBlockTimestamp,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreActivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreActivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreActivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SuspendCoprocessorContext(uint256,uint256)` and selector `0x3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc`.
```solidity
event SuspendCoprocessorContext(uint256 contextId, uint256 deactivatedBlockTimestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SuspendCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deactivatedBlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SuspendCoprocessorContext {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SuspendCoprocessorContext(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                48u8, 128u8, 242u8, 184u8, 13u8, 218u8, 71u8, 72u8, 202u8, 41u8, 38u8,
                166u8, 65u8, 250u8, 80u8, 7u8, 115u8, 80u8, 88u8, 220u8, 95u8, 90u8,
                178u8, 89u8, 78u8, 236u8, 167u8, 65u8, 151u8, 163u8, 172u8, 204u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    contextId: data.0,
                    deactivatedBlockTimestamp: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.deactivatedBlockTimestamp,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SuspendCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SuspendCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SuspendCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Upgraded(address)` and selector `0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b`.
```solidity
event Upgraded(address indexed implementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Upgraded {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Upgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Upgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { implementation: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.implementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.implementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Upgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Upgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Upgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `UPGRADE_INTERFACE_VERSION()` and selector `0xad3cb1cc`.
```solidity
function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`UPGRADE_INTERFACE_VERSION()`](UPGRADE_INTERFACE_VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for UPGRADE_INTERFACE_VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UPGRADE_INTERFACE_VERSION()";
            const SELECTOR: [u8; 4] = [173u8, 60u8, 177u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: UPGRADE_INTERFACE_VERSIONReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: UPGRADE_INTERFACE_VERSIONReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addCoprocessorContext(bytes,(string,address,address,string)[],(uint256,uint256))` and selector `0xa1364d79`.
```solidity
function addCoprocessorContext(bytes memory blob, CoprocessorV2[] memory coprocessors, CoprocessorContextTimePeriods memory timePeriods) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCoprocessorContextCall {
        #[allow(missing_docs)]
        pub blob: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`addCoprocessorContext(bytes,(string,address,address,string)[],(uint256,uint256))`](addCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCoprocessorContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
                CoprocessorContextTimePeriods,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<
                    <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
                >,
                <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCoprocessorContextCall) -> Self {
                    (value.blob, value.coprocessors, value.timePeriods)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blob: tuple.0,
                        coprocessors: tuple.1,
                        timePeriods: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCoprocessorContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addCoprocessorContextReturn {
            fn _tokenize(
                &self,
            ) -> <addCoprocessorContextCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCoprocessorContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
                CoprocessorContextTimePeriods,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addCoprocessorContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addCoprocessorContext(bytes,(string,address,address,string)[],(uint256,uint256))";
            const SELECTOR: [u8; 4] = [161u8, 54u8, 77u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.blob,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                    <CoprocessorContextTimePeriods as alloy_sol_types::SolType>::tokenize(
                        &self.timePeriods,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addCoprocessorContextReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `forceUpdateCoprocessorContextToStatus(uint256,uint8)` and selector `0xcac6a5a8`.
```solidity
function forceUpdateCoprocessorContextToStatus(uint256 contextId, ContextStatus status) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct forceUpdateCoprocessorContextToStatusCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`forceUpdateCoprocessorContextToStatus(uint256,uint8)`](forceUpdateCoprocessorContextToStatusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct forceUpdateCoprocessorContextToStatusReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                ContextStatus,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                <ContextStatus as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<forceUpdateCoprocessorContextToStatusCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: forceUpdateCoprocessorContextToStatusCall) -> Self {
                    (value.contextId, value.status)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for forceUpdateCoprocessorContextToStatusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        status: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<forceUpdateCoprocessorContextToStatusReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: forceUpdateCoprocessorContextToStatusReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for forceUpdateCoprocessorContextToStatusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl forceUpdateCoprocessorContextToStatusReturn {
            fn _tokenize(
                &self,
            ) -> <forceUpdateCoprocessorContextToStatusCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for forceUpdateCoprocessorContextToStatusCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>, ContextStatus);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = forceUpdateCoprocessorContextToStatusReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "forceUpdateCoprocessorContextToStatus(uint256,uint8)";
            const SELECTOR: [u8; 4] = [202u8, 198u8, 165u8, 168u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <ContextStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                forceUpdateCoprocessorContextToStatusReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveCoprocessorContext()` and selector `0xfed9716b`.
```solidity
function getActiveCoprocessorContext() external view returns (CoprocessorContext memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveCoprocessorContext()`](getActiveCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextReturn {
        #[allow(missing_docs)]
        pub _0: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CoprocessorContext,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CoprocessorContext as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveCoprocessorContextCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <CoprocessorContext as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (CoprocessorContext,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveCoprocessorContext()";
            const SELECTOR: [u8; 4] = [254u8, 217u8, 113u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<CoprocessorContext as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveCoprocessorContextId()` and selector `0x991dc36d`.
```solidity
function getActiveCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveCoprocessorContextId()`](getActiveCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [153u8, 29u8, 195u8, 109u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessor(uint256,address)` and selector `0x820a91f8`.
```solidity
function getCoprocessor(uint256 contextId, address coprocessorTxSenderAddress) external view returns (CoprocessorV2 memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSenderAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessor(uint256,address)`](getCoprocessorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorReturn {
        #[allow(missing_docs)]
        pub _0: <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorCall) -> Self {
                    (value.contextId, value.coprocessorTxSenderAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCoprocessorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        coprocessorTxSenderAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CoprocessorV2,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <CoprocessorV2 as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (CoprocessorV2,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessor(uint256,address)";
            const SELECTOR: [u8; 4] = [130u8, 10u8, 145u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSenderAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<CoprocessorV2 as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorActivationBlockTimestamp(uint256)` and selector `0xb3f5403a`.
```solidity
function getCoprocessorActivationBlockTimestamp(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorActivationBlockTimestampCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorActivationBlockTimestamp(uint256)`](getCoprocessorActivationBlockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorActivationBlockTimestampReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorActivationBlockTimestampCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorActivationBlockTimestampCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorActivationBlockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorActivationBlockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorActivationBlockTimestampReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorActivationBlockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorActivationBlockTimestampCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorActivationBlockTimestamp(uint256)";
            const SELECTOR: [u8; 4] = [179u8, 245u8, 64u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorActivationBlockTimestampReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorActivationBlockTimestampReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorContextStatus(uint256)` and selector `0x888b99e0`.
```solidity
function getCoprocessorContextStatus(uint256 contextId) external view returns (ContextStatus);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorContextStatusCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorContextStatus(uint256)`](getCoprocessorContextStatusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorContextStatusReturn {
        #[allow(missing_docs)]
        pub _0: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorContextStatusCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorContextStatusCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorContextStatusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ContextStatus,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ContextStatus as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorContextStatusReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorContextStatusReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorContextStatusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorContextStatusCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <ContextStatus as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (ContextStatus,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorContextStatus(uint256)";
            const SELECTOR: [u8; 4] = [136u8, 139u8, 153u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<ContextStatus as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorContextStatusReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorContextStatusReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorDeactivatedBlockTimestamp(uint256)` and selector `0xa9b4d071`.
```solidity
function getCoprocessorDeactivatedBlockTimestamp(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorDeactivatedBlockTimestampCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorDeactivatedBlockTimestamp(uint256)`](getCoprocessorDeactivatedBlockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorDeactivatedBlockTimestampReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorDeactivatedBlockTimestampCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorDeactivatedBlockTimestampCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorDeactivatedBlockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorDeactivatedBlockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorDeactivatedBlockTimestampReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorDeactivatedBlockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorDeactivatedBlockTimestampCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorDeactivatedBlockTimestamp(uint256)";
            const SELECTOR: [u8; 4] = [169u8, 180u8, 208u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorDeactivatedBlockTimestampReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorDeactivatedBlockTimestampReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorMajorityThreshold(uint256)` and selector `0xf88174ea`.
```solidity
function getCoprocessorMajorityThreshold(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorMajorityThresholdCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorMajorityThreshold(uint256)`](getCoprocessorMajorityThresholdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorMajorityThresholdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorMajorityThresholdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorMajorityThresholdCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorMajorityThresholdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorMajorityThresholdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorMajorityThresholdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorMajorityThresholdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorMajorityThresholdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorMajorityThreshold(uint256)";
            const SELECTOR: [u8; 4] = [248u8, 129u8, 116u8, 234u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorMajorityThresholdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorMajorityThresholdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorSigners(uint256)` and selector `0x41618fe9`.
```solidity
function getCoprocessorSigners(uint256 contextId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorSignersCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorSigners(uint256)`](getCoprocessorSignersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorSignersReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorSignersCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorSignersCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorSignersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorSignersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorSignersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorSignersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorSignersCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorSigners(uint256)";
            const SELECTOR: [u8; 4] = [65u8, 97u8, 143u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorSignersReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorSignersReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorTxSenders(uint256)` and selector `0x049f25ef`.
```solidity
function getCoprocessorTxSenders(uint256 contextId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorTxSendersCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorTxSenders(uint256)`](getCoprocessorTxSendersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorTxSendersReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorTxSendersCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorTxSendersCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorTxSendersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorTxSendersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorTxSendersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorTxSendersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorTxSendersCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorTxSenders(uint256)";
            const SELECTOR: [u8; 4] = [4u8, 159u8, 37u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorTxSendersReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorTxSendersReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPreActivationCoprocessorContextId()` and selector `0xbe91187b`.
```solidity
function getPreActivationCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPreActivationCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPreActivationCoprocessorContextId()`](getPreActivationCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPreActivationCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPreActivationCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPreActivationCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPreActivationCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPreActivationCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPreActivationCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPreActivationCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPreActivationCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPreActivationCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [190u8, 145u8, 24u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getPreActivationCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getPreActivationCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getSuspendedCoprocessorContextId()` and selector `0x086e4e1c`.
```solidity
function getSuspendedCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSuspendedCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getSuspendedCoprocessorContextId()`](getSuspendedCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSuspendedCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSuspendedCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSuspendedCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSuspendedCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSuspendedCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSuspendedCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSuspendedCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSuspendedCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSuspendedCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [8u8, 110u8, 78u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getSuspendedCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getSuspendedCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVersion()` and selector `0x0d8e6e2c`.
```solidity
function getVersion() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVersion()`](getVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVersion()";
            const SELECTOR: [u8; 4] = [13u8, 142u8, 110u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initializeFromEmptyProxy(bytes,(string,address,address,string)[])` and selector `0xecfb0b94`.
```solidity
function initializeFromEmptyProxy(bytes memory initialBlob, CoprocessorV2[] memory initialCoprocessors) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeFromEmptyProxyCall {
        #[allow(missing_docs)]
        pub initialBlob: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub initialCoprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`initializeFromEmptyProxy(bytes,(string,address,address,string)[])`](initializeFromEmptyProxyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeFromEmptyProxyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<
                    <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeFromEmptyProxyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: initializeFromEmptyProxyCall) -> Self {
                    (value.initialBlob, value.initialCoprocessors)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initializeFromEmptyProxyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        initialBlob: tuple.0,
                        initialCoprocessors: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeFromEmptyProxyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: initializeFromEmptyProxyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initializeFromEmptyProxyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl initializeFromEmptyProxyReturn {
            fn _tokenize(
                &self,
            ) -> <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeFromEmptyProxyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeFromEmptyProxyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initializeFromEmptyProxy(bytes,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [236u8, 251u8, 11u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.initialBlob,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialCoprocessors),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                initializeFromEmptyProxyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isCoprocessorContextOperating(uint256)` and selector `0xcd8e993c`.
```solidity
function isCoprocessorContextOperating(uint256 contextId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorContextOperatingCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isCoprocessorContextOperating(uint256)`](isCoprocessorContextOperatingCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorContextOperatingReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorContextOperatingCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorContextOperatingCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorContextOperatingCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorContextOperatingReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorContextOperatingReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorContextOperatingReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCoprocessorContextOperatingCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCoprocessorContextOperating(uint256)";
            const SELECTOR: [u8; 4] = [205u8, 142u8, 153u8, 60u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isCoprocessorContextOperatingReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isCoprocessorContextOperatingReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isCoprocessorSigner(uint256,address)` and selector `0xcdbb5a82`.
```solidity
function isCoprocessorSigner(uint256 contextId, address signerAddress) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorSignerCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isCoprocessorSigner(uint256,address)`](isCoprocessorSignerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorSignerReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorSignerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorSignerCall) -> Self {
                    (value.contextId, value.signerAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorSignerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        signerAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorSignerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorSignerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorSignerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCoprocessorSignerCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCoprocessorSigner(uint256,address)";
            const SELECTOR: [u8; 4] = [205u8, 187u8, 90u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isCoprocessorSignerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isCoprocessorSignerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isCoprocessorTxSender(uint256,address)` and selector `0x8625e876`.
```solidity
function isCoprocessorTxSender(uint256 contextId, address txSenderAddress) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorTxSenderCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isCoprocessorTxSender(uint256,address)`](isCoprocessorTxSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorTxSenderReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorTxSenderCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorTxSenderCall) -> Self {
                    (value.contextId, value.txSenderAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorTxSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        txSenderAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorTxSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorTxSenderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorTxSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCoprocessorTxSenderCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCoprocessorTxSender(uint256,address)";
            const SELECTOR: [u8; 4] = [134u8, 37u8, 232u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isCoprocessorTxSenderReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isCoprocessorTxSenderReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `proxiableUUID()` and selector `0x52d1902d`.
```solidity
function proxiableUUID() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`proxiableUUID()`](proxiableUUIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDCall> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proxiableUUIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proxiableUUID()";
            const SELECTOR: [u8; 4] = [82u8, 209u8, 144u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: proxiableUUIDReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: proxiableUUIDReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `refreshCoprocessorContextStatuses()` and selector `0x3a5162e6`.
```solidity
function refreshCoprocessorContextStatuses() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refreshCoprocessorContextStatusesCall;
    ///Container type for the return parameters of the [`refreshCoprocessorContextStatuses()`](refreshCoprocessorContextStatusesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refreshCoprocessorContextStatusesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refreshCoprocessorContextStatusesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: refreshCoprocessorContextStatusesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for refreshCoprocessorContextStatusesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refreshCoprocessorContextStatusesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: refreshCoprocessorContextStatusesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for refreshCoprocessorContextStatusesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl refreshCoprocessorContextStatusesReturn {
            fn _tokenize(
                &self,
            ) -> <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for refreshCoprocessorContextStatusesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = refreshCoprocessorContextStatusesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "refreshCoprocessorContextStatuses()";
            const SELECTOR: [u8; 4] = [58u8, 81u8, 98u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                refreshCoprocessorContextStatusesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapSuspendedCoprocessorContextWithActive(uint256)` and selector `0x86dfc7de`.
```solidity
function swapSuspendedCoprocessorContextWithActive(uint256 suspendedTimePeriod) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapSuspendedCoprocessorContextWithActiveCall {
        #[allow(missing_docs)]
        pub suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`swapSuspendedCoprocessorContextWithActive(uint256)`](swapSuspendedCoprocessorContextWithActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapSuspendedCoprocessorContextWithActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapSuspendedCoprocessorContextWithActiveCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapSuspendedCoprocessorContextWithActiveCall) -> Self {
                    (value.suspendedTimePeriod,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapSuspendedCoprocessorContextWithActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        suspendedTimePeriod: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapSuspendedCoprocessorContextWithActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapSuspendedCoprocessorContextWithActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapSuspendedCoprocessorContextWithActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl swapSuspendedCoprocessorContextWithActiveReturn {
            fn _tokenize(
                &self,
            ) -> <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapSuspendedCoprocessorContextWithActiveCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapSuspendedCoprocessorContextWithActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapSuspendedCoprocessorContextWithActive(uint256)";
            const SELECTOR: [u8; 4] = [134u8, 223u8, 199u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedTimePeriod),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                swapSuspendedCoprocessorContextWithActiveReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `upgradeToAndCall(address,bytes)` and selector `0x4f1ef286`.
```solidity
function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallCall {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`upgradeToAndCall(address,bytes)`](upgradeToAndCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallCall) -> Self {
                    (value.newImplementation, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newImplementation: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl upgradeToAndCallReturn {
            fn _tokenize(
                &self,
            ) -> <upgradeToAndCallCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeToAndCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeToAndCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeToAndCall(address,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 30u8, 242u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                upgradeToAndCallReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`CoprocessorContexts`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum CoprocessorContextsCalls {
        #[allow(missing_docs)]
        UPGRADE_INTERFACE_VERSION(UPGRADE_INTERFACE_VERSIONCall),
        #[allow(missing_docs)]
        addCoprocessorContext(addCoprocessorContextCall),
        #[allow(missing_docs)]
        forceUpdateCoprocessorContextToStatus(forceUpdateCoprocessorContextToStatusCall),
        #[allow(missing_docs)]
        getActiveCoprocessorContext(getActiveCoprocessorContextCall),
        #[allow(missing_docs)]
        getActiveCoprocessorContextId(getActiveCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getCoprocessor(getCoprocessorCall),
        #[allow(missing_docs)]
        getCoprocessorActivationBlockTimestamp(
            getCoprocessorActivationBlockTimestampCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorContextStatus(getCoprocessorContextStatusCall),
        #[allow(missing_docs)]
        getCoprocessorDeactivatedBlockTimestamp(
            getCoprocessorDeactivatedBlockTimestampCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorMajorityThreshold(getCoprocessorMajorityThresholdCall),
        #[allow(missing_docs)]
        getCoprocessorSigners(getCoprocessorSignersCall),
        #[allow(missing_docs)]
        getCoprocessorTxSenders(getCoprocessorTxSendersCall),
        #[allow(missing_docs)]
        getPreActivationCoprocessorContextId(getPreActivationCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getSuspendedCoprocessorContextId(getSuspendedCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getVersion(getVersionCall),
        #[allow(missing_docs)]
        initializeFromEmptyProxy(initializeFromEmptyProxyCall),
        #[allow(missing_docs)]
        isCoprocessorContextOperating(isCoprocessorContextOperatingCall),
        #[allow(missing_docs)]
        isCoprocessorSigner(isCoprocessorSignerCall),
        #[allow(missing_docs)]
        isCoprocessorTxSender(isCoprocessorTxSenderCall),
        #[allow(missing_docs)]
        proxiableUUID(proxiableUUIDCall),
        #[allow(missing_docs)]
        refreshCoprocessorContextStatuses(refreshCoprocessorContextStatusesCall),
        #[allow(missing_docs)]
        swapSuspendedCoprocessorContextWithActive(
            swapSuspendedCoprocessorContextWithActiveCall,
        ),
        #[allow(missing_docs)]
        upgradeToAndCall(upgradeToAndCallCall),
    }
    #[automatically_derived]
    impl CoprocessorContextsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 159u8, 37u8, 239u8],
            [8u8, 110u8, 78u8, 28u8],
            [13u8, 142u8, 110u8, 44u8],
            [58u8, 81u8, 98u8, 230u8],
            [65u8, 97u8, 143u8, 233u8],
            [79u8, 30u8, 242u8, 134u8],
            [82u8, 209u8, 144u8, 45u8],
            [130u8, 10u8, 145u8, 248u8],
            [134u8, 37u8, 232u8, 118u8],
            [134u8, 223u8, 199u8, 222u8],
            [136u8, 139u8, 153u8, 224u8],
            [153u8, 29u8, 195u8, 109u8],
            [161u8, 54u8, 77u8, 121u8],
            [169u8, 180u8, 208u8, 113u8],
            [173u8, 60u8, 177u8, 204u8],
            [179u8, 245u8, 64u8, 58u8],
            [190u8, 145u8, 24u8, 123u8],
            [202u8, 198u8, 165u8, 168u8],
            [205u8, 142u8, 153u8, 60u8],
            [205u8, 187u8, 90u8, 130u8],
            [236u8, 251u8, 11u8, 148u8],
            [248u8, 129u8, 116u8, 234u8],
            [254u8, 217u8, 113u8, 107u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CoprocessorContextsCalls {
        const NAME: &'static str = "CoprocessorContextsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 23usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(_) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addCoprocessorContext(_) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::forceUpdateCoprocessorContextToStatus(_) => {
                    <forceUpdateCoprocessorContextToStatusCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveCoprocessorContext(_) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveCoprocessorContextId(_) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessor(_) => {
                    <getCoprocessorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorActivationBlockTimestamp(_) => {
                    <getCoprocessorActivationBlockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorContextStatus(_) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorDeactivatedBlockTimestamp(_) => {
                    <getCoprocessorDeactivatedBlockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorMajorityThreshold(_) => {
                    <getCoprocessorMajorityThresholdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorSigners(_) => {
                    <getCoprocessorSignersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorTxSenders(_) => {
                    <getCoprocessorTxSendersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPreActivationCoprocessorContextId(_) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSuspendedCoprocessorContextId(_) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVersion(_) => {
                    <getVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initializeFromEmptyProxy(_) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCoprocessorContextOperating(_) => {
                    <isCoprocessorContextOperatingCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCoprocessorSigner(_) => {
                    <isCoprocessorSignerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCoprocessorTxSender(_) => {
                    <isCoprocessorTxSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proxiableUUID(_) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::refreshCoprocessorContextStatuses(_) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapSuspendedCoprocessorContextWithActive(_) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgradeToAndCall(_) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<CoprocessorContextsCalls>] = &[
                {
                    fn getCoprocessorTxSenders(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorTxSendersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorTxSenders)
                    }
                    getCoprocessorTxSenders
                },
                {
                    fn getSuspendedCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getSuspendedCoprocessorContextId,
                            )
                    }
                    getSuspendedCoprocessorContextId
                },
                {
                    fn getVersion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn refreshCoprocessorContextStatuses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::refreshCoprocessorContextStatuses,
                            )
                    }
                    refreshCoprocessorContextStatuses
                },
                {
                    fn getCoprocessorSigners(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorSignersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorSigners)
                    }
                    getCoprocessorSigners
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn getCoprocessor(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessor)
                    }
                    getCoprocessor
                },
                {
                    fn isCoprocessorTxSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorTxSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::isCoprocessorTxSender)
                    }
                    isCoprocessorTxSender
                },
                {
                    fn swapSuspendedCoprocessorContextWithActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::swapSuspendedCoprocessorContextWithActive,
                            )
                    }
                    swapSuspendedCoprocessorContextWithActive
                },
                {
                    fn getCoprocessorContextStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorContextStatus)
                    }
                    getCoprocessorContextStatus
                },
                {
                    fn getActiveCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContextId)
                    }
                    getActiveCoprocessorContextId
                },
                {
                    fn addCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::addCoprocessorContext)
                    }
                    addCoprocessorContext
                },
                {
                    fn getCoprocessorDeactivatedBlockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorDeactivatedBlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorDeactivatedBlockTimestamp,
                            )
                    }
                    getCoprocessorDeactivatedBlockTimestamp
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn getCoprocessorActivationBlockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorActivationBlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorActivationBlockTimestamp,
                            )
                    }
                    getCoprocessorActivationBlockTimestamp
                },
                {
                    fn getPreActivationCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getPreActivationCoprocessorContextId,
                            )
                    }
                    getPreActivationCoprocessorContextId
                },
                {
                    fn forceUpdateCoprocessorContextToStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <forceUpdateCoprocessorContextToStatusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::forceUpdateCoprocessorContextToStatus,
                            )
                    }
                    forceUpdateCoprocessorContextToStatus
                },
                {
                    fn isCoprocessorContextOperating(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorContextOperatingCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::isCoprocessorContextOperating)
                    }
                    isCoprocessorContextOperating
                },
                {
                    fn isCoprocessorSigner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorSignerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::isCoprocessorSigner)
                    }
                    isCoprocessorSigner
                },
                {
                    fn initializeFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::initializeFromEmptyProxy)
                    }
                    initializeFromEmptyProxy
                },
                {
                    fn getCoprocessorMajorityThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorMajorityThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorMajorityThreshold,
                            )
                    }
                    getCoprocessorMajorityThreshold
                },
                {
                    fn getActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContext)
                    }
                    getActiveCoprocessorContext
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<CoprocessorContextsCalls>] = &[
                {
                    fn getCoprocessorTxSenders(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorTxSendersCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorTxSenders)
                    }
                    getCoprocessorTxSenders
                },
                {
                    fn getSuspendedCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getSuspendedCoprocessorContextId,
                            )
                    }
                    getSuspendedCoprocessorContextId
                },
                {
                    fn getVersion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn refreshCoprocessorContextStatuses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::refreshCoprocessorContextStatuses,
                            )
                    }
                    refreshCoprocessorContextStatuses
                },
                {
                    fn getCoprocessorSigners(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorSignersCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorSigners)
                    }
                    getCoprocessorSigners
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn getCoprocessor(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessor)
                    }
                    getCoprocessor
                },
                {
                    fn isCoprocessorTxSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorTxSenderCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::isCoprocessorTxSender)
                    }
                    isCoprocessorTxSender
                },
                {
                    fn swapSuspendedCoprocessorContextWithActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::swapSuspendedCoprocessorContextWithActive,
                            )
                    }
                    swapSuspendedCoprocessorContextWithActive
                },
                {
                    fn getCoprocessorContextStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorContextStatus)
                    }
                    getCoprocessorContextStatus
                },
                {
                    fn getActiveCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContextId)
                    }
                    getActiveCoprocessorContextId
                },
                {
                    fn addCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::addCoprocessorContext)
                    }
                    addCoprocessorContext
                },
                {
                    fn getCoprocessorDeactivatedBlockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorDeactivatedBlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorDeactivatedBlockTimestamp,
                            )
                    }
                    getCoprocessorDeactivatedBlockTimestamp
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn getCoprocessorActivationBlockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorActivationBlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorActivationBlockTimestamp,
                            )
                    }
                    getCoprocessorActivationBlockTimestamp
                },
                {
                    fn getPreActivationCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getPreActivationCoprocessorContextId,
                            )
                    }
                    getPreActivationCoprocessorContextId
                },
                {
                    fn forceUpdateCoprocessorContextToStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <forceUpdateCoprocessorContextToStatusCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::forceUpdateCoprocessorContextToStatus,
                            )
                    }
                    forceUpdateCoprocessorContextToStatus
                },
                {
                    fn isCoprocessorContextOperating(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorContextOperatingCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::isCoprocessorContextOperating)
                    }
                    isCoprocessorContextOperating
                },
                {
                    fn isCoprocessorSigner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorSignerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::isCoprocessorSigner)
                    }
                    isCoprocessorSigner
                },
                {
                    fn initializeFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::initializeFromEmptyProxy)
                    }
                    initializeFromEmptyProxy
                },
                {
                    fn getCoprocessorMajorityThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorMajorityThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorMajorityThreshold,
                            )
                    }
                    getCoprocessorMajorityThreshold
                },
                {
                    fn getActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContext)
                    }
                    getActiveCoprocessorContext
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addCoprocessorContext(inner) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::forceUpdateCoprocessorContextToStatus(inner) => {
                    <forceUpdateCoprocessorContextToStatusCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveCoprocessorContext(inner) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveCoprocessorContextId(inner) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessor(inner) => {
                    <getCoprocessorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorActivationBlockTimestamp(inner) => {
                    <getCoprocessorActivationBlockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorContextStatus(inner) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorDeactivatedBlockTimestamp(inner) => {
                    <getCoprocessorDeactivatedBlockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorMajorityThreshold(inner) => {
                    <getCoprocessorMajorityThresholdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorSigners(inner) => {
                    <getCoprocessorSignersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorTxSenders(inner) => {
                    <getCoprocessorTxSendersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPreActivationCoprocessorContextId(inner) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSuspendedCoprocessorContextId(inner) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initializeFromEmptyProxy(inner) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCoprocessorContextOperating(inner) => {
                    <isCoprocessorContextOperatingCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCoprocessorSigner(inner) => {
                    <isCoprocessorSignerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCoprocessorTxSender(inner) => {
                    <isCoprocessorTxSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::refreshCoprocessorContextStatuses(inner) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapSuspendedCoprocessorContextWithActive(inner) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addCoprocessorContext(inner) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::forceUpdateCoprocessorContextToStatus(inner) => {
                    <forceUpdateCoprocessorContextToStatusCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveCoprocessorContext(inner) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveCoprocessorContextId(inner) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessor(inner) => {
                    <getCoprocessorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorActivationBlockTimestamp(inner) => {
                    <getCoprocessorActivationBlockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorContextStatus(inner) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorDeactivatedBlockTimestamp(inner) => {
                    <getCoprocessorDeactivatedBlockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorMajorityThreshold(inner) => {
                    <getCoprocessorMajorityThresholdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorSigners(inner) => {
                    <getCoprocessorSignersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorTxSenders(inner) => {
                    <getCoprocessorTxSendersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPreActivationCoprocessorContextId(inner) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSuspendedCoprocessorContextId(inner) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initializeFromEmptyProxy(inner) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCoprocessorContextOperating(inner) => {
                    <isCoprocessorContextOperatingCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCoprocessorSigner(inner) => {
                    <isCoprocessorSignerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCoprocessorTxSender(inner) => {
                    <isCoprocessorTxSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::refreshCoprocessorContextStatuses(inner) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapSuspendedCoprocessorContextWithActive(inner) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`CoprocessorContexts`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum CoprocessorContextsErrors {
        #[allow(missing_docs)]
        ActiveContextOngoing(ActiveContextOngoing),
        #[allow(missing_docs)]
        AddressEmptyCode(AddressEmptyCode),
        #[allow(missing_docs)]
        ContextAlreadyExists(ContextAlreadyExists),
        #[allow(missing_docs)]
        ContextDoesNotExist(ContextDoesNotExist),
        #[allow(missing_docs)]
        ContextIsActive(ContextIsActive),
        #[allow(missing_docs)]
        ContextIsGenerating(ContextIsGenerating),
        #[allow(missing_docs)]
        ContextNotActive(ContextNotActive),
        #[allow(missing_docs)]
        ContextNotGenerated(ContextNotGenerated),
        #[allow(missing_docs)]
        ContextNotPreActivatedOrSuspended(ContextNotPreActivatedOrSuspended),
        #[allow(missing_docs)]
        ContextNotSuspended(ContextNotSuspended),
        #[allow(missing_docs)]
        CoprocessorContextNotInitialized(CoprocessorContextNotInitialized),
        #[allow(missing_docs)]
        CoprocessorSignerAddressesNotUnique(CoprocessorSignerAddressesNotUnique),
        #[allow(missing_docs)]
        CoprocessorTxSenderAddressesNotUnique(CoprocessorTxSenderAddressesNotUnique),
        #[allow(missing_docs)]
        ERC1967InvalidImplementation(ERC1967InvalidImplementation),
        #[allow(missing_docs)]
        ERC1967NonPayable(ERC1967NonPayable),
        #[allow(missing_docs)]
        EmptyCoprocessors(EmptyCoprocessors),
        #[allow(missing_docs)]
        FailedCall(FailedCall),
        #[allow(missing_docs)]
        HostChainNotRegistered(HostChainNotRegistered),
        #[allow(missing_docs)]
        InvalidContextStatusForceUpdate(InvalidContextStatusForceUpdate),
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        InvalidNullContextId(InvalidNullContextId),
        #[allow(missing_docs)]
        NoActiveCoprocessorContext(NoActiveCoprocessorContext),
        #[allow(missing_docs)]
        NoPreActivationCoprocessorContext(NoPreActivationCoprocessorContext),
        #[allow(missing_docs)]
        NoSuspendedCoprocessorContext(NoSuspendedCoprocessorContext),
        #[allow(missing_docs)]
        NotCoprocessorFromContext(NotCoprocessorFromContext),
        #[allow(missing_docs)]
        NotCustodianSigner(NotCustodianSigner),
        #[allow(missing_docs)]
        NotCustodianTxSender(NotCustodianTxSender),
        #[allow(missing_docs)]
        NotGatewayOwner(NotGatewayOwner),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        NotInitializingFromEmptyProxy(NotInitializingFromEmptyProxy),
        #[allow(missing_docs)]
        NotKmsSigner(NotKmsSigner),
        #[allow(missing_docs)]
        NotKmsTxSender(NotKmsTxSender),
        #[allow(missing_docs)]
        NullCoprocessorSignerAddress(NullCoprocessorSignerAddress),
        #[allow(missing_docs)]
        NullCoprocessorTxSenderAddress(NullCoprocessorTxSenderAddress),
        #[allow(missing_docs)]
        PreActivationContextOngoing(PreActivationContextOngoing),
        #[allow(missing_docs)]
        SuspendedContextOngoing(SuspendedContextOngoing),
        #[allow(missing_docs)]
        UUPSUnauthorizedCallContext(UUPSUnauthorizedCallContext),
        #[allow(missing_docs)]
        UUPSUnsupportedProxiableUUID(UUPSUnsupportedProxiableUUID),
    }
    #[automatically_derived]
    impl CoprocessorContextsErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 101u8, 147u8, 234u8],
            [13u8, 221u8, 20u8, 202u8],
            [14u8, 86u8, 207u8, 61u8],
            [18u8, 180u8, 158u8, 61u8],
            [33u8, 251u8, 8u8, 249u8],
            [42u8, 124u8, 110u8, 246u8],
            [51u8, 20u8, 134u8, 179u8],
            [57u8, 22u8, 114u8, 167u8],
            [74u8, 108u8, 89u8, 116u8],
            [76u8, 156u8, 140u8, 227u8],
            [97u8, 84u8, 76u8, 252u8],
            [100u8, 213u8, 39u8, 89u8],
            [102u8, 83u8, 246u8, 215u8],
            [111u8, 79u8, 115u8, 31u8],
            [112u8, 34u8, 236u8, 65u8],
            [119u8, 191u8, 88u8, 70u8],
            [126u8, 234u8, 67u8, 43u8],
            [138u8, 240u8, 130u8, 239u8],
            [153u8, 150u8, 179u8, 21u8],
            [158u8, 219u8, 120u8, 97u8],
            [170u8, 29u8, 73u8, 164u8],
            [171u8, 249u8, 231u8, 176u8],
            [174u8, 232u8, 99u8, 35u8],
            [179u8, 152u8, 151u8, 159u8],
            [182u8, 103u8, 156u8, 59u8],
            [185u8, 232u8, 97u8, 178u8],
            [192u8, 181u8, 238u8, 102u8],
            [195u8, 18u8, 231u8, 62u8],
            [196u8, 112u8, 192u8, 34u8],
            [200u8, 38u8, 225u8, 162u8],
            [203u8, 23u8, 183u8, 165u8],
            [205u8, 73u8, 78u8, 73u8],
            [214u8, 189u8, 162u8, 117u8],
            [215u8, 230u8, 188u8, 248u8],
            [224u8, 124u8, 141u8, 186u8],
            [240u8, 190u8, 214u8, 143u8],
            [249u8, 36u8, 160u8, 207u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CoprocessorContextsErrors {
        const NAME: &'static str = "CoprocessorContextsErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 38usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ActiveContextOngoing(_) => {
                    <ActiveContextOngoing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressEmptyCode(_) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextAlreadyExists(_) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextDoesNotExist(_) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextIsActive(_) => {
                    <ContextIsActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextIsGenerating(_) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotActive(_) => {
                    <ContextNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotGenerated(_) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotPreActivatedOrSuspended(_) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotSuspended(_) => {
                    <ContextNotSuspended as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorContextNotInitialized(_) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorSignerAddressesNotUnique(_) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorTxSenderAddressesNotUnique(_) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967InvalidImplementation(_) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967NonPayable(_) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyCoprocessors(_) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedCall(_) => {
                    <FailedCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::HostChainNotRegistered(_) => {
                    <HostChainNotRegistered as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidContextStatusForceUpdate(_) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidNullContextId(_) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoActiveCoprocessorContext(_) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoPreActivationCoprocessorContext(_) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoSuspendedCoprocessorContext(_) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorFromContext(_) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCustodianSigner(_) => {
                    <NotCustodianSigner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCustodianTxSender(_) => {
                    <NotCustodianTxSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotGatewayOwner(_) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializingFromEmptyProxy(_) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotKmsSigner(_) => {
                    <NotKmsSigner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotKmsTxSender(_) => {
                    <NotKmsTxSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NullCoprocessorSignerAddress(_) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NullCoprocessorTxSenderAddress(_) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PreActivationContextOngoing(_) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SuspendedContextOngoing(_) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnauthorizedCallContext(_) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnsupportedProxiableUUID(_) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<CoprocessorContextsErrors>] = &[
                {
                    fn NoActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NoActiveCoprocessorContext)
                    }
                    NoActiveCoprocessorContext
                },
                {
                    fn ContextIsGenerating(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsGenerating as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextIsGenerating)
                    }
                    ContextIsGenerating
                },
                {
                    fn NotGatewayOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotGatewayOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotGatewayOwner)
                    }
                    NotGatewayOwner
                },
                {
                    fn ContextNotPreActivatedOrSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::ContextNotPreActivatedOrSuspended,
                            )
                    }
                    ContextNotPreActivatedOrSuspended
                },
                {
                    fn NoSuspendedCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NoSuspendedCoprocessorContext,
                            )
                    }
                    NoSuspendedCoprocessorContext
                },
                {
                    fn NotKmsSigner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotKmsSigner as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(CoprocessorContextsErrors::NotKmsSigner)
                    }
                    NotKmsSigner
                },
                {
                    fn ContextNotActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotActive)
                    }
                    ContextNotActive
                },
                {
                    fn NotCustodianSigner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCustodianSigner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotCustodianSigner)
                    }
                    NotCustodianSigner
                },
                {
                    fn NullCoprocessorSignerAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NullCoprocessorSignerAddress)
                    }
                    NullCoprocessorSignerAddress
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn ContextDoesNotExist(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextDoesNotExist)
                    }
                    ContextDoesNotExist
                },
                {
                    fn CoprocessorTxSenderAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorTxSenderAddressesNotUnique,
                            )
                    }
                    CoprocessorTxSenderAddressesNotUnique
                },
                {
                    fn ContextAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextAlreadyExists)
                    }
                    ContextAlreadyExists
                },
                {
                    fn NotInitializingFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NotInitializingFromEmptyProxy,
                            )
                    }
                    NotInitializingFromEmptyProxy
                },
                {
                    fn SuspendedContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::SuspendedContextOngoing)
                    }
                    SuspendedContextOngoing
                },
                {
                    fn ContextNotSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotSuspended as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotSuspended)
                    }
                    ContextNotSuspended
                },
                {
                    fn ActiveContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ActiveContextOngoing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ActiveContextOngoing)
                    }
                    ActiveContextOngoing
                },
                {
                    fn EmptyCoprocessors(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <EmptyCoprocessors as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::EmptyCoprocessors)
                    }
                    EmptyCoprocessors
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn NullCoprocessorTxSenderAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NullCoprocessorTxSenderAddress,
                            )
                    }
                    NullCoprocessorTxSenderAddress
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn CoprocessorContextNotInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorContextNotInitialized,
                            )
                    }
                    CoprocessorContextNotInitialized
                },
                {
                    fn NotKmsTxSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotKmsTxSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotKmsTxSender)
                    }
                    NotKmsTxSender
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn HostChainNotRegistered(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <HostChainNotRegistered as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::HostChainNotRegistered)
                    }
                    HostChainNotRegistered
                },
                {
                    fn NoPreActivationCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NoPreActivationCoprocessorContext,
                            )
                    }
                    NoPreActivationCoprocessorContext
                },
                {
                    fn ContextNotGenerated(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotGenerated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotGenerated)
                    }
                    ContextNotGenerated
                },
                {
                    fn NotCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotCoprocessorFromContext)
                    }
                    NotCoprocessorFromContext
                },
                {
                    fn PreActivationContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::PreActivationContextOngoing)
                    }
                    PreActivationContextOngoing
                },
                {
                    fn CoprocessorSignerAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorSignerAddressesNotUnique,
                            )
                    }
                    CoprocessorSignerAddressesNotUnique
                },
                {
                    fn InvalidNullContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidNullContextId as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::InvalidNullContextId)
                    }
                    InvalidNullContextId
                },
                {
                    fn ContextIsActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextIsActive)
                    }
                    ContextIsActive
                },
                {
                    fn FailedCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(CoprocessorContextsErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn InvalidContextStatusForceUpdate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::InvalidContextStatusForceUpdate,
                            )
                    }
                    InvalidContextStatusForceUpdate
                },
                {
                    fn NotCustodianTxSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCustodianTxSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotCustodianTxSender)
                    }
                    NotCustodianTxSender
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<CoprocessorContextsErrors>] = &[
                {
                    fn NoActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NoActiveCoprocessorContext)
                    }
                    NoActiveCoprocessorContext
                },
                {
                    fn ContextIsGenerating(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsGenerating as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextIsGenerating)
                    }
                    ContextIsGenerating
                },
                {
                    fn NotGatewayOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotGatewayOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotGatewayOwner)
                    }
                    NotGatewayOwner
                },
                {
                    fn ContextNotPreActivatedOrSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::ContextNotPreActivatedOrSuspended,
                            )
                    }
                    ContextNotPreActivatedOrSuspended
                },
                {
                    fn NoSuspendedCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NoSuspendedCoprocessorContext,
                            )
                    }
                    NoSuspendedCoprocessorContext
                },
                {
                    fn NotKmsSigner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotKmsSigner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotKmsSigner)
                    }
                    NotKmsSigner
                },
                {
                    fn ContextNotActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotActive as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotActive)
                    }
                    ContextNotActive
                },
                {
                    fn NotCustodianSigner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCustodianSigner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotCustodianSigner)
                    }
                    NotCustodianSigner
                },
                {
                    fn NullCoprocessorSignerAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NullCoprocessorSignerAddress)
                    }
                    NullCoprocessorSignerAddress
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn ContextDoesNotExist(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextDoesNotExist)
                    }
                    ContextDoesNotExist
                },
                {
                    fn CoprocessorTxSenderAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorTxSenderAddressesNotUnique,
                            )
                    }
                    CoprocessorTxSenderAddressesNotUnique
                },
                {
                    fn ContextAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextAlreadyExists)
                    }
                    ContextAlreadyExists
                },
                {
                    fn NotInitializingFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NotInitializingFromEmptyProxy,
                            )
                    }
                    NotInitializingFromEmptyProxy
                },
                {
                    fn SuspendedContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::SuspendedContextOngoing)
                    }
                    SuspendedContextOngoing
                },
                {
                    fn ContextNotSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotSuspended as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotSuspended)
                    }
                    ContextNotSuspended
                },
                {
                    fn ActiveContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ActiveContextOngoing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ActiveContextOngoing)
                    }
                    ActiveContextOngoing
                },
                {
                    fn EmptyCoprocessors(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <EmptyCoprocessors as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::EmptyCoprocessors)
                    }
                    EmptyCoprocessors
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn NullCoprocessorTxSenderAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NullCoprocessorTxSenderAddress,
                            )
                    }
                    NullCoprocessorTxSenderAddress
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn CoprocessorContextNotInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorContextNotInitialized,
                            )
                    }
                    CoprocessorContextNotInitialized
                },
                {
                    fn NotKmsTxSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotKmsTxSender as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotKmsTxSender)
                    }
                    NotKmsTxSender
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn HostChainNotRegistered(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <HostChainNotRegistered as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::HostChainNotRegistered)
                    }
                    HostChainNotRegistered
                },
                {
                    fn NoPreActivationCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NoPreActivationCoprocessorContext,
                            )
                    }
                    NoPreActivationCoprocessorContext
                },
                {
                    fn ContextNotGenerated(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotGenerated as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotGenerated)
                    }
                    ContextNotGenerated
                },
                {
                    fn NotCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotCoprocessorFromContext)
                    }
                    NotCoprocessorFromContext
                },
                {
                    fn PreActivationContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::PreActivationContextOngoing)
                    }
                    PreActivationContextOngoing
                },
                {
                    fn CoprocessorSignerAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorSignerAddressesNotUnique,
                            )
                    }
                    CoprocessorSignerAddressesNotUnique
                },
                {
                    fn InvalidNullContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidNullContextId as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::InvalidNullContextId)
                    }
                    InvalidNullContextId
                },
                {
                    fn ContextIsActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsActive as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextIsActive)
                    }
                    ContextIsActive
                },
                {
                    fn FailedCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn InvalidContextStatusForceUpdate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::InvalidContextStatusForceUpdate,
                            )
                    }
                    InvalidContextStatusForceUpdate
                },
                {
                    fn NotCustodianTxSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCustodianTxSender as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotCustodianTxSender)
                    }
                    NotCustodianTxSender
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ActiveContextOngoing(inner) => {
                    <ActiveContextOngoing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextAlreadyExists(inner) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextDoesNotExist(inner) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextIsActive(inner) => {
                    <ContextIsActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextIsGenerating(inner) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotActive(inner) => {
                    <ContextNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotGenerated(inner) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotPreActivatedOrSuspended(inner) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotSuspended(inner) => {
                    <ContextNotSuspended as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorContextNotInitialized(inner) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorSignerAddressesNotUnique(inner) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorTxSenderAddressesNotUnique(inner) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyCoprocessors(inner) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::HostChainNotRegistered(inner) => {
                    <HostChainNotRegistered as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidContextStatusForceUpdate(inner) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidNullContextId(inner) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoActiveCoprocessorContext(inner) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoPreActivationCoprocessorContext(inner) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoSuspendedCoprocessorContext(inner) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorFromContext(inner) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCustodianSigner(inner) => {
                    <NotCustodianSigner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCustodianTxSender(inner) => {
                    <NotCustodianTxSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotGatewayOwner(inner) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializingFromEmptyProxy(inner) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotKmsSigner(inner) => {
                    <NotKmsSigner as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotKmsTxSender(inner) => {
                    <NotKmsTxSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NullCoprocessorSignerAddress(inner) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NullCoprocessorTxSenderAddress(inner) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PreActivationContextOngoing(inner) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SuspendedContextOngoing(inner) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ActiveContextOngoing(inner) => {
                    <ActiveContextOngoing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextAlreadyExists(inner) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextDoesNotExist(inner) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextIsActive(inner) => {
                    <ContextIsActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextIsGenerating(inner) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotActive(inner) => {
                    <ContextNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotGenerated(inner) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotPreActivatedOrSuspended(inner) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotSuspended(inner) => {
                    <ContextNotSuspended as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorContextNotInitialized(inner) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorSignerAddressesNotUnique(inner) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorTxSenderAddressesNotUnique(inner) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyCoprocessors(inner) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::HostChainNotRegistered(inner) => {
                    <HostChainNotRegistered as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidContextStatusForceUpdate(inner) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidNullContextId(inner) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoActiveCoprocessorContext(inner) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoPreActivationCoprocessorContext(inner) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoSuspendedCoprocessorContext(inner) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorFromContext(inner) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCustodianSigner(inner) => {
                    <NotCustodianSigner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCustodianTxSender(inner) => {
                    <NotCustodianTxSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotGatewayOwner(inner) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializingFromEmptyProxy(inner) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotKmsSigner(inner) => {
                    <NotKmsSigner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotKmsTxSender(inner) => {
                    <NotKmsTxSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NullCoprocessorSignerAddress(inner) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NullCoprocessorTxSenderAddress(inner) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PreActivationContextOngoing(inner) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SuspendedContextOngoing(inner) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`CoprocessorContexts`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum CoprocessorContextsEvents {
        #[allow(missing_docs)]
        ActivateCoprocessorContext(ActivateCoprocessorContext),
        #[allow(missing_docs)]
        CompromiseCoprocessorContext(CompromiseCoprocessorContext),
        #[allow(missing_docs)]
        DeactivateCoprocessorContext(DeactivateCoprocessorContext),
        #[allow(missing_docs)]
        DestroyCoprocessorContext(DestroyCoprocessorContext),
        #[allow(missing_docs)]
        InitializeCoprocessorContexts(InitializeCoprocessorContexts),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        NewCoprocessorContext(NewCoprocessorContext),
        #[allow(missing_docs)]
        PreActivateCoprocessorContext(PreActivateCoprocessorContext),
        #[allow(missing_docs)]
        SuspendCoprocessorContext(SuspendCoprocessorContext),
        #[allow(missing_docs)]
        Upgraded(Upgraded),
    }
    #[automatically_derived]
    impl CoprocessorContextsEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                4u8, 37u8, 245u8, 78u8, 96u8, 44u8, 188u8, 248u8, 127u8, 175u8, 214u8,
                160u8, 181u8, 87u8, 250u8, 92u8, 75u8, 196u8, 188u8, 108u8, 37u8, 22u8,
                134u8, 37u8, 94u8, 179u8, 189u8, 119u8, 95u8, 69u8, 35u8, 119u8,
            ],
            [
                27u8, 170u8, 8u8, 216u8, 222u8, 24u8, 232u8, 226u8, 40u8, 118u8, 145u8,
                177u8, 48u8, 151u8, 72u8, 1u8, 9u8, 129u8, 235u8, 223u8, 209u8, 42u8,
                23u8, 61u8, 133u8, 116u8, 101u8, 117u8, 72u8, 165u8, 40u8, 152u8,
            ],
            [
                48u8, 128u8, 242u8, 184u8, 13u8, 218u8, 71u8, 72u8, 202u8, 41u8, 38u8,
                166u8, 65u8, 250u8, 80u8, 7u8, 115u8, 80u8, 88u8, 220u8, 95u8, 90u8,
                178u8, 89u8, 78u8, 236u8, 167u8, 65u8, 151u8, 163u8, 172u8, 204u8,
            ],
            [
                108u8, 140u8, 4u8, 201u8, 254u8, 163u8, 55u8, 114u8, 11u8, 125u8, 250u8,
                220u8, 163u8, 101u8, 232u8, 80u8, 3u8, 81u8, 20u8, 253u8, 8u8, 27u8,
                88u8, 208u8, 48u8, 175u8, 190u8, 139u8, 93u8, 195u8, 190u8, 113u8,
            ],
            [
                187u8, 177u8, 4u8, 196u8, 149u8, 136u8, 110u8, 93u8, 170u8, 62u8, 251u8,
                107u8, 40u8, 30u8, 194u8, 132u8, 12u8, 105u8, 56u8, 90u8, 245u8, 203u8,
                252u8, 21u8, 130u8, 252u8, 247u8, 0u8, 222u8, 30u8, 205u8, 75u8,
            ],
            [
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ],
            [
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ],
            [
                212u8, 116u8, 6u8, 142u8, 207u8, 145u8, 76u8, 170u8, 4u8, 134u8, 132u8,
                147u8, 188u8, 239u8, 165u8, 107u8, 251u8, 4u8, 154u8, 84u8, 241u8, 97u8,
                44u8, 39u8, 38u8, 209u8, 18u8, 225u8, 230u8, 6u8, 99u8, 185u8,
            ],
            [
                238u8, 126u8, 248u8, 57u8, 99u8, 65u8, 113u8, 37u8, 210u8, 116u8, 48u8,
                120u8, 159u8, 198u8, 233u8, 65u8, 148u8, 56u8, 30u8, 130u8, 195u8, 205u8,
                166u8, 130u8, 96u8, 208u8, 231u8, 207u8, 195u8, 30u8, 175u8, 33u8,
            ],
            [
                242u8, 11u8, 41u8, 152u8, 4u8, 201u8, 193u8, 214u8, 218u8, 59u8, 130u8,
                65u8, 76u8, 122u8, 160u8, 168u8, 69u8, 205u8, 186u8, 186u8, 226u8, 217u8,
                14u8, 70u8, 227u8, 96u8, 163u8, 121u8, 167u8, 123u8, 123u8, 229u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for CoprocessorContextsEvents {
        const NAME: &'static str = "CoprocessorContextsEvents";
        const COUNT: usize = 10usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ActivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ActivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ActivateCoprocessorContext)
                }
                Some(
                    <CompromiseCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CompromiseCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CompromiseCoprocessorContext)
                }
                Some(
                    <DeactivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DeactivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DeactivateCoprocessorContext)
                }
                Some(
                    <DestroyCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DestroyCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DestroyCoprocessorContext)
                }
                Some(
                    <InitializeCoprocessorContexts as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <InitializeCoprocessorContexts as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::InitializeCoprocessorContexts)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <NewCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NewCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::NewCoprocessorContext)
                }
                Some(
                    <PreActivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreActivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PreActivateCoprocessorContext)
                }
                Some(
                    <SuspendCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SuspendCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SuspendCoprocessorContext)
                }
                Some(<Upgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Upgraded as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Upgraded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for CoprocessorContextsEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CompromiseCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DeactivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DestroyCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::InitializeCoprocessorContexts(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NewCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SuspendCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CompromiseCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DeactivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DestroyCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::InitializeCoprocessorContexts(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NewCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SuspendCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`CoprocessorContexts`](self) contract instance.

See the [wrapper's documentation](`CoprocessorContextsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> CoprocessorContextsInstance<P, N> {
        CoprocessorContextsInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<CoprocessorContextsInstance<P, N>>,
    > {
        CoprocessorContextsInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        CoprocessorContextsInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`CoprocessorContexts`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`CoprocessorContexts`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct CoprocessorContextsInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for CoprocessorContextsInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("CoprocessorContextsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`CoprocessorContexts`](self) contract instance.

See the [wrapper's documentation](`CoprocessorContextsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<CoprocessorContextsInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> CoprocessorContextsInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> CoprocessorContextsInstance<P, N> {
            CoprocessorContextsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`UPGRADE_INTERFACE_VERSION`] function.
        pub fn UPGRADE_INTERFACE_VERSION(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, UPGRADE_INTERFACE_VERSIONCall, N> {
            self.call_builder(&UPGRADE_INTERFACE_VERSIONCall)
        }
        ///Creates a new call builder for the [`addCoprocessorContext`] function.
        pub fn addCoprocessorContext(
            &self,
            blob: alloy::sol_types::private::Bytes,
            coprocessors: alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
            timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<&P, addCoprocessorContextCall, N> {
            self.call_builder(
                &addCoprocessorContextCall {
                    blob,
                    coprocessors,
                    timePeriods,
                },
            )
        }
        ///Creates a new call builder for the [`forceUpdateCoprocessorContextToStatus`] function.
        pub fn forceUpdateCoprocessorContextToStatus(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            status: <ContextStatus as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            forceUpdateCoprocessorContextToStatusCall,
            N,
        > {
            self.call_builder(
                &forceUpdateCoprocessorContextToStatusCall {
                    contextId,
                    status,
                },
            )
        }
        ///Creates a new call builder for the [`getActiveCoprocessorContext`] function.
        pub fn getActiveCoprocessorContext(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveCoprocessorContextCall, N> {
            self.call_builder(&getActiveCoprocessorContextCall)
        }
        ///Creates a new call builder for the [`getActiveCoprocessorContextId`] function.
        pub fn getActiveCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveCoprocessorContextIdCall, N> {
            self.call_builder(&getActiveCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getCoprocessor`] function.
        pub fn getCoprocessor(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            coprocessorTxSenderAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorCall, N> {
            self.call_builder(
                &getCoprocessorCall {
                    contextId,
                    coprocessorTxSenderAddress,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorActivationBlockTimestamp`] function.
        pub fn getCoprocessorActivationBlockTimestamp(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorActivationBlockTimestampCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorActivationBlockTimestampCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorContextStatus`] function.
        pub fn getCoprocessorContextStatus(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorContextStatusCall, N> {
            self.call_builder(
                &getCoprocessorContextStatusCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorDeactivatedBlockTimestamp`] function.
        pub fn getCoprocessorDeactivatedBlockTimestamp(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorDeactivatedBlockTimestampCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorDeactivatedBlockTimestampCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorMajorityThreshold`] function.
        pub fn getCoprocessorMajorityThreshold(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorMajorityThresholdCall, N> {
            self.call_builder(
                &getCoprocessorMajorityThresholdCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorSigners`] function.
        pub fn getCoprocessorSigners(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorSignersCall, N> {
            self.call_builder(
                &getCoprocessorSignersCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorTxSenders`] function.
        pub fn getCoprocessorTxSenders(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorTxSendersCall, N> {
            self.call_builder(
                &getCoprocessorTxSendersCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getPreActivationCoprocessorContextId`] function.
        pub fn getPreActivationCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getPreActivationCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(&getPreActivationCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getSuspendedCoprocessorContextId`] function.
        pub fn getSuspendedCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getSuspendedCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(&getSuspendedCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getVersion`] function.
        pub fn getVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getVersionCall, N> {
            self.call_builder(&getVersionCall)
        }
        ///Creates a new call builder for the [`initializeFromEmptyProxy`] function.
        pub fn initializeFromEmptyProxy(
            &self,
            initialBlob: alloy::sol_types::private::Bytes,
            initialCoprocessors: alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, initializeFromEmptyProxyCall, N> {
            self.call_builder(
                &initializeFromEmptyProxyCall {
                    initialBlob,
                    initialCoprocessors,
                },
            )
        }
        ///Creates a new call builder for the [`isCoprocessorContextOperating`] function.
        pub fn isCoprocessorContextOperating(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, isCoprocessorContextOperatingCall, N> {
            self.call_builder(
                &isCoprocessorContextOperatingCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`isCoprocessorSigner`] function.
        pub fn isCoprocessorSigner(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            signerAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, isCoprocessorSignerCall, N> {
            self.call_builder(
                &isCoprocessorSignerCall {
                    contextId,
                    signerAddress,
                },
            )
        }
        ///Creates a new call builder for the [`isCoprocessorTxSender`] function.
        pub fn isCoprocessorTxSender(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            txSenderAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, isCoprocessorTxSenderCall, N> {
            self.call_builder(
                &isCoprocessorTxSenderCall {
                    contextId,
                    txSenderAddress,
                },
            )
        }
        ///Creates a new call builder for the [`proxiableUUID`] function.
        pub fn proxiableUUID(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, proxiableUUIDCall, N> {
            self.call_builder(&proxiableUUIDCall)
        }
        ///Creates a new call builder for the [`refreshCoprocessorContextStatuses`] function.
        pub fn refreshCoprocessorContextStatuses(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            refreshCoprocessorContextStatusesCall,
            N,
        > {
            self.call_builder(&refreshCoprocessorContextStatusesCall)
        }
        ///Creates a new call builder for the [`swapSuspendedCoprocessorContextWithActive`] function.
        pub fn swapSuspendedCoprocessorContextWithActive(
            &self,
            suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            swapSuspendedCoprocessorContextWithActiveCall,
            N,
        > {
            self.call_builder(
                &swapSuspendedCoprocessorContextWithActiveCall {
                    suspendedTimePeriod,
                },
            )
        }
        ///Creates a new call builder for the [`upgradeToAndCall`] function.
        pub fn upgradeToAndCall(
            &self,
            newImplementation: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, upgradeToAndCallCall, N> {
            self.call_builder(
                &upgradeToAndCallCall {
                    newImplementation,
                    data,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ActivateCoprocessorContext`] event.
        pub fn ActivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, ActivateCoprocessorContext, N> {
            self.event_filter::<ActivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`CompromiseCoprocessorContext`] event.
        pub fn CompromiseCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, CompromiseCoprocessorContext, N> {
            self.event_filter::<CompromiseCoprocessorContext>()
        }
        ///Creates a new event filter for the [`DeactivateCoprocessorContext`] event.
        pub fn DeactivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, DeactivateCoprocessorContext, N> {
            self.event_filter::<DeactivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`DestroyCoprocessorContext`] event.
        pub fn DestroyCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, DestroyCoprocessorContext, N> {
            self.event_filter::<DestroyCoprocessorContext>()
        }
        ///Creates a new event filter for the [`InitializeCoprocessorContexts`] event.
        pub fn InitializeCoprocessorContexts_filter(
            &self,
        ) -> alloy_contract::Event<&P, InitializeCoprocessorContexts, N> {
            self.event_filter::<InitializeCoprocessorContexts>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(&self) -> alloy_contract::Event<&P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`NewCoprocessorContext`] event.
        pub fn NewCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, NewCoprocessorContext, N> {
            self.event_filter::<NewCoprocessorContext>()
        }
        ///Creates a new event filter for the [`PreActivateCoprocessorContext`] event.
        pub fn PreActivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, PreActivateCoprocessorContext, N> {
            self.event_filter::<PreActivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`SuspendCoprocessorContext`] event.
        pub fn SuspendCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, SuspendCoprocessorContext, N> {
            self.event_filter::<SuspendCoprocessorContext>()
        }
        ///Creates a new event filter for the [`Upgraded`] event.
        pub fn Upgraded_filter(&self) -> alloy_contract::Event<&P, Upgraded, N> {
            self.event_filter::<Upgraded>()
        }
    }
}
