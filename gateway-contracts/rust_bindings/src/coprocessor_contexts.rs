/**

Generated by the following Solidity interface...
```solidity
interface CoprocessorContexts {
    type ContextStatus is uint8;
    struct CoprocessorContext {
        uint256 contextId;
        uint256 previousContextId;
        uint256 featureSet;
        CoprocessorV2[] coprocessors;
    }
    struct CoprocessorContextTimePeriods {
        uint256 preActivationTimePeriod;
        uint256 suspendedTimePeriod;
    }
    struct CoprocessorV2 {
        string name;
        address txSenderAddress;
        address signerAddress;
        string storageUrl;
    }

    error AddressEmptyCode(address target);
    error ContextAlreadyExists(uint256 contextId);
    error ContextDoesNotExist(uint256 contextId);
    error ContextIsActive(uint256 contextId);
    error ContextIsGenerating(uint256 contextId);
    error ContextNotActive(uint256 contextId);
    error ContextNotGenerated(uint256 contextId);
    error ContextNotPreActivatedOrSuspended(uint256 contextId);
    error ContextNotSuspended(uint256 contextId);
    error CoprocessorContextNotInitialized(uint256 contextId);
    error CoprocessorSignerAddressesNotUnique(address signerAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error CoprocessorTxSenderAddressesNotUnique(address txSenderAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error ERC1967InvalidImplementation(address implementation);
    error ERC1967NonPayable();
    error EmptyCoprocessors();
    error FailedCall();
    error InvalidContextStatusForceUpdate(uint256 contextId, ContextStatus status);
    error InvalidInitialization();
    error InvalidNullContextId();
    error NoActiveCoprocessorContext();
    error NoPreActivationCoprocessorContext();
    error NoSuspendedCoprocessorContext();
    error NotCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress);
    error NotCoprocessorSignerFromContext(uint256 contextId, address signerAddress);
    error NotCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress);
    error NotGatewayOwner(address sender);
    error NotInitializing();
    error NotInitializingFromEmptyProxy();
    error NullCoprocessorSignerAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error NullCoprocessorTxSenderAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error PreActivationContextOngoing(uint256 preActivationContextId);
    error SuspendedContextOngoing(uint256 suspendedContextId);
    error UUPSUnauthorizedCallContext();
    error UUPSUnsupportedProxiableUUID(bytes32 slot);

    event ActivateCoprocessorContext(uint256 contextId);
    event CompromiseCoprocessorContext(uint256 contextId);
    event DeactivateCoprocessorContext(uint256 contextId);
    event DestroyCoprocessorContext(uint256 contextId);
    event InitializeCoprocessorContexts(uint256 featureSet, CoprocessorV2[] coprocessors);
    event Initialized(uint64 version);
    event NewCoprocessorContext(CoprocessorContext activeCoprocessorContext, CoprocessorContext newCoprocessorContext, CoprocessorContextTimePeriods timePeriods);
    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event PreActivateCoprocessorContext(CoprocessorContext newCoprocessorContext, uint256 activationBlockTimestamp);
    event SuspendCoprocessorContext(uint256 contextId, uint256 deactivatedBlockTimestamp);
    event Upgraded(address indexed implementation);

    constructor();

    function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
    function acceptOwnership() external;
    function addCoprocessorContext(uint256 featureSet, CoprocessorV2[] memory coprocessors, CoprocessorContextTimePeriods memory timePeriods) external;
    function checkIsCoprocessorSignerFromContext(uint256 contextId, address signerAddress) external view;
    function checkIsCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress) external view;
    function forceUpdateContextToStatus(uint256 contextId, ContextStatus status) external;
    function getActiveCoprocessorContext() external view returns (CoprocessorContext memory);
    function getActiveCoprocessorContextId() external view returns (uint256);
    function getCoprocessorActivationBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorContextStatus(uint256 contextId) external view returns (ContextStatus);
    function getCoprocessorDeactivatedBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress) external view returns (CoprocessorV2 memory);
    function getCoprocessorMajorityThresholdFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorSignersFromContext(uint256 contextId) external view returns (address[] memory);
    function getCoprocessorTxSendersFromContext(uint256 contextId) external view returns (address[] memory);
    function getPreActivationCoprocessorContextId() external view returns (uint256);
    function getSuspendedCoprocessorContextId() external view returns (uint256);
    function getVersion() external pure returns (string memory);
    function initializeFromEmptyProxy(uint256 initialFeatureSet, CoprocessorV2[] memory initialCoprocessors) external;
    function isCoprocessorContextActiveOrSuspended(uint256 contextId) external view returns (bool);
    function owner() external view returns (address);
    function pendingOwner() external view returns (address);
    function proxiableUUID() external view returns (bytes32);
    function refreshCoprocessorContextStatuses() external;
    function renounceOwnership() external;
    function swapSuspendedCoprocessorContextWithActive(uint256 suspendedTimePeriod) external;
    function transferOwnership(address newOwner) external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "UPGRADE_INTERFACE_VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "acceptOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addCoprocessorContext",
    "inputs": [
      {
        "name": "featureSet",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      },
      {
        "name": "timePeriods",
        "type": "tuple",
        "internalType": "struct CoprocessorContextTimePeriods",
        "components": [
          {
            "name": "preActivationTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "suspendedTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "checkIsCoprocessorSignerFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "checkIsCoprocessorTxSenderFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "forceUpdateContextToStatus",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getActiveCoprocessorContext",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorActivationBlockTimestampFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorContextStatus",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorDeactivatedBlockTimestampFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct CoprocessorV2",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorMajorityThresholdFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorSignersFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorTxSendersFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPreActivationCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSuspendedCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initializeFromEmptyProxy",
    "inputs": [
      {
        "name": "initialFeatureSet",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "initialCoprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isCoprocessorContextActiveOrSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pendingOwner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proxiableUUID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "refreshCoprocessorContextStatuses",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "swapSuspendedCoprocessorContextWithActive",
    "inputs": [
      {
        "name": "suspendedTimePeriod",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeToAndCall",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "ActivateCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CompromiseCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DeactivateCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DestroyCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "InitializeCoprocessorContexts",
    "inputs": [
      {
        "name": "featureSet",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "indexed": false,
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NewCoprocessorContext",
    "inputs": [
      {
        "name": "activeCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "newCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "timePeriods",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContextTimePeriods",
        "components": [
          {
            "name": "preActivationTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "suspendedTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferStarted",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreActivateCoprocessorContext",
    "inputs": [
      {
        "name": "newCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct CoprocessorV2[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "storageUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "activationBlockTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SuspendCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "deactivatedBlockTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Upgraded",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressEmptyCode",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextAlreadyExists",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextDoesNotExist",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextIsActive",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextIsGenerating",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotActive",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotGenerated",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotPreActivatedOrSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorContextNotInitialized",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorSignerAddressesNotUnique",
    "inputs": [
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorTxSenderAddressesNotUnique",
    "inputs": [
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967InvalidImplementation",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967NonPayable",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyCoprocessors",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidContextStatusForceUpdate",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "status",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidNullContextId",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoActiveCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoPreActivationCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoSuspendedCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotCoprocessorFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotCoprocessorSignerFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotCoprocessorTxSenderFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotGatewayOwner",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializingFromEmptyProxy",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NullCoprocessorSignerAddress",
    "inputs": [
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "NullCoprocessorTxSenderAddress",
    "inputs": [
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct CoprocessorV2[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "storageUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "PreActivationContextOngoing",
    "inputs": [
      {
        "name": "preActivationContextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "SuspendedContextOngoing",
    "inputs": [
      {
        "name": "suspendedContextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "UUPSUnauthorizedCallContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UUPSUnsupportedProxiableUUID",
    "inputs": [
      {
        "name": "slot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod CoprocessorContexts {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801562000043575f80fd5b50620000546200005a60201b60201c565b620001c4565b5f6200006b6200015e60201b60201c565b9050805f0160089054906101000a900460ff1615620000b6576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146200015b5767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051620001529190620001a9565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f67ffffffffffffffff82169050919050565b620001a38162000185565b82525050565b5f602082019050620001be5f83018462000198565b92915050565b6080516157e8620001eb5f395f8181612784015281816127d90152612a7b01526157e85ff3fe6080604052600436106101b6575f3560e01c806386dfc7de116100eb578063ad3cb1cc11610089578063e30c397811610063578063e30c3978146105e6578063f192cf6814610610578063f2fde38b14610638578063fed9716b14610660576101b6565b8063ad3cb1cc14610556578063be91187b14610580578063d1841dd3146105aa576101b6565b806390218748116100c5578063902187481461048c578063991dc36d146104c85780639efb484e146104f2578063a94a02ad1461051a576101b6565b806386dfc7de146103fe578063888b99e0146104265780638da5cb5b14610462576101b6565b806360b2546511610158578063703c3b2e11610132578063703c3b2e14610382578063715018a6146103aa57806379ba5097146103c057806384cae187146103d6576101b6565b806360b25465146102ce5780636b3174e51461030a5780636ba818e114610346576101b6565b80633112a555116101945780633112a5551461024a5780633a5162e6146102725780634f1ef2861461028857806352d1902d146102a4576101b6565b8063086e4e1c146101ba5780630d8e6e2c146101e457806318b7214d1461020e575b5f80fd5b3480156101c5575f80fd5b506101ce61068a565b6040516101db9190614282565b60405180910390f35b3480156101ef575f80fd5b506101f86106d6565b6040516102059190614325565b60405180910390f35b348015610219575f80fd5b50610234600480360381019061022f9190614380565b610751565b6040516102419190614492565b60405180910390f35b348015610255575f80fd5b50610270600480360381019061026b91906144d5565b6107fb565b005b34801561027d575f80fd5b50610286610bea565b005b6102a2600480360381019061029d9190614669565b610d73565b005b3480156102af575f80fd5b506102b8610d92565b6040516102c591906146db565b60405180910390f35b3480156102d9575f80fd5b506102f460048036038101906102ef9190614380565b610dc3565b604051610301919061470e565b60405180910390f35b348015610315575f80fd5b50610330600480360381019061032b9190614380565b610e4d565b60405161033d9190614492565b60405180910390f35b348015610351575f80fd5b5061036c60048036038101906103679190614380565b610ef7565b6040516103799190614282565b60405180910390f35b34801561038d575f80fd5b506103a860048036038101906103a39190614784565b610f98565b005b3480156103b5575f80fd5b506103be611181565b005b3480156103cb575f80fd5b506103d4611194565b005b3480156103e1575f80fd5b506103fc60048036038101906103f79190614803565b611222565b005b348015610409575f80fd5b50610424600480360381019061041f9190614380565b611422565b005b348015610431575f80fd5b5061044c60048036038101906104479190614380565b6115e9565b60405161045991906148e7565b60405180910390f35b34801561046d575f80fd5b50610476611609565b604051610483919061490f565b60405180910390f35b348015610497575f80fd5b506104b260048036038101906104ad9190614380565b61163e565b6040516104bf9190614282565b60405180910390f35b3480156104d3575f80fd5b506104dc6116cd565b6040516104e99190614282565b60405180910390f35b3480156104fd575f80fd5b5061051860048036038101906105139190614928565b611719565b005b348015610525575f80fd5b50610540600480360381019061053b9190614380565b61182e565b60405161054d9190614282565b60405180910390f35b348015610561575f80fd5b5061056a6118bd565b6040516105779190614325565b60405180910390f35b34801561058b575f80fd5b506105946118f6565b6040516105a19190614282565b60405180910390f35b3480156105b5575f80fd5b506105d060048036038101906105cb9190614928565b611942565b6040516105dd9190614a15565b60405180910390f35b3480156105f1575f80fd5b506105fa611c62565b604051610607919061490f565b60405180910390f35b34801561061b575f80fd5b5061063660048036038101906106319190614928565b611c97565b005b348015610643575f80fd5b5061065e60048036038101906106599190614a35565b611dac565b005b34801561066b575f80fd5b50610674611e65565b6040516106819190614bf1565b60405180910390f35b5f806106946120ea565b90505f81036106cf576040517f21fb08f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b60606040518060400160405280601381526020017f436f70726f636573736f72436f6e7465787473000000000000000000000000008152506107175f612103565b6107216001612103565b61072a5f612103565b60405160200161073d9493929190614cdf565b604051602081830303815290604052905090565b60605f61075c6121cd565b905080600a015f8481526020019081526020015f208054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107a5575b5050505050915050919050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610858573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061087c9190614d51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108eb57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016108e2919061490f565b60405180910390fd5b815f6108f56121cd565b90505f816006015f8481526020019081526020015f205f01540361095057816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016109479190614282565b60405180910390fd5b5f6109596121cd565b90506003600781111561096f5761096e614874565b5b84600781111561098257610981614874565b5b036109cf57610993815f01866121f4565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71856040516109c29190614282565b60405180910390a1610be3565b600460078111156109e3576109e2614874565b5b8460078111156109f6576109f5614874565b5b03610a4557610a07815f0186612300565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc8542604051610a38929190614d7c565b60405180910390a1610be2565b60056007811115610a5957610a58614874565b5b846007811115610a6c57610a6b614874565b5b03610ab957610a7d815f01866123d6565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a5289885604051610aac9190614282565b60405180910390a1610be1565b60066007811115610acd57610acc614874565b5b846007811115610ae057610adf614874565b5b03610b2d57610af1815f01866124a3565b7fee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf2185604051610b209190614282565b60405180910390a1610be0565b600780811115610b4057610b3f614874565b5b846007811115610b5357610b52614874565b5b03610ba057610b64815f018661262e565b7ff20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be585604051610b939190614282565b60405180910390a1610bdf565b84846040517ff0bed68f000000000000000000000000000000000000000000000000000000008152600401610bd6929190614da3565b60405180910390fd5b5b5b5b5b5050505050565b5f610bf36121cd565b90505f815f016002015490505f8114158015610c22575081600d015f8281526020019081526020015f20544210155b15610cf7575f610c306116cd565b90505f83600f015f8381526020019081526020015f205442610c529190614df7565b90508084600e015f8481526020019081526020015f2081905550610c78845f0183612300565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc8282604051610ca9929190614d7c565b60405180910390a1610cbd845f01846121f4565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be7183604051610cec9190614282565b60405180910390a150505b5f610d006120ea565b90505f8114158015610d25575082600e015f8281526020019081526020015f20544210155b15610d6e57610d36835f01826123d6565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a5289881604051610d659190614282565b60405180910390a15b505050565b610d7b612782565b610d8482612868565b610d8e828261295b565b5050565b5f610d9b612a79565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f815f610dce6121cd565b90505f816006015f8481526020019081526020015f205f015403610e2957816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610e209190614282565b60405180910390fd5b610e316116cd565b841480610e445750610e416120ea565b84145b92505050919050565b60605f610e586121cd565b905080600c015f8481526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015610eea57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ea1575b5050505050915050919050565b5f815f610f026121cd565b90505f816006015f8481526020019081526020015f205f015403610f5d57816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610f549190614282565b60405180910390fd5b5f610f666121cd565b905060018082600a015f8881526020019081526020015f2080549050901c610f8e9190614df7565b9350505050919050565b6001610fa2612b00565b67ffffffffffffffff1614610fe3576040517f6f4f731f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f610fee612b24565b9050805f0160089054906101000a900460ff168061103657508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b1561106d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff0219169083151502179055506110c26110bd611609565b612b4b565b5f6110cf5f878787612b5f565b90505f6110da6121cd565b90506110eb815f01835f01516135c5565b7f13c5fd631ca031552fe9e38d911910a5980f6608eea323696e04db0fec0c955787878760405161111e93929190615036565b60405180910390a150505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2826040516111729190615088565b60405180910390a15050505050565b611189613693565b6111925f61371a565b565b5f61119d613757565b90508073ffffffffffffffffffffffffffffffffffffffff166111be611c62565b73ffffffffffffffffffffffffffffffffffffffff161461121657806040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161120d919061490f565b60405180910390fd5b61121f8161371a565b50565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561127f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112a39190614d51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461131257336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401611309919061490f565b60405180910390fd5b5f61131b6121cd565b90505f611326611e65565b90505f611338825f0151888888612b5f565b90507faf58a18a4e4159fa706c0d4e0fdab0930f97679319cddbc9c9199b0cd104b6ef82828660405161136d939291906150f4565b60405180910390a1611384835f01825f015161375e565b611393835f01825f01516138c3565b5f845f0135426113a39190614df7565b90508084600d015f845f015181526020019081526020015f2081905550846020013584600f015f855f015181526020019081526020015f20819055507f2b0188fc4bed471ee216dc6cb9650beb288892034ebee7301b32391add2a66b88282604051611410929190615137565b60405180910390a15050505050505050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561147f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114a39190614d51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461151257336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401611509919061490f565b60405180910390fd5b5f61151b61068a565b90505f611526613999565b90505f6115316121cd565b905061153f815f0183612300565b5f844261154c9190614df7565b90508082600e015f8581526020019081526020015f20819055507f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc8382604051611597929190614d7c565b60405180910390a16115ab825f01856121f4565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71846040516115da9190614282565b60405180910390a15050505050565b5f806115f36121cd565b9050611601815f01846139b2565b915050919050565b5f806116136139da565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b5f815f6116496121cd565b90505f816006015f8481526020019081526020015f205f0154036116a457816040517fabf9e7b000000000000000000000000000000000000000000000000000000000815260040161169b9190614282565b60405180910390fd5b5f6116ad6121cd565b905080600e015f8681526020019081526020015f20549350505050919050565b5f806116d7613999565b90505f8103611712576040517f046593ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b815f6117236121cd565b90505f816006015f8481526020019081526020015f205f01540361177e57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016117759190614282565b60405180910390fd5b5f6117876121cd565b905080600b015f8681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166118275784846040517f554f8c5f00000000000000000000000000000000000000000000000000000000815260040161181e929190615165565b60405180910390fd5b5050505050565b5f815f6118396121cd565b90505f816006015f8481526020019081526020015f205f01540361189457816040517fabf9e7b000000000000000000000000000000000000000000000000000000000815260040161188b9190614282565b60405180910390fd5b5f61189d6121cd565b905080600d015f8681526020019081526020015f20549350505050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f80611900613a01565b90505f810361193b576040517fb9e861b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b61194a6141f3565b825f6119546121cd565b90505f816006015f8481526020019081526020015f205f0154036119af57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016119a69190614282565b60405180910390fd5b5f6119b86121cd565b90505f816008015f8881526020019081526020015f205f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f82018054611a23906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4f906151b9565b8015611a9a5780601f10611a7157610100808354040283529160200191611a9a565b820191905f5260205f20905b815481529060010190602001808311611a7d57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054611b5d906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054611b89906151b9565b8015611bd45780601f10611bab57610100808354040283529160200191611bd4565b820191905f5260205f20905b815481529060010190602001808311611bb757829003601f168201915b50505050508152505090505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603611c555786866040517fc312e73e000000000000000000000000000000000000000000000000000000008152600401611c4c929190615165565b60405180910390fd5b8094505050505092915050565b5f80611c6c613a1a565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b815f611ca16121cd565b90505f816006015f8481526020019081526020015f205f015403611cfc57816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401611cf39190614282565b60405180910390fd5b5f611d056121cd565b9050806009015f8681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611da55784846040517f29a993c1000000000000000000000000000000000000000000000000000000008152600401611d9c929190615165565b60405180910390fd5b5050505050565b611db4613693565b5f611dbd613a1a565b905081815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16611e1f611609565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b611e6d614245565b5f611e766116cd565b90505f611e816121cd565b9050806006015f8381526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020015f905b828210156120db578382905f5260205f2090600402016040518060800160405290815f82018054611f12906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3e906151b9565b8015611f895780601f10611f6057610100808354040283529160200191611f89565b820191905f5260205f20905b815481529060010190602001808311611f6c57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461204c906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054612078906151b9565b80156120c35780601f1061209a576101008083540402835291602001916120c3565b820191905f5260205f20905b8154815290600101906020018083116120a657829003601f168201915b50505050508152505081526020019060010190611ee2565b50505050815250509250505090565b5f806120f46121cd565b9050805f016004015491505090565b60605f600161211184613a41565b0190505f8167ffffffffffffffff81111561212f5761212e614545565b5b6040519080825280601f01601f1916602001820160405280156121615781602001600182028036833780820191505090505b5090505f82602001820190505b6001156121c2578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816121b7576121b66151e9565b5b0494505f850361216e575b819350505050919050565b5f7f1da8a9a065a2f0a895c457065eddd3cf4a4d0d5340aaa0ca54d3cd5b4a6aaf00905090565b805f810361222e576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6122388383613b92565b15801561224c575061224a8383613be1565b155b1561228e57816040517f12b49e3d0000000000000000000000000000000000000000000000000000000081526004016122859190614282565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156122c3576122c2614874565b5b0217905550818360030181905550818360020154036122e6575f83600201819055505b818360040154036122fb575f83600401819055505b505050565b805f810361233a576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6123448383613c30565b61238557816040517f331486b300000000000000000000000000000000000000000000000000000000815260040161237c9190614282565b60405180910390fd5b6004835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156123ba576123b9614874565b5b02179055508183600401819055505f8360030181905550505050565b805f8103612410576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61241a8383613be1565b61245b57816040517f77bf58460000000000000000000000000000000000000000000000000000000081526004016124529190614282565b60405180910390fd5b6005835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156124905761248f614874565b5b02179055505f8360040181905550505050565b805f81036124dd576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826124e98282613c7f565b1561252b57806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016125229190614282565b60405180910390fd5b6125358585613ccd565b1561257757836040517f0ddd14ca00000000000000000000000000000000000000000000000000000000815260040161256e9190614282565b60405180910390fd5b6125818585613c30565b156125c357836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016125ba9190614282565b60405180910390fd5b6006855f015f8681526020019081526020015f205f6101000a81548160ff021916908360078111156125f8576125f7614874565b5b021790555083856002015403612612575f85600201819055505b83856004015403612627575f85600401819055505b5050505050565b805f8103612668576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826126748282613c7f565b156126b657806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016126ad9190614282565b60405180910390fd5b6126c08585613c30565b1561270257836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016126f99190614282565b60405180910390fd5b6007855f015f8681526020019081526020015f205f6101000a81548160ff0219169083600781111561273757612736614874565b5b021790555083856001015403612751575f85600101819055505b83856002015403612766575f85600201819055505b8385600401540361277b575f85600401819055505b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061282f57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612816613d1c565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612866576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128e99190614d51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461295857336040517f0e56cf3d00000000000000000000000000000000000000000000000000000000815260040161294f919061490f565b60405180910390fd5b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156129c357506040513d601f19601f820116820180604052508101906129c09190615240565b60015b612a0457816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016129fb919061490f565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b8114612a6a57806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401612a6191906146db565b60405180910390fd5b612a748383613d6f565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612afe576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f612b09612b24565b5f015f9054906101000a900467ffffffffffffffff16905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612b53613de1565b612b5c81613e21565b50565b612b67614245565b5f8383905003612ba3576040517f8af082ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f612bac6121cd565b9050806007015f815480929190612bc29061526b565b91905055505f8160070154905080826006015f8381526020019081526020015f205f018190555086826006015f8381526020019081526020015f206001018190555085826006015f8381526020019081526020015f20600201819055505f5b85859050811015613358575f73ffffffffffffffffffffffffffffffffffffffff16868683818110612c5657612c556152b2565b5b9050602002810190612c6891906152eb565b6020016020810190612c7a9190614a35565b73ffffffffffffffffffffffffffffffffffffffff1603612cd6578086866040517f9edb7861000000000000000000000000000000000000000000000000000000008152600401612ccd93929190615036565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff16868683818110612d0057612cff6152b2565b5b9050602002810190612d1291906152eb565b6040016020810190612d249190614a35565b73ffffffffffffffffffffffffffffffffffffffff1603612d80578086866040517f4a6c5974000000000000000000000000000000000000000000000000000000008152600401612d7793929190615036565b60405180910390fd5b826009015f8381526020019081526020015f205f878784818110612da757612da66152b2565b5b9050602002810190612db991906152eb565b6020016020810190612dcb9190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612e8f57858582818110612e2957612e286152b2565b5b9050602002810190612e3b91906152eb565b6020016020810190612e4d9190614a35565b8187876040517f64d52759000000000000000000000000000000000000000000000000000000008152600401612e869493929190615312565b60405180910390fd5b82600b015f8381526020019081526020015f205f878784818110612eb657612eb56152b2565b5b9050602002810190612ec891906152eb565b6040016020810190612eda9190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612f9e57858582818110612f3857612f376152b2565b5b9050602002810190612f4a91906152eb565b6040016020810190612f5c9190614a35565b8187876040517fc826e1a2000000000000000000000000000000000000000000000000000000008152600401612f959493929190615312565b60405180910390fd5b826006015f8381526020019081526020015f20600301868683818110612fc757612fc66152b2565b5b9050602002810190612fd991906152eb565b908060018154018082558091505060019003905f5260205f2090600402015f90919091909150818161300b9190615780565b50508585828181106130205761301f6152b2565b5b905060200281019061303291906152eb565b836008015f8481526020019081526020015f205f888885818110613059576130586152b2565b5b905060200281019061306b91906152eb565b602001602081019061307d9190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081816130c29190615780565b9050506001836009015f8481526020019081526020015f205f8888858181106130ee576130ed6152b2565b5b905060200281019061310091906152eb565b60200160208101906131129190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600a015f8381526020019081526020015f20868683818110613187576131866152b2565b5b905060200281019061319991906152eb565b60200160208101906131ab9190614a35565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183600b015f8481526020019081526020015f205f888885818110613231576132306152b2565b5b905060200281019061324391906152eb565b60400160208101906132559190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600c015f8381526020019081526020015f208686838181106132ca576132c96152b2565b5b90506020028101906132dc91906152eb565b60400160208101906132ee9190614a35565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050612c21565b50816006015f8281526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020015f905b828210156135b1578382905f5260205f2090600402016040518060800160405290815f820180546133e8906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054613414906151b9565b801561345f5780601f106134365761010080835404028352916020019161345f565b820191905f5260205f20905b81548152906001019060200180831161344257829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054613522906151b9565b80601f016020809104026020016040519081016040528092919081815260200182805461354e906151b9565b80156135995780601f1061357057610100808354040283529160200191613599565b820191905f5260205f20905b81548152906001019060200180831161357c57829003601f168201915b505050505081525050815260200190600101906133b8565b505050508152505092505050949350505050565b805f81036135ff576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83600301541461364b5782600301546040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016136429190614282565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156136805761367f614874565b5b0217905550818360030181905550505050565b61369b613757565b73ffffffffffffffffffffffffffffffffffffffff166136b9611609565b73ffffffffffffffffffffffffffffffffffffffff1614613718576136dc613757565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161370f919061490f565b60405180910390fd5b565b5f613723613a1a565b9050805f015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561375382613ea5565b5050565b5f33905090565b805f8103613798576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6137a28383613c7f565b6137e357816040517f6653f6d70000000000000000000000000000000000000000000000000000000081526004016137da9190614282565b60405180910390fd5b5f83600201541461382f5782600201546040517fc470c0220000000000000000000000000000000000000000000000000000000081526004016138269190614282565b60405180910390fd5b5f83600401541461387b5782600401546040517f7022ec410000000000000000000000000000000000000000000000000000000081526004016138729190614282565b60405180910390fd5b6001835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156138b0576138af614874565b5b0217905550818360010181905550505050565b805f81036138fd576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6139078383613ccd565b61394857816040517fc0b5ee6600000000000000000000000000000000000000000000000000000000815260040161393f9190614282565b60405180910390fd5b6002835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561397d5761397c614874565b5b02179055508183600201819055505f8360010181905550505050565b5f806139a36121cd565b9050805f016003015491505090565b5f825f015f8381526020019081526020015f205f9054906101000a900460ff16905092915050565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f80613a0b6121cd565b9050805f016002015491505090565b5f7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00905090565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613a9d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381613a9357613a926151e9565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613ada576d04ee2d6d415b85acef81000000008381613ad057613acf6151e9565b5b0492506020810190505b662386f26fc100008310613b0957662386f26fc100008381613aff57613afe6151e9565b5b0492506010810190505b6305f5e1008310613b32576305f5e1008381613b2857613b276151e9565b5b0492506008810190505b6127108310613b57576127108381613b4d57613b4c6151e9565b5b0492506004810190505b60648310613b7a5760648381613b7057613b6f6151e9565b5b0492506002810190505b600a8310613b89576001810190505b80915050919050565b5f60026007811115613ba757613ba6614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613bd857613bd7614874565b5b14905092915050565b5f60046007811115613bf657613bf5614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613c2757613c26614874565b5b14905092915050565b5f60036007811115613c4557613c44614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613c7657613c75614874565b5b14905092915050565b5f806007811115613c9357613c92614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613cc457613cc3614874565b5b14905092915050565b5f60016007811115613ce257613ce1614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613d1357613d12614874565b5b14905092915050565b5f613d487f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613f76565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b613d7882613f7f565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f81511115613dd457613dce8282614048565b50613ddd565b613ddc6140c8565b5b5050565b613de9614104565b613e1f576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613e29613de1565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613e99575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401613e90919061490f565b60405180910390fd5b613ea28161371a565b50565b5f613eae6139da565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b03613fda57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401613fd1919061490f565b60405180910390fd5b806140067f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613f76565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff168460405161407191906157d2565b5f60405180830381855af49150503d805f81146140a9576040519150601f19603f3d011682016040523d82523d5f602084013e6140ae565b606091505b50915091506140be858383614122565b9250505092915050565b5f341115614102576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f61410d612b24565b5f0160089054906101000a900460ff16905090565b60608261413757614132826141af565b6141a7565b5f825114801561415d57505f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561419f57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401614196919061490f565b60405180910390fd5b8190506141a8565b5b9392505050565b5f815111156141c15780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60405180608001604052805f81526020015f81526020015f8152602001606081525090565b5f819050919050565b61427c8161426a565b82525050565b5f6020820190506142955f830184614273565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156142d25780820151818401526020810190506142b7565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6142f78261429b565b61430181856142a5565b93506143118185602086016142b5565b61431a816142dd565b840191505092915050565b5f6020820190508181035f83015261433d81846142ed565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b61435f8161426a565b8114614369575f80fd5b50565b5f8135905061437a81614356565b92915050565b5f602082840312156143955761439461434e565b5b5f6143a28482850161436c565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6143fd826143d4565b9050919050565b61440d816143f3565b82525050565b5f61441e8383614404565b60208301905092915050565b5f602082019050919050565b5f614440826143ab565b61444a81856143b5565b9350614455836143c5565b805f5b8381101561448557815161446c8882614413565b97506144778361442a565b925050600181019050614458565b5085935050505092915050565b5f6020820190508181035f8301526144aa8184614436565b905092915050565b600881106144be575f80fd5b50565b5f813590506144cf816144b2565b92915050565b5f80604083850312156144eb576144ea61434e565b5b5f6144f88582860161436c565b9250506020614509858286016144c1565b9150509250929050565b61451c816143f3565b8114614526575f80fd5b50565b5f8135905061453781614513565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61457b826142dd565b810181811067ffffffffffffffff8211171561459a57614599614545565b5b80604052505050565b5f6145ac614345565b90506145b88282614572565b919050565b5f67ffffffffffffffff8211156145d7576145d6614545565b5b6145e0826142dd565b9050602081019050919050565b828183375f83830152505050565b5f61460d614608846145bd565b6145a3565b90508281526020810184848401111561462957614628614541565b5b6146348482856145ed565b509392505050565b5f82601f8301126146505761464f61453d565b5b81356146608482602086016145fb565b91505092915050565b5f806040838503121561467f5761467e61434e565b5b5f61468c85828601614529565b925050602083013567ffffffffffffffff8111156146ad576146ac614352565b5b6146b98582860161463c565b9150509250929050565b5f819050919050565b6146d5816146c3565b82525050565b5f6020820190506146ee5f8301846146cc565b92915050565b5f8115159050919050565b614708816146f4565b82525050565b5f6020820190506147215f8301846146ff565b92915050565b5f80fd5b5f80fd5b5f8083601f8401126147445761474361453d565b5b8235905067ffffffffffffffff81111561476157614760614727565b5b60208301915083602082028301111561477d5761477c61472b565b5b9250929050565b5f805f6040848603121561479b5761479a61434e565b5b5f6147a88682870161436c565b935050602084013567ffffffffffffffff8111156147c9576147c8614352565b5b6147d58682870161472f565b92509250509250925092565b5f80fd5b5f604082840312156147fa576147f96147e1565b5b81905092915050565b5f805f806080858703121561481b5761481a61434e565b5b5f6148288782880161436c565b945050602085013567ffffffffffffffff81111561484957614848614352565b5b6148558782880161472f565b93509350506040614868878288016147e5565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600881106148b2576148b1614874565b5b50565b5f8190506148c2826148a1565b919050565b5f6148d1826148b5565b9050919050565b6148e1816148c7565b82525050565b5f6020820190506148fa5f8301846148d8565b92915050565b614909816143f3565b82525050565b5f6020820190506149225f830184614900565b92915050565b5f806040838503121561493e5761493d61434e565b5b5f61494b8582860161436c565b925050602061495c85828601614529565b9150509250929050565b5f82825260208201905092915050565b5f6149808261429b565b61498a8185614966565b935061499a8185602086016142b5565b6149a3816142dd565b840191505092915050565b5f608083015f8301518482035f8601526149c88282614976565b91505060208301516149dd6020860182614404565b5060408301516149f06040860182614404565b5060608301518482036060860152614a088282614976565b9150508091505092915050565b5f6020820190508181035f830152614a2d81846149ae565b905092915050565b5f60208284031215614a4a57614a4961434e565b5b5f614a5784828501614529565b91505092915050565b614a698161426a565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f860152614ab28282614976565b9150506020830151614ac76020860182614404565b506040830151614ada6040860182614404565b5060608301518482036060860152614af28282614976565b9150508091505092915050565b5f614b0a8383614a98565b905092915050565b5f602082019050919050565b5f614b2882614a6f565b614b328185614a79565b935083602082028501614b4485614a89565b805f5b85811015614b7f5784840389528151614b608582614aff565b9450614b6b83614b12565b925060208a01995050600181019050614b47565b50829750879550505050505092915050565b5f608083015f830151614ba65f860182614a60565b506020830151614bb96020860182614a60565b506040830151614bcc6040860182614a60565b5060608301518482036060860152614be48282614b1e565b9150508091505092915050565b5f6020820190508181035f830152614c098184614b91565b905092915050565b5f81905092915050565b5f614c258261429b565b614c2f8185614c11565b9350614c3f8185602086016142b5565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f614c7f600283614c11565b9150614c8a82614c4b565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614cc9600183614c11565b9150614cd482614c95565b600182019050919050565b5f614cea8287614c1b565b9150614cf582614c73565b9150614d018286614c1b565b9150614d0c82614cbd565b9150614d188285614c1b565b9150614d2382614cbd565b9150614d2f8284614c1b565b915081905095945050505050565b5f81519050614d4b81614513565b92915050565b5f60208284031215614d6657614d6561434e565b5b5f614d7384828501614d3d565b91505092915050565b5f604082019050614d8f5f830185614273565b614d9c6020830184614273565b9392505050565b5f604082019050614db65f830185614273565b614dc360208301846148d8565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f614e018261426a565b9150614e0c8361426a565b9250828201905080821115614e2457614e23614dca565b5b92915050565b5f82825260208201905092915050565b5f819050919050565b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112614e6b57614e6a614e4b565b5b83810192508235915060208301925067ffffffffffffffff821115614e9357614e92614e43565b5b600182023603831315614ea957614ea8614e47565b5b509250929050565b5f614ebc8385614966565b9350614ec98385846145ed565b614ed2836142dd565b840190509392505050565b5f614eeb6020840184614529565b905092915050565b5f60808301614f045f840184614e4f565b8583035f870152614f16838284614eb1565b92505050614f276020840184614edd565b614f346020860182614404565b50614f426040840184614edd565b614f4f6040860182614404565b50614f5d6060840184614e4f565b8583036060870152614f70838284614eb1565b925050508091505092915050565b5f614f898383614ef3565b905092915050565b5f82356001608003833603038112614fac57614fab614e4b565b5b82810191505092915050565b5f602082019050919050565b5f614fcf8385614e2a565b935083602084028501614fe184614e3a565b805f5b87811015615024578484038952614ffb8284614f91565b6150058582614f7e565b945061501083614fb8565b925060208a01995050600181019050614fe4565b50829750879450505050509392505050565b5f6040820190506150495f830186614273565b818103602083015261505c818486614fc4565b9050949350505050565b5f67ffffffffffffffff82169050919050565b61508281615066565b82525050565b5f60208201905061509b5f830184615079565b92915050565b5f6150af602084018461436c565b905092915050565b604082016150c75f8301836150a1565b6150d35f850182614a60565b506150e160208301836150a1565b6150ee6020850182614a60565b50505050565b5f6080820190508181035f83015261510c8186614b91565b905081810360208301526151208185614b91565b905061512f60408301846150b7565b949350505050565b5f6040820190508181035f83015261514f8185614b91565b905061515e6020830184614273565b9392505050565b5f6040820190506151785f830185614273565b6151856020830184614900565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806151d057607f821691505b6020821081036151e3576151e261518c565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b61521f816146c3565b8114615229575f80fd5b50565b5f8151905061523a81615216565b92915050565b5f602082840312156152555761525461434e565b5b5f6152628482850161522c565b91505092915050565b5f6152758261426a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036152a7576152a6614dca565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f82356001608003833603038112615306576153056152df565b5b80830191505092915050565b5f6060820190506153255f830187614900565b6153326020830186614273565b8181036040830152615345818486614fc4565b905095945050505050565b5f808335600160200384360303811261536c5761536b6152df565b5b80840192508235915067ffffffffffffffff82111561538e5761538d6152e3565b5b6020830192506001820236038313156153aa576153a96152e7565b5b509250929050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026154187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826153dd565b61542286836153dd565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61545d6154586154538461426a565b61543a565b61426a565b9050919050565b5f819050919050565b61547683615443565b61548a61548282615464565b8484546153e9565b825550505050565b5f90565b61549e615492565b6154a981848461546d565b505050565b5b818110156154cc576154c15f82615496565b6001810190506154af565b5050565b601f821115615511576154e2816153bc565b6154eb846153ce565b810160208510156154fa578190505b61550e615506856153ce565b8301826154ae565b50505b505050565b5f82821c905092915050565b5f6155315f1984600802615516565b1980831691505092915050565b5f6155498383615522565b9150826002028217905092915050565b61556383836153b2565b67ffffffffffffffff81111561557c5761557b614545565b5b61558682546151b9565b6155918282856154d0565b5f601f8311600181146155be575f84156155ac578287013590505b6155b6858261553e565b86555061561d565b601f1984166155cc866153bc565b5f5b828110156155f3578489013582556001820191506020850194506020810190506155ce565b86831015615610578489013561560c601f891682615522565b8355505b6001600288020188555050505b50505050505050565b615631838383615559565b505050565b5f813561564281614513565b80915050919050565b5f815f1b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff6156758461564b565b9350801983169250808416831791505092915050565b5f6156a56156a061569b846143d4565b61543a565b6143d4565b9050919050565b5f6156b68261568b565b9050919050565b5f6156c7826156ac565b9050919050565b5f819050919050565b6156e0826156bd565b6156f36156ec826156ce565b8354615656565b8255505050565b5f81015f830161570a8185615350565b615715818386615626565b5050505060018101602083018061572b81615636565b905061573781846156d7565b50505060028101604083018061574c81615636565b905061575881846156d7565b505050600381016060830161576d8185615350565b615778818386615626565b505050505050565b61578a82826156fa565b5050565b5f81519050919050565b5f81905092915050565b5f6157ac8261578e565b6157b68185615798565b93506157c68185602086016142b5565b80840191505092915050565b5f6157dd82846157a2565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP4\x80\x15b\0\0CW_\x80\xFD[Pb\0\0Tb\0\0Z` \x1B` \x1CV[b\0\x01\xC4V[_b\0\0kb\0\x01^` \x1B` \x1CV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15b\0\0\xB6W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14b\0\x01[Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Qb\0\x01R\x91\x90b\0\x01\xA9V[`@Q\x80\x91\x03\x90\xA1[PV[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[b\0\x01\xA3\x81b\0\x01\x85V[\x82RPPV[_` \x82\x01\x90Pb\0\x01\xBE_\x83\x01\x84b\0\x01\x98V[\x92\x91PPV[`\x80QaW\xE8b\0\x01\xEB_9_\x81\x81a'\x84\x01R\x81\x81a'\xD9\x01Ra*{\x01RaW\xE8_\xF3\xFE`\x80`@R`\x046\x10a\x01\xB6W_5`\xE0\x1C\x80c\x86\xDF\xC7\xDE\x11a\0\xEBW\x80c\xAD<\xB1\xCC\x11a\0\x89W\x80c\xE3\x0C9x\x11a\0cW\x80c\xE3\x0C9x\x14a\x05\xE6W\x80c\xF1\x92\xCFh\x14a\x06\x10W\x80c\xF2\xFD\xE3\x8B\x14a\x068W\x80c\xFE\xD9qk\x14a\x06`Wa\x01\xB6V[\x80c\xAD<\xB1\xCC\x14a\x05VW\x80c\xBE\x91\x18{\x14a\x05\x80W\x80c\xD1\x84\x1D\xD3\x14a\x05\xAAWa\x01\xB6V[\x80c\x90!\x87H\x11a\0\xC5W\x80c\x90!\x87H\x14a\x04\x8CW\x80c\x99\x1D\xC3m\x14a\x04\xC8W\x80c\x9E\xFBHN\x14a\x04\xF2W\x80c\xA9J\x02\xAD\x14a\x05\x1AWa\x01\xB6V[\x80c\x86\xDF\xC7\xDE\x14a\x03\xFEW\x80c\x88\x8B\x99\xE0\x14a\x04&W\x80c\x8D\xA5\xCB[\x14a\x04bWa\x01\xB6V[\x80c`\xB2Te\x11a\x01XW\x80cp<;.\x11a\x012W\x80cp<;.\x14a\x03\x82W\x80cqP\x18\xA6\x14a\x03\xAAW\x80cy\xBAP\x97\x14a\x03\xC0W\x80c\x84\xCA\xE1\x87\x14a\x03\xD6Wa\x01\xB6V[\x80c`\xB2Te\x14a\x02\xCEW\x80ck1t\xE5\x14a\x03\nW\x80ck\xA8\x18\xE1\x14a\x03FWa\x01\xB6V[\x80c1\x12\xA5U\x11a\x01\x94W\x80c1\x12\xA5U\x14a\x02JW\x80c:Qb\xE6\x14a\x02rW\x80cO\x1E\xF2\x86\x14a\x02\x88W\x80cR\xD1\x90-\x14a\x02\xA4Wa\x01\xB6V[\x80c\x08nN\x1C\x14a\x01\xBAW\x80c\r\x8En,\x14a\x01\xE4W\x80c\x18\xB7!M\x14a\x02\x0EW[_\x80\xFD[4\x80\x15a\x01\xC5W_\x80\xFD[Pa\x01\xCEa\x06\x8AV[`@Qa\x01\xDB\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xEFW_\x80\xFD[Pa\x01\xF8a\x06\xD6V[`@Qa\x02\x05\x91\x90aC%V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x19W_\x80\xFD[Pa\x024`\x04\x806\x03\x81\x01\x90a\x02/\x91\x90aC\x80V[a\x07QV[`@Qa\x02A\x91\x90aD\x92V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02UW_\x80\xFD[Pa\x02p`\x04\x806\x03\x81\x01\x90a\x02k\x91\x90aD\xD5V[a\x07\xFBV[\0[4\x80\x15a\x02}W_\x80\xFD[Pa\x02\x86a\x0B\xEAV[\0[a\x02\xA2`\x04\x806\x03\x81\x01\x90a\x02\x9D\x91\x90aFiV[a\rsV[\0[4\x80\x15a\x02\xAFW_\x80\xFD[Pa\x02\xB8a\r\x92V[`@Qa\x02\xC5\x91\x90aF\xDBV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xD9W_\x80\xFD[Pa\x02\xF4`\x04\x806\x03\x81\x01\x90a\x02\xEF\x91\x90aC\x80V[a\r\xC3V[`@Qa\x03\x01\x91\x90aG\x0EV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x15W_\x80\xFD[Pa\x030`\x04\x806\x03\x81\x01\x90a\x03+\x91\x90aC\x80V[a\x0EMV[`@Qa\x03=\x91\x90aD\x92V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03QW_\x80\xFD[Pa\x03l`\x04\x806\x03\x81\x01\x90a\x03g\x91\x90aC\x80V[a\x0E\xF7V[`@Qa\x03y\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x8DW_\x80\xFD[Pa\x03\xA8`\x04\x806\x03\x81\x01\x90a\x03\xA3\x91\x90aG\x84V[a\x0F\x98V[\0[4\x80\x15a\x03\xB5W_\x80\xFD[Pa\x03\xBEa\x11\x81V[\0[4\x80\x15a\x03\xCBW_\x80\xFD[Pa\x03\xD4a\x11\x94V[\0[4\x80\x15a\x03\xE1W_\x80\xFD[Pa\x03\xFC`\x04\x806\x03\x81\x01\x90a\x03\xF7\x91\x90aH\x03V[a\x12\"V[\0[4\x80\x15a\x04\tW_\x80\xFD[Pa\x04$`\x04\x806\x03\x81\x01\x90a\x04\x1F\x91\x90aC\x80V[a\x14\"V[\0[4\x80\x15a\x041W_\x80\xFD[Pa\x04L`\x04\x806\x03\x81\x01\x90a\x04G\x91\x90aC\x80V[a\x15\xE9V[`@Qa\x04Y\x91\x90aH\xE7V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04mW_\x80\xFD[Pa\x04va\x16\tV[`@Qa\x04\x83\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\x97W_\x80\xFD[Pa\x04\xB2`\x04\x806\x03\x81\x01\x90a\x04\xAD\x91\x90aC\x80V[a\x16>V[`@Qa\x04\xBF\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xD3W_\x80\xFD[Pa\x04\xDCa\x16\xCDV[`@Qa\x04\xE9\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xFDW_\x80\xFD[Pa\x05\x18`\x04\x806\x03\x81\x01\x90a\x05\x13\x91\x90aI(V[a\x17\x19V[\0[4\x80\x15a\x05%W_\x80\xFD[Pa\x05@`\x04\x806\x03\x81\x01\x90a\x05;\x91\x90aC\x80V[a\x18.V[`@Qa\x05M\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05aW_\x80\xFD[Pa\x05ja\x18\xBDV[`@Qa\x05w\x91\x90aC%V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\x8BW_\x80\xFD[Pa\x05\x94a\x18\xF6V[`@Qa\x05\xA1\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xB5W_\x80\xFD[Pa\x05\xD0`\x04\x806\x03\x81\x01\x90a\x05\xCB\x91\x90aI(V[a\x19BV[`@Qa\x05\xDD\x91\x90aJ\x15V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xF1W_\x80\xFD[Pa\x05\xFAa\x1CbV[`@Qa\x06\x07\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06\x1BW_\x80\xFD[Pa\x066`\x04\x806\x03\x81\x01\x90a\x061\x91\x90aI(V[a\x1C\x97V[\0[4\x80\x15a\x06CW_\x80\xFD[Pa\x06^`\x04\x806\x03\x81\x01\x90a\x06Y\x91\x90aJ5V[a\x1D\xACV[\0[4\x80\x15a\x06kW_\x80\xFD[Pa\x06ta\x1EeV[`@Qa\x06\x81\x91\x90aK\xF1V[`@Q\x80\x91\x03\x90\xF3[_\x80a\x06\x94a \xEAV[\x90P_\x81\x03a\x06\xCFW`@Q\x7F!\xFB\x08\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[```@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FCoprocessorContexts\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x07\x17_a!\x03V[a\x07!`\x01a!\x03V[a\x07*_a!\x03V[`@Q` \x01a\x07=\x94\x93\x92\x91\x90aL\xDFV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[``_a\x07\\a!\xCDV[\x90P\x80`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x07\xEEW` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x07\xA5W[PPPPP\x91PP\x91\x90PV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08XW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08|\x91\x90aMQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x08\xEBW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\xE2\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[\x81_a\x08\xF5a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\tPW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\tG\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\tYa!\xCDV[\x90P`\x03`\x07\x81\x11\x15a\toWa\tnaHtV[[\x84`\x07\x81\x11\x15a\t\x82Wa\t\x81aHtV[[\x03a\t\xCFWa\t\x93\x81_\x01\x86a!\xF4V[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x85`@Qa\t\xC2\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1a\x0B\xE3V[`\x04`\x07\x81\x11\x15a\t\xE3Wa\t\xE2aHtV[[\x84`\x07\x81\x11\x15a\t\xF6Wa\t\xF5aHtV[[\x03a\nEWa\n\x07\x81_\x01\x86a#\0V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x85B`@Qa\n8\x92\x91\x90aM|V[`@Q\x80\x91\x03\x90\xA1a\x0B\xE2V[`\x05`\x07\x81\x11\x15a\nYWa\nXaHtV[[\x84`\x07\x81\x11\x15a\nlWa\nkaHtV[[\x03a\n\xB9Wa\n}\x81_\x01\x86a#\xD6V[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x85`@Qa\n\xAC\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1a\x0B\xE1V[`\x06`\x07\x81\x11\x15a\n\xCDWa\n\xCCaHtV[[\x84`\x07\x81\x11\x15a\n\xE0Wa\n\xDFaHtV[[\x03a\x0B-Wa\n\xF1\x81_\x01\x86a$\xA3V[\x7F\xEE~\xF89cAq%\xD2t0x\x9F\xC6\xE9A\x948\x1E\x82\xC3\xCD\xA6\x82`\xD0\xE7\xCF\xC3\x1E\xAF!\x85`@Qa\x0B \x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1a\x0B\xE0V[`\x07\x80\x81\x11\x15a\x0B@Wa\x0B?aHtV[[\x84`\x07\x81\x11\x15a\x0BSWa\x0BRaHtV[[\x03a\x0B\xA0Wa\x0Bd\x81_\x01\x86a&.V[\x7F\xF2\x0B)\x98\x04\xC9\xC1\xD6\xDA;\x82ALz\xA0\xA8E\xCD\xBA\xBA\xE2\xD9\x0EF\xE3`\xA3y\xA7{{\xE5\x85`@Qa\x0B\x93\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1a\x0B\xDFV[\x84\x84`@Q\x7F\xF0\xBE\xD6\x8F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\xD6\x92\x91\x90aM\xA3V[`@Q\x80\x91\x03\x90\xFD[[[[[PPPPPV[_a\x0B\xF3a!\xCDV[\x90P_\x81_\x01`\x02\x01T\x90P_\x81\x14\x15\x80\x15a\x0C\"WP\x81`\r\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\x0C\xF7W_a\x0C0a\x16\xCDV[\x90P_\x83`\x0F\x01_\x83\x81R` \x01\x90\x81R` \x01_ TBa\x0CR\x91\x90aM\xF7V[\x90P\x80\x84`\x0E\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UPa\x0Cx\x84_\x01\x83a#\0V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x82\x82`@Qa\x0C\xA9\x92\x91\x90aM|V[`@Q\x80\x91\x03\x90\xA1a\x0C\xBD\x84_\x01\x84a!\xF4V[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x83`@Qa\x0C\xEC\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1PP[_a\r\0a \xEAV[\x90P_\x81\x14\x15\x80\x15a\r%WP\x82`\x0E\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\rnWa\r6\x83_\x01\x82a#\xD6V[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x81`@Qa\re\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1[PPPV[a\r{a'\x82V[a\r\x84\x82a(hV[a\r\x8E\x82\x82a)[V[PPV[_a\r\x9Ba*yV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[_\x81_a\r\xCEa!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x0E)W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0E \x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a\x0E1a\x16\xCDV[\x84\x14\x80a\x0EDWPa\x0EAa \xEAV[\x84\x14[\x92PPP\x91\x90PV[``_a\x0EXa!\xCDV[\x90P\x80`\x0C\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x0E\xEAW` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x0E\xA1W[PPPPP\x91PP\x91\x90PV[_\x81_a\x0F\x02a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x0F]W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0FT\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x0Ffa!\xCDV[\x90P`\x01\x80\x82`\n\x01_\x88\x81R` \x01\x90\x81R` \x01_ \x80T\x90P\x90\x1Ca\x0F\x8E\x91\x90aM\xF7V[\x93PPPP\x91\x90PV[`\x01a\x0F\xA2a+\0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0F\xE3W`@Q\x7FoOs\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_a\x0F\xEEa+$V[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\x106WP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\x10mW`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\x10\xC2a\x10\xBDa\x16\tV[a+KV[_a\x10\xCF_\x87\x87\x87a+_V[\x90P_a\x10\xDAa!\xCDV[\x90Pa\x10\xEB\x81_\x01\x83_\x01Qa5\xC5V[\x7F\x13\xC5\xFDc\x1C\xA01U/\xE9\xE3\x8D\x91\x19\x10\xA5\x98\x0Ff\x08\xEE\xA3#in\x04\xDB\x0F\xEC\x0C\x95W\x87\x87\x87`@Qa\x11\x1E\x93\x92\x91\x90aP6V[`@Q\x80\x91\x03\x90\xA1PP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x11r\x91\x90aP\x88V[`@Q\x80\x91\x03\x90\xA1PPPPPV[a\x11\x89a6\x93V[a\x11\x92_a7\x1AV[V[_a\x11\x9Da7WV[\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x11\xBEa\x1CbV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x12\x16W\x80`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x12\r\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[a\x12\x1F\x81a7\x1AV[PV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12\x7FW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\xA3\x91\x90aMQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x13\x12W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x13\t\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[_a\x13\x1Ba!\xCDV[\x90P_a\x13&a\x1EeV[\x90P_a\x138\x82_\x01Q\x88\x88\x88a+_V[\x90P\x7F\xAFX\xA1\x8ANAY\xFApl\rN\x0F\xDA\xB0\x93\x0F\x97g\x93\x19\xCD\xDB\xC9\xC9\x19\x9B\x0C\xD1\x04\xB6\xEF\x82\x82\x86`@Qa\x13m\x93\x92\x91\x90aP\xF4V[`@Q\x80\x91\x03\x90\xA1a\x13\x84\x83_\x01\x82_\x01Qa7^V[a\x13\x93\x83_\x01\x82_\x01Qa8\xC3V[_\x84_\x015Ba\x13\xA3\x91\x90aM\xF7V[\x90P\x80\x84`\r\x01_\x84_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x84` \x015\x84`\x0F\x01_\x85_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F+\x01\x88\xFCK\xEDG\x1E\xE2\x16\xDCl\xB9e\x0B\xEB(\x88\x92\x03N\xBE\xE70\x1B29\x1A\xDD*f\xB8\x82\x82`@Qa\x14\x10\x92\x91\x90aQ7V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14\x7FW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x14\xA3\x91\x90aMQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x15\x12W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x15\t\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[_a\x15\x1Ba\x06\x8AV[\x90P_a\x15&a9\x99V[\x90P_a\x151a!\xCDV[\x90Pa\x15?\x81_\x01\x83a#\0V[_\x84Ba\x15L\x91\x90aM\xF7V[\x90P\x80\x82`\x0E\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x83\x82`@Qa\x15\x97\x92\x91\x90aM|V[`@Q\x80\x91\x03\x90\xA1a\x15\xAB\x82_\x01\x85a!\xF4V[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x84`@Qa\x15\xDA\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1PPPPPV[_\x80a\x15\xF3a!\xCDV[\x90Pa\x16\x01\x81_\x01\x84a9\xB2V[\x91PP\x91\x90PV[_\x80a\x16\x13a9\xDAV[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[_\x81_a\x16Ia!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x16\xA4W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\x9B\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x16\xADa!\xCDV[\x90P\x80`\x0E\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[_\x80a\x16\xD7a9\x99V[\x90P_\x81\x03a\x17\x12W`@Q\x7F\x04e\x93\xEA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[\x81_a\x17#a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x17~W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17u\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x17\x87a!\xCDV[\x90P\x80`\x0B\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x18'W\x84\x84`@Q\x7FUO\x8C_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x18\x1E\x92\x91\x90aQeV[`@Q\x80\x91\x03\x90\xFD[PPPPPV[_\x81_a\x189a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x18\x94W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x18\x8B\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x18\x9Da!\xCDV[\x90P\x80`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[_\x80a\x19\0a:\x01V[\x90P_\x81\x03a\x19;W`@Q\x7F\xB9\xE8a\xB2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[a\x19JaA\xF3V[\x82_a\x19Ta!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x19\xAFW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x19\xA6\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x19\xB8a!\xCDV[\x90P_\x81`\x08\x01_\x88\x81R` \x01\x90\x81R` \x01_ _\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x1A#\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1AO\x90aQ\xB9V[\x80\x15a\x1A\x9AW\x80`\x1F\x10a\x1AqWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1A\x9AV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1A}W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x1B]\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1B\x89\x90aQ\xB9V[\x80\x15a\x1B\xD4W\x80`\x1F\x10a\x1B\xABWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1B\xD4V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1B\xB7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x1CUW\x86\x86`@Q\x7F\xC3\x12\xE7>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1CL\x92\x91\x90aQeV[`@Q\x80\x91\x03\x90\xFD[\x80\x94PPPPP\x92\x91PPV[_\x80a\x1Cla:\x1AV[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[\x81_a\x1C\xA1a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x1C\xFCW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1C\xF3\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x1D\x05a!\xCDV[\x90P\x80`\t\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x1D\xA5W\x84\x84`@Q\x7F)\xA9\x93\xC1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1D\x9C\x92\x91\x90aQeV[`@Q\x80\x91\x03\x90\xFD[PPPPPV[a\x1D\xB4a6\x93V[_a\x1D\xBDa:\x1AV[\x90P\x81\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1E\x1Fa\x16\tV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F8\xD1k\x8C\xAC\"\xD9\x9F\xC7\xC1$\xB9\xCD\r\xE2\xD3\xFA\x1F\xAE\xF4 \xBF\xE7\x91\xD8\xC3b\xD7e\xE2'\0`@Q`@Q\x80\x91\x03\x90\xA3PPV[a\x1EmaBEV[_a\x1Eva\x16\xCDV[\x90P_a\x1E\x81a!\xCDV[\x90P\x80`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a \xDBW\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x1F\x12\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1F>\x90aQ\xB9V[\x80\x15a\x1F\x89W\x80`\x1F\x10a\x1F`Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1F\x89V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1FlW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta L\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta x\x90aQ\xB9V[\x80\x15a \xC3W\x80`\x1F\x10a \x9AWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a \xC3V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a \xA6W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a\x1E\xE2V[PPPP\x81RPP\x92PPP\x90V[_\x80a \xF4a!\xCDV[\x90P\x80_\x01`\x04\x01T\x91PP\x90V[``_`\x01a!\x11\x84a:AV[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!/Wa!.aEEV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a!aW\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a!\xC2W\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a!\xB7Wa!\xB6aQ\xE9V[[\x04\x94P_\x85\x03a!nW[\x81\x93PPPP\x91\x90PV[_\x7F\x1D\xA8\xA9\xA0e\xA2\xF0\xA8\x95\xC4W\x06^\xDD\xD3\xCFJM\rS@\xAA\xA0\xCAT\xD3\xCD[Jj\xAF\0\x90P\x90V[\x80_\x81\x03a\".W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\"8\x83\x83a;\x92V[\x15\x80\x15a\"LWPa\"J\x83\x83a;\xE1V[\x15[\x15a\"\x8EW\x81`@Q\x7F\x12\xB4\x9E=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\x85\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a\"\xC3Wa\"\xC2aHtV[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UP\x81\x83`\x02\x01T\x03a\"\xE6W_\x83`\x02\x01\x81\x90UP[\x81\x83`\x04\x01T\x03a\"\xFBW_\x83`\x04\x01\x81\x90UP[PPPV[\x80_\x81\x03a#:W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a#D\x83\x83a<0V[a#\x85W\x81`@Q\x7F3\x14\x86\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a#|\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x04\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a#\xBAWa#\xB9aHtV[[\x02\x17\x90UP\x81\x83`\x04\x01\x81\x90UP_\x83`\x03\x01\x81\x90UPPPPV[\x80_\x81\x03a$\x10W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a$\x1A\x83\x83a;\xE1V[a$[W\x81`@Q\x7Fw\xBFXF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a$R\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x05\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a$\x90Wa$\x8FaHtV[[\x02\x17\x90UP_\x83`\x04\x01\x81\x90UPPPPV[\x80_\x81\x03a$\xDDW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a$\xE9\x82\x82a<\x7FV[\x15a%+W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\"\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a%5\x85\x85a<\xCDV[\x15a%wW\x83`@Q\x7F\r\xDD\x14\xCA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%n\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a%\x81\x85\x85a<0V[\x15a%\xC3W\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\xBA\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x06\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a%\xF8Wa%\xF7aHtV[[\x02\x17\x90UP\x83\x85`\x02\x01T\x03a&\x12W_\x85`\x02\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a&'W_\x85`\x04\x01\x81\x90UP[PPPPPV[\x80_\x81\x03a&hW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a&t\x82\x82a<\x7FV[\x15a&\xB6W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a&\xAD\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a&\xC0\x85\x85a<0V[\x15a'\x02W\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a&\xF9\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x07\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a'7Wa'6aHtV[[\x02\x17\x90UP\x83\x85`\x01\x01T\x03a'QW_\x85`\x01\x01\x81\x90UP[\x83\x85`\x02\x01T\x03a'fW_\x85`\x02\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a'{W_\x85`\x04\x01\x81\x90UP[PPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a(/WP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a(\x16a=\x1CV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a(fW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a(\xC5W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a(\xE9\x91\x90aMQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a)XW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a)O\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a)\xC3WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a)\xC0\x91\x90aR@V[`\x01[a*\x04W\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a)\xFB\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a*jW\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a*a\x91\x90aF\xDBV[`@Q\x80\x91\x03\x90\xFD[a*t\x83\x83a=oV[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a*\xFEW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a+\ta+$V[_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[a+Sa=\xE1V[a+\\\x81a>!V[PV[a+gaBEV[_\x83\x83\x90P\x03a+\xA3W`@Q\x7F\x8A\xF0\x82\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a+\xACa!\xCDV[\x90P\x80`\x07\x01_\x81T\x80\x92\x91\x90a+\xC2\x90aRkV[\x91\x90PUP_\x81`\x07\x01T\x90P\x80\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x01\x81\x90UP\x86\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x01\x01\x81\x90UP\x85\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x02\x01\x81\x90UP_[\x85\x85\x90P\x81\x10\x15a3XW_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a,VWa,UaR\xB2V[[\x90P` \x02\x81\x01\x90a,h\x91\x90aR\xEBV[` \x01` \x81\x01\x90a,z\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a,\xD6W\x80\x86\x86`@Q\x7F\x9E\xDBxa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a,\xCD\x93\x92\x91\x90aP6V[`@Q\x80\x91\x03\x90\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a-\0Wa,\xFFaR\xB2V[[\x90P` \x02\x81\x01\x90a-\x12\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a-$\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a-\x80W\x80\x86\x86`@Q\x7FJlYt\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a-w\x93\x92\x91\x90aP6V[`@Q\x80\x91\x03\x90\xFD[\x82`\t\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x87\x87\x84\x81\x81\x10a-\xA7Wa-\xA6aR\xB2V[[\x90P` \x02\x81\x01\x90a-\xB9\x91\x90aR\xEBV[` \x01` \x81\x01\x90a-\xCB\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a.\x8FW\x85\x85\x82\x81\x81\x10a.)Wa.(aR\xB2V[[\x90P` \x02\x81\x01\x90a.;\x91\x90aR\xEBV[` \x01` \x81\x01\x90a.M\x91\x90aJ5V[\x81\x87\x87`@Q\x7Fd\xD5'Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a.\x86\x94\x93\x92\x91\x90aS\x12V[`@Q\x80\x91\x03\x90\xFD[\x82`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x87\x87\x84\x81\x81\x10a.\xB6Wa.\xB5aR\xB2V[[\x90P` \x02\x81\x01\x90a.\xC8\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a.\xDA\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a/\x9EW\x85\x85\x82\x81\x81\x10a/8Wa/7aR\xB2V[[\x90P` \x02\x81\x01\x90a/J\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a/\\\x91\x90aJ5V[\x81\x87\x87`@Q\x7F\xC8&\xE1\xA2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/\x95\x94\x93\x92\x91\x90aS\x12V[`@Q\x80\x91\x03\x90\xFD[\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x03\x01\x86\x86\x83\x81\x81\x10a/\xC7Wa/\xC6aR\xB2V[[\x90P` \x02\x81\x01\x90a/\xD9\x91\x90aR\xEBV[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x90`\x04\x02\x01_\x90\x91\x90\x91\x90\x91P\x81\x81a0\x0B\x91\x90aW\x80V[PP\x85\x85\x82\x81\x81\x10a0 Wa0\x1FaR\xB2V[[\x90P` \x02\x81\x01\x90a02\x91\x90aR\xEBV[\x83`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a0YWa0XaR\xB2V[[\x90P` \x02\x81\x01\x90a0k\x91\x90aR\xEBV[` \x01` \x81\x01\x90a0}\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x81a0\xC2\x91\x90aW\x80V[\x90PP`\x01\x83`\t\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a0\xEEWa0\xEDaR\xB2V[[\x90P` \x02\x81\x01\x90a1\0\x91\x90aR\xEBV[` \x01` \x81\x01\x90a1\x12\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\n\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a1\x87Wa1\x86aR\xB2V[[\x90P` \x02\x81\x01\x90a1\x99\x91\x90aR\xEBV[` \x01` \x81\x01\x90a1\xAB\x91\x90aJ5V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x83`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a21Wa20aR\xB2V[[\x90P` \x02\x81\x01\x90a2C\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a2U\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\x0C\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a2\xCAWa2\xC9aR\xB2V[[\x90P` \x02\x81\x01\x90a2\xDC\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a2\xEE\x91\x90aJ5V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa,!V[P\x81`\x06\x01_\x82\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a5\xB1W\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta3\xE8\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta4\x14\x90aQ\xB9V[\x80\x15a4_W\x80`\x1F\x10a46Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a4_V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a4BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta5\"\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta5N\x90aQ\xB9V[\x80\x15a5\x99W\x80`\x1F\x10a5pWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a5\x99V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a5|W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a3\xB8V[PPPP\x81RPP\x92PPP\x94\x93PPPPV[\x80_\x81\x03a5\xFFW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83`\x03\x01T\x14a6KW\x82`\x03\x01T`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a6B\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a6\x80Wa6\x7FaHtV[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UPPPPV[a6\x9Ba7WV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a6\xB9a\x16\tV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a7\x18Wa6\xDCa7WV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a7\x0F\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[V[_a7#a:\x1AV[\x90P\x80_\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90Ua7S\x82a>\xA5V[PPV[_3\x90P\x90V[\x80_\x81\x03a7\x98W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a7\xA2\x83\x83a<\x7FV[a7\xE3W\x81`@Q\x7FfS\xF6\xD7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a7\xDA\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x02\x01T\x14a8/W\x82`\x02\x01T`@Q\x7F\xC4p\xC0\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a8&\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x04\x01T\x14a8{W\x82`\x04\x01T`@Q\x7Fp\"\xECA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a8r\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a8\xB0Wa8\xAFaHtV[[\x02\x17\x90UP\x81\x83`\x01\x01\x81\x90UPPPPV[\x80_\x81\x03a8\xFDW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a9\x07\x83\x83a<\xCDV[a9HW\x81`@Q\x7F\xC0\xB5\xEEf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a9?\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x02\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a9}Wa9|aHtV[[\x02\x17\x90UP\x81\x83`\x02\x01\x81\x90UP_\x83`\x01\x01\x81\x90UPPPPV[_\x80a9\xA3a!\xCDV[\x90P\x80_\x01`\x03\x01T\x91PP\x90V[_\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x92\x91PPV[_\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0\x90P\x90V[_\x80a:\x0Ba!\xCDV[\x90P\x80_\x01`\x02\x01T\x91PP\x90V[_\x7F#~\x15\x82\"\xE3\xE6\x96\x8Br\xB9\xDB\r\x80C\xAA\xCF\x07J\xD9\xF6P\xF0\xD1`kM\x82\xEEC,\0\x90P\x90V[_\x80_\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a:\x9DWz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a:\x93Wa:\x92aQ\xE9V[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a:\xDAWm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a:\xD0Wa:\xCFaQ\xE9V[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a;\tWf#\x86\xF2o\xC1\0\0\x83\x81a:\xFFWa:\xFEaQ\xE9V[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a;2Wc\x05\xF5\xE1\0\x83\x81a;(Wa;'aQ\xE9V[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a;WWa'\x10\x83\x81a;MWa;LaQ\xE9V[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a;zW`d\x83\x81a;pWa;oaQ\xE9V[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a;\x89W`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[_`\x02`\x07\x81\x11\x15a;\xA7Wa;\xA6aHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a;\xD8Wa;\xD7aHtV[[\x14\x90P\x92\x91PPV[_`\x04`\x07\x81\x11\x15a;\xF6Wa;\xF5aHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a<'Wa<&aHtV[[\x14\x90P\x92\x91PPV[_`\x03`\x07\x81\x11\x15a<EWa<DaHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a<vWa<uaHtV[[\x14\x90P\x92\x91PPV[_\x80`\x07\x81\x11\x15a<\x93Wa<\x92aHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a<\xC4Wa<\xC3aHtV[[\x14\x90P\x92\x91PPV[_`\x01`\x07\x81\x11\x15a<\xE2Wa<\xE1aHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a=\x13Wa=\x12aHtV[[\x14\x90P\x92\x91PPV[_a=H\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba?vV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a=x\x82a?\x7FV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a=\xD4Wa=\xCE\x82\x82a@HV[Pa=\xDDV[a=\xDCa@\xC8V[[PPV[a=\xE9aA\x04V[a>\x1FW`@Q\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a>)a=\xE1V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a>\x99W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a>\x90\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[a>\xA2\x81a7\x1AV[PV[_a>\xAEa9\xDAV[\x90P_\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x82\x82_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPPV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a?\xDAW\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a?\xD1\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[\x80a@\x06\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba?vV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa@q\x91\x90aW\xD2V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a@\xA9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a@\xAEV[``\x91P[P\x91P\x91Pa@\xBE\x85\x83\x83aA\"V[\x92PPP\x92\x91PPV[_4\x11\x15aA\x02W`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_aA\ra+$V[_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x90V[``\x82aA7WaA2\x82aA\xAFV[aA\xA7V[_\x82Q\x14\x80\x15aA]WP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15aA\x9FW\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01aA\x96\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[\x81\x90PaA\xA8V[[\x93\x92PPPV[_\x81Q\x11\x15aA\xC1W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80`\x80\x01`@R\x80``\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01``\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80_\x81R` \x01_\x81R` \x01_\x81R` \x01``\x81RP\x90V[_\x81\x90P\x91\x90PV[aB|\x81aBjV[\x82RPPV[_` \x82\x01\x90PaB\x95_\x83\x01\x84aBsV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15aB\xD2W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90PaB\xB7V[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_aB\xF7\x82aB\x9BV[aC\x01\x81\x85aB\xA5V[\x93PaC\x11\x81\x85` \x86\x01aB\xB5V[aC\x1A\x81aB\xDDV[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaC=\x81\x84aB\xEDV[\x90P\x92\x91PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[aC_\x81aBjV[\x81\x14aCiW_\x80\xFD[PV[_\x815\x90PaCz\x81aCVV[\x92\x91PPV[_` \x82\x84\x03\x12\x15aC\x95WaC\x94aCNV[[_aC\xA2\x84\x82\x85\x01aClV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_aC\xFD\x82aC\xD4V[\x90P\x91\x90PV[aD\r\x81aC\xF3V[\x82RPPV[_aD\x1E\x83\x83aD\x04V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aD@\x82aC\xABV[aDJ\x81\x85aC\xB5V[\x93PaDU\x83aC\xC5V[\x80_[\x83\x81\x10\x15aD\x85W\x81QaDl\x88\x82aD\x13V[\x97PaDw\x83aD*V[\x92PP`\x01\x81\x01\x90PaDXV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaD\xAA\x81\x84aD6V[\x90P\x92\x91PPV[`\x08\x81\x10aD\xBEW_\x80\xFD[PV[_\x815\x90PaD\xCF\x81aD\xB2V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aD\xEBWaD\xEAaCNV[[_aD\xF8\x85\x82\x86\x01aClV[\x92PP` aE\t\x85\x82\x86\x01aD\xC1V[\x91PP\x92P\x92\x90PV[aE\x1C\x81aC\xF3V[\x81\x14aE&W_\x80\xFD[PV[_\x815\x90PaE7\x81aE\x13V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[aE{\x82aB\xDDV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15aE\x9AWaE\x99aEEV[[\x80`@RPPPV[_aE\xACaCEV[\x90PaE\xB8\x82\x82aErV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aE\xD7WaE\xD6aEEV[[aE\xE0\x82aB\xDDV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_aF\raF\x08\x84aE\xBDV[aE\xA3V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15aF)WaF(aEAV[[aF4\x84\x82\x85aE\xEDV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12aFPWaFOaE=V[[\x815aF`\x84\x82` \x86\x01aE\xFBV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aF\x7FWaF~aCNV[[_aF\x8C\x85\x82\x86\x01aE)V[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aF\xADWaF\xACaCRV[[aF\xB9\x85\x82\x86\x01aF<V[\x91PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[aF\xD5\x81aF\xC3V[\x82RPPV[_` \x82\x01\x90PaF\xEE_\x83\x01\x84aF\xCCV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[aG\x08\x81aF\xF4V[\x82RPPV[_` \x82\x01\x90PaG!_\x83\x01\x84aF\xFFV[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12aGDWaGCaE=V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aGaWaG`aG'V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15aG}WaG|aG+V[[\x92P\x92\x90PV[_\x80_`@\x84\x86\x03\x12\x15aG\x9BWaG\x9AaCNV[[_aG\xA8\x86\x82\x87\x01aClV[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aG\xC9WaG\xC8aCRV[[aG\xD5\x86\x82\x87\x01aG/V[\x92P\x92PP\x92P\x92P\x92V[_\x80\xFD[_`@\x82\x84\x03\x12\x15aG\xFAWaG\xF9aG\xE1V[[\x81\x90P\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15aH\x1BWaH\x1AaCNV[[_aH(\x87\x82\x88\x01aClV[\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aHIWaHHaCRV[[aHU\x87\x82\x88\x01aG/V[\x93P\x93PP`@aHh\x87\x82\x88\x01aG\xE5V[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`!`\x04R`$_\xFD[`\x08\x81\x10aH\xB2WaH\xB1aHtV[[PV[_\x81\x90PaH\xC2\x82aH\xA1V[\x91\x90PV[_aH\xD1\x82aH\xB5V[\x90P\x91\x90PV[aH\xE1\x81aH\xC7V[\x82RPPV[_` \x82\x01\x90PaH\xFA_\x83\x01\x84aH\xD8V[\x92\x91PPV[aI\t\x81aC\xF3V[\x82RPPV[_` \x82\x01\x90PaI\"_\x83\x01\x84aI\0V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aI>WaI=aCNV[[_aIK\x85\x82\x86\x01aClV[\x92PP` aI\\\x85\x82\x86\x01aE)V[\x91PP\x92P\x92\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aI\x80\x82aB\x9BV[aI\x8A\x81\x85aIfV[\x93PaI\x9A\x81\x85` \x86\x01aB\xB5V[aI\xA3\x81aB\xDDV[\x84\x01\x91PP\x92\x91PPV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaI\xC8\x82\x82aIvV[\x91PP` \x83\x01QaI\xDD` \x86\x01\x82aD\x04V[P`@\x83\x01QaI\xF0`@\x86\x01\x82aD\x04V[P``\x83\x01Q\x84\x82\x03``\x86\x01RaJ\x08\x82\x82aIvV[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaJ-\x81\x84aI\xAEV[\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15aJJWaJIaCNV[[_aJW\x84\x82\x85\x01aE)V[\x91PP\x92\x91PPV[aJi\x81aBjV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaJ\xB2\x82\x82aIvV[\x91PP` \x83\x01QaJ\xC7` \x86\x01\x82aD\x04V[P`@\x83\x01QaJ\xDA`@\x86\x01\x82aD\x04V[P``\x83\x01Q\x84\x82\x03``\x86\x01RaJ\xF2\x82\x82aIvV[\x91PP\x80\x91PP\x92\x91PPV[_aK\n\x83\x83aJ\x98V[\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aK(\x82aJoV[aK2\x81\x85aJyV[\x93P\x83` \x82\x02\x85\x01aKD\x85aJ\x89V[\x80_[\x85\x81\x10\x15aK\x7FW\x84\x84\x03\x89R\x81QaK`\x85\x82aJ\xFFV[\x94PaKk\x83aK\x12V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaKGV[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[_`\x80\x83\x01_\x83\x01QaK\xA6_\x86\x01\x82aJ`V[P` \x83\x01QaK\xB9` \x86\x01\x82aJ`V[P`@\x83\x01QaK\xCC`@\x86\x01\x82aJ`V[P``\x83\x01Q\x84\x82\x03``\x86\x01RaK\xE4\x82\x82aK\x1EV[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaL\t\x81\x84aK\x91V[\x90P\x92\x91PPV[_\x81\x90P\x92\x91PPV[_aL%\x82aB\x9BV[aL/\x81\x85aL\x11V[\x93PaL?\x81\x85` \x86\x01aB\xB5V[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aL\x7F`\x02\x83aL\x11V[\x91PaL\x8A\x82aLKV[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aL\xC9`\x01\x83aL\x11V[\x91PaL\xD4\x82aL\x95V[`\x01\x82\x01\x90P\x91\x90PV[_aL\xEA\x82\x87aL\x1BV[\x91PaL\xF5\x82aLsV[\x91PaM\x01\x82\x86aL\x1BV[\x91PaM\x0C\x82aL\xBDV[\x91PaM\x18\x82\x85aL\x1BV[\x91PaM#\x82aL\xBDV[\x91PaM/\x82\x84aL\x1BV[\x91P\x81\x90P\x95\x94PPPPPV[_\x81Q\x90PaMK\x81aE\x13V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aMfWaMeaCNV[[_aMs\x84\x82\x85\x01aM=V[\x91PP\x92\x91PPV[_`@\x82\x01\x90PaM\x8F_\x83\x01\x85aBsV[aM\x9C` \x83\x01\x84aBsV[\x93\x92PPPV[_`@\x82\x01\x90PaM\xB6_\x83\x01\x85aBsV[aM\xC3` \x83\x01\x84aH\xD8V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_aN\x01\x82aBjV[\x91PaN\x0C\x83aBjV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15aN$WaN#aM\xCAV[[\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aNkWaNjaNKV[[\x83\x81\x01\x92P\x825\x91P` \x83\x01\x92Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aN\x93WaN\x92aNCV[[`\x01\x82\x026\x03\x83\x13\x15aN\xA9WaN\xA8aNGV[[P\x92P\x92\x90PV[_aN\xBC\x83\x85aIfV[\x93PaN\xC9\x83\x85\x84aE\xEDV[aN\xD2\x83aB\xDDV[\x84\x01\x90P\x93\x92PPPV[_aN\xEB` \x84\x01\x84aE)V[\x90P\x92\x91PPV[_`\x80\x83\x01aO\x04_\x84\x01\x84aNOV[\x85\x83\x03_\x87\x01RaO\x16\x83\x82\x84aN\xB1V[\x92PPPaO'` \x84\x01\x84aN\xDDV[aO4` \x86\x01\x82aD\x04V[PaOB`@\x84\x01\x84aN\xDDV[aOO`@\x86\x01\x82aD\x04V[PaO]``\x84\x01\x84aNOV[\x85\x83\x03``\x87\x01RaOp\x83\x82\x84aN\xB1V[\x92PPP\x80\x91PP\x92\x91PPV[_aO\x89\x83\x83aN\xF3V[\x90P\x92\x91PPV[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aO\xACWaO\xABaNKV[[\x82\x81\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aO\xCF\x83\x85aN*V[\x93P\x83` \x84\x02\x85\x01aO\xE1\x84aN:V[\x80_[\x87\x81\x10\x15aP$W\x84\x84\x03\x89RaO\xFB\x82\x84aO\x91V[aP\x05\x85\x82aO~V[\x94PaP\x10\x83aO\xB8V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaO\xE4V[P\x82\x97P\x87\x94PPPPP\x93\x92PPPV[_`@\x82\x01\x90PaPI_\x83\x01\x86aBsV[\x81\x81\x03` \x83\x01RaP\\\x81\x84\x86aO\xC4V[\x90P\x94\x93PPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[aP\x82\x81aPfV[\x82RPPV[_` \x82\x01\x90PaP\x9B_\x83\x01\x84aPyV[\x92\x91PPV[_aP\xAF` \x84\x01\x84aClV[\x90P\x92\x91PPV[`@\x82\x01aP\xC7_\x83\x01\x83aP\xA1V[aP\xD3_\x85\x01\x82aJ`V[PaP\xE1` \x83\x01\x83aP\xA1V[aP\xEE` \x85\x01\x82aJ`V[PPPPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01RaQ\x0C\x81\x86aK\x91V[\x90P\x81\x81\x03` \x83\x01RaQ \x81\x85aK\x91V[\x90PaQ/`@\x83\x01\x84aP\xB7V[\x94\x93PPPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01RaQO\x81\x85aK\x91V[\x90PaQ^` \x83\x01\x84aBsV[\x93\x92PPPV[_`@\x82\x01\x90PaQx_\x83\x01\x85aBsV[aQ\x85` \x83\x01\x84aI\0V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80aQ\xD0W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03aQ\xE3WaQ\xE2aQ\x8CV[[P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[aR\x1F\x81aF\xC3V[\x81\x14aR)W_\x80\xFD[PV[_\x81Q\x90PaR:\x81aR\x16V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aRUWaRTaCNV[[_aRb\x84\x82\x85\x01aR,V[\x91PP\x92\x91PPV[_aRu\x82aBjV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03aR\xA7WaR\xA6aM\xCAV[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aS\x06WaS\x05aR\xDFV[[\x80\x83\x01\x91PP\x92\x91PPV[_``\x82\x01\x90PaS%_\x83\x01\x87aI\0V[aS2` \x83\x01\x86aBsV[\x81\x81\x03`@\x83\x01RaSE\x81\x84\x86aO\xC4V[\x90P\x95\x94PPPPPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aSlWaSkaR\xDFV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aS\x8EWaS\x8DaR\xE3V[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15aS\xAAWaS\xA9aR\xE7V[[P\x92P\x92\x90PV[_\x82\x90P\x92\x91PPV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[_` `\x1F\x83\x01\x04\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_`\x08\x83\x02aT\x18\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82aS\xDDV[aT\"\x86\x83aS\xDDV[\x95P\x80\x19\x84\x16\x93P\x80\x86\x16\x84\x17\x92PPP\x93\x92PPPV[_\x81\x90P\x91\x90PV[_aT]aTXaTS\x84aBjV[aT:V[aBjV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aTv\x83aTCV[aT\x8AaT\x82\x82aTdV[\x84\x84TaS\xE9V[\x82UPPPPV[_\x90V[aT\x9EaT\x92V[aT\xA9\x81\x84\x84aTmV[PPPV[[\x81\x81\x10\x15aT\xCCWaT\xC1_\x82aT\x96V[`\x01\x81\x01\x90PaT\xAFV[PPV[`\x1F\x82\x11\x15aU\x11WaT\xE2\x81aS\xBCV[aT\xEB\x84aS\xCEV[\x81\x01` \x85\x10\x15aT\xFAW\x81\x90P[aU\x0EaU\x06\x85aS\xCEV[\x83\x01\x82aT\xAEV[PP[PPPV[_\x82\x82\x1C\x90P\x92\x91PPV[_aU1_\x19\x84`\x08\x02aU\x16V[\x19\x80\x83\x16\x91PP\x92\x91PPV[_aUI\x83\x83aU\"V[\x91P\x82`\x02\x02\x82\x17\x90P\x92\x91PPV[aUc\x83\x83aS\xB2V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aU|WaU{aEEV[[aU\x86\x82TaQ\xB9V[aU\x91\x82\x82\x85aT\xD0V[_`\x1F\x83\x11`\x01\x81\x14aU\xBEW_\x84\x15aU\xACW\x82\x87\x015\x90P[aU\xB6\x85\x82aU>V[\x86UPaV\x1DV[`\x1F\x19\x84\x16aU\xCC\x86aS\xBCV[_[\x82\x81\x10\x15aU\xF3W\x84\x89\x015\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90PaU\xCEV[\x86\x83\x10\x15aV\x10W\x84\x89\x015aV\x0C`\x1F\x89\x16\x82aU\"V[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPPV[aV1\x83\x83\x83aUYV[PPPV[_\x815aVB\x81aE\x13V[\x80\x91PP\x91\x90PV[_\x81_\x1B\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaVu\x84aVKV[\x93P\x80\x19\x83\x16\x92P\x80\x84\x16\x83\x17\x91PP\x92\x91PPV[_aV\xA5aV\xA0aV\x9B\x84aC\xD4V[aT:V[aC\xD4V[\x90P\x91\x90PV[_aV\xB6\x82aV\x8BV[\x90P\x91\x90PV[_aV\xC7\x82aV\xACV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aV\xE0\x82aV\xBDV[aV\xF3aV\xEC\x82aV\xCEV[\x83TaVVV[\x82UPPPV[_\x81\x01_\x83\x01aW\n\x81\x85aSPV[aW\x15\x81\x83\x86aV&V[PPPP`\x01\x81\x01` \x83\x01\x80aW+\x81aV6V[\x90PaW7\x81\x84aV\xD7V[PPP`\x02\x81\x01`@\x83\x01\x80aWL\x81aV6V[\x90PaWX\x81\x84aV\xD7V[PPP`\x03\x81\x01``\x83\x01aWm\x81\x85aSPV[aWx\x81\x83\x86aV&V[PPPPPPV[aW\x8A\x82\x82aV\xFAV[PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_aW\xAC\x82aW\x8EV[aW\xB6\x81\x85aW\x98V[\x93PaW\xC6\x81\x85` \x86\x01aB\xB5V[\x80\x84\x01\x91PP\x92\x91PPV[_aW\xDD\x82\x84aW\xA2V[\x91P\x81\x90P\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106101b6575f3560e01c806386dfc7de116100eb578063ad3cb1cc11610089578063e30c397811610063578063e30c3978146105e6578063f192cf6814610610578063f2fde38b14610638578063fed9716b14610660576101b6565b8063ad3cb1cc14610556578063be91187b14610580578063d1841dd3146105aa576101b6565b806390218748116100c5578063902187481461048c578063991dc36d146104c85780639efb484e146104f2578063a94a02ad1461051a576101b6565b806386dfc7de146103fe578063888b99e0146104265780638da5cb5b14610462576101b6565b806360b2546511610158578063703c3b2e11610132578063703c3b2e14610382578063715018a6146103aa57806379ba5097146103c057806384cae187146103d6576101b6565b806360b25465146102ce5780636b3174e51461030a5780636ba818e114610346576101b6565b80633112a555116101945780633112a5551461024a5780633a5162e6146102725780634f1ef2861461028857806352d1902d146102a4576101b6565b8063086e4e1c146101ba5780630d8e6e2c146101e457806318b7214d1461020e575b5f80fd5b3480156101c5575f80fd5b506101ce61068a565b6040516101db9190614282565b60405180910390f35b3480156101ef575f80fd5b506101f86106d6565b6040516102059190614325565b60405180910390f35b348015610219575f80fd5b50610234600480360381019061022f9190614380565b610751565b6040516102419190614492565b60405180910390f35b348015610255575f80fd5b50610270600480360381019061026b91906144d5565b6107fb565b005b34801561027d575f80fd5b50610286610bea565b005b6102a2600480360381019061029d9190614669565b610d73565b005b3480156102af575f80fd5b506102b8610d92565b6040516102c591906146db565b60405180910390f35b3480156102d9575f80fd5b506102f460048036038101906102ef9190614380565b610dc3565b604051610301919061470e565b60405180910390f35b348015610315575f80fd5b50610330600480360381019061032b9190614380565b610e4d565b60405161033d9190614492565b60405180910390f35b348015610351575f80fd5b5061036c60048036038101906103679190614380565b610ef7565b6040516103799190614282565b60405180910390f35b34801561038d575f80fd5b506103a860048036038101906103a39190614784565b610f98565b005b3480156103b5575f80fd5b506103be611181565b005b3480156103cb575f80fd5b506103d4611194565b005b3480156103e1575f80fd5b506103fc60048036038101906103f79190614803565b611222565b005b348015610409575f80fd5b50610424600480360381019061041f9190614380565b611422565b005b348015610431575f80fd5b5061044c60048036038101906104479190614380565b6115e9565b60405161045991906148e7565b60405180910390f35b34801561046d575f80fd5b50610476611609565b604051610483919061490f565b60405180910390f35b348015610497575f80fd5b506104b260048036038101906104ad9190614380565b61163e565b6040516104bf9190614282565b60405180910390f35b3480156104d3575f80fd5b506104dc6116cd565b6040516104e99190614282565b60405180910390f35b3480156104fd575f80fd5b5061051860048036038101906105139190614928565b611719565b005b348015610525575f80fd5b50610540600480360381019061053b9190614380565b61182e565b60405161054d9190614282565b60405180910390f35b348015610561575f80fd5b5061056a6118bd565b6040516105779190614325565b60405180910390f35b34801561058b575f80fd5b506105946118f6565b6040516105a19190614282565b60405180910390f35b3480156105b5575f80fd5b506105d060048036038101906105cb9190614928565b611942565b6040516105dd9190614a15565b60405180910390f35b3480156105f1575f80fd5b506105fa611c62565b604051610607919061490f565b60405180910390f35b34801561061b575f80fd5b5061063660048036038101906106319190614928565b611c97565b005b348015610643575f80fd5b5061065e60048036038101906106599190614a35565b611dac565b005b34801561066b575f80fd5b50610674611e65565b6040516106819190614bf1565b60405180910390f35b5f806106946120ea565b90505f81036106cf576040517f21fb08f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b60606040518060400160405280601381526020017f436f70726f636573736f72436f6e7465787473000000000000000000000000008152506107175f612103565b6107216001612103565b61072a5f612103565b60405160200161073d9493929190614cdf565b604051602081830303815290604052905090565b60605f61075c6121cd565b905080600a015f8481526020019081526020015f208054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107a5575b5050505050915050919050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610858573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061087c9190614d51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108eb57336040517f0e56cf3d0000000000000000000000000000000000000000000000000000000081526004016108e2919061490f565b60405180910390fd5b815f6108f56121cd565b90505f816006015f8481526020019081526020015f205f01540361095057816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016109479190614282565b60405180910390fd5b5f6109596121cd565b90506003600781111561096f5761096e614874565b5b84600781111561098257610981614874565b5b036109cf57610993815f01866121f4565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71856040516109c29190614282565b60405180910390a1610be3565b600460078111156109e3576109e2614874565b5b8460078111156109f6576109f5614874565b5b03610a4557610a07815f0186612300565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc8542604051610a38929190614d7c565b60405180910390a1610be2565b60056007811115610a5957610a58614874565b5b846007811115610a6c57610a6b614874565b5b03610ab957610a7d815f01866123d6565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a5289885604051610aac9190614282565b60405180910390a1610be1565b60066007811115610acd57610acc614874565b5b846007811115610ae057610adf614874565b5b03610b2d57610af1815f01866124a3565b7fee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf2185604051610b209190614282565b60405180910390a1610be0565b600780811115610b4057610b3f614874565b5b846007811115610b5357610b52614874565b5b03610ba057610b64815f018661262e565b7ff20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be585604051610b939190614282565b60405180910390a1610bdf565b84846040517ff0bed68f000000000000000000000000000000000000000000000000000000008152600401610bd6929190614da3565b60405180910390fd5b5b5b5b5b5050505050565b5f610bf36121cd565b90505f815f016002015490505f8114158015610c22575081600d015f8281526020019081526020015f20544210155b15610cf7575f610c306116cd565b90505f83600f015f8381526020019081526020015f205442610c529190614df7565b90508084600e015f8481526020019081526020015f2081905550610c78845f0183612300565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc8282604051610ca9929190614d7c565b60405180910390a1610cbd845f01846121f4565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be7183604051610cec9190614282565b60405180910390a150505b5f610d006120ea565b90505f8114158015610d25575082600e015f8281526020019081526020015f20544210155b15610d6e57610d36835f01826123d6565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a5289881604051610d659190614282565b60405180910390a15b505050565b610d7b612782565b610d8482612868565b610d8e828261295b565b5050565b5f610d9b612a79565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f815f610dce6121cd565b90505f816006015f8481526020019081526020015f205f015403610e2957816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610e209190614282565b60405180910390fd5b610e316116cd565b841480610e445750610e416120ea565b84145b92505050919050565b60605f610e586121cd565b905080600c015f8481526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015610eea57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ea1575b5050505050915050919050565b5f815f610f026121cd565b90505f816006015f8481526020019081526020015f205f015403610f5d57816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610f549190614282565b60405180910390fd5b5f610f666121cd565b905060018082600a015f8881526020019081526020015f2080549050901c610f8e9190614df7565b9350505050919050565b6001610fa2612b00565b67ffffffffffffffff1614610fe3576040517f6f4f731f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f610fee612b24565b9050805f0160089054906101000a900460ff168061103657508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b1561106d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff0219169083151502179055506110c26110bd611609565b612b4b565b5f6110cf5f878787612b5f565b90505f6110da6121cd565b90506110eb815f01835f01516135c5565b7f13c5fd631ca031552fe9e38d911910a5980f6608eea323696e04db0fec0c955787878760405161111e93929190615036565b60405180910390a150505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2826040516111729190615088565b60405180910390a15050505050565b611189613693565b6111925f61371a565b565b5f61119d613757565b90508073ffffffffffffffffffffffffffffffffffffffff166111be611c62565b73ffffffffffffffffffffffffffffffffffffffff161461121657806040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161120d919061490f565b60405180910390fd5b61121f8161371a565b50565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561127f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112a39190614d51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461131257336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401611309919061490f565b60405180910390fd5b5f61131b6121cd565b90505f611326611e65565b90505f611338825f0151888888612b5f565b90507faf58a18a4e4159fa706c0d4e0fdab0930f97679319cddbc9c9199b0cd104b6ef82828660405161136d939291906150f4565b60405180910390a1611384835f01825f015161375e565b611393835f01825f01516138c3565b5f845f0135426113a39190614df7565b90508084600d015f845f015181526020019081526020015f2081905550846020013584600f015f855f015181526020019081526020015f20819055507f2b0188fc4bed471ee216dc6cb9650beb288892034ebee7301b32391add2a66b88282604051611410929190615137565b60405180910390a15050505050505050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561147f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114a39190614d51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461151257336040517f0e56cf3d000000000000000000000000000000000000000000000000000000008152600401611509919061490f565b60405180910390fd5b5f61151b61068a565b90505f611526613999565b90505f6115316121cd565b905061153f815f0183612300565b5f844261154c9190614df7565b90508082600e015f8581526020019081526020015f20819055507f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc8382604051611597929190614d7c565b60405180910390a16115ab825f01856121f4565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71846040516115da9190614282565b60405180910390a15050505050565b5f806115f36121cd565b9050611601815f01846139b2565b915050919050565b5f806116136139da565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b5f815f6116496121cd565b90505f816006015f8481526020019081526020015f205f0154036116a457816040517fabf9e7b000000000000000000000000000000000000000000000000000000000815260040161169b9190614282565b60405180910390fd5b5f6116ad6121cd565b905080600e015f8681526020019081526020015f20549350505050919050565b5f806116d7613999565b90505f8103611712576040517f046593ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b815f6117236121cd565b90505f816006015f8481526020019081526020015f205f01540361177e57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016117759190614282565b60405180910390fd5b5f6117876121cd565b905080600b015f8681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166118275784846040517f554f8c5f00000000000000000000000000000000000000000000000000000000815260040161181e929190615165565b60405180910390fd5b5050505050565b5f815f6118396121cd565b90505f816006015f8481526020019081526020015f205f01540361189457816040517fabf9e7b000000000000000000000000000000000000000000000000000000000815260040161188b9190614282565b60405180910390fd5b5f61189d6121cd565b905080600d015f8681526020019081526020015f20549350505050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f80611900613a01565b90505f810361193b576040517fb9e861b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b61194a6141f3565b825f6119546121cd565b90505f816006015f8481526020019081526020015f205f0154036119af57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016119a69190614282565b60405180910390fd5b5f6119b86121cd565b90505f816008015f8881526020019081526020015f205f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f82018054611a23906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4f906151b9565b8015611a9a5780601f10611a7157610100808354040283529160200191611a9a565b820191905f5260205f20905b815481529060010190602001808311611a7d57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054611b5d906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054611b89906151b9565b8015611bd45780601f10611bab57610100808354040283529160200191611bd4565b820191905f5260205f20905b815481529060010190602001808311611bb757829003601f168201915b50505050508152505090505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603611c555786866040517fc312e73e000000000000000000000000000000000000000000000000000000008152600401611c4c929190615165565b60405180910390fd5b8094505050505092915050565b5f80611c6c613a1a565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b815f611ca16121cd565b90505f816006015f8481526020019081526020015f205f015403611cfc57816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401611cf39190614282565b60405180910390fd5b5f611d056121cd565b9050806009015f8681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611da55784846040517f29a993c1000000000000000000000000000000000000000000000000000000008152600401611d9c929190615165565b60405180910390fd5b5050505050565b611db4613693565b5f611dbd613a1a565b905081815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16611e1f611609565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b611e6d614245565b5f611e766116cd565b90505f611e816121cd565b9050806006015f8381526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020015f905b828210156120db578382905f5260205f2090600402016040518060800160405290815f82018054611f12906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3e906151b9565b8015611f895780601f10611f6057610100808354040283529160200191611f89565b820191905f5260205f20905b815481529060010190602001808311611f6c57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461204c906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054612078906151b9565b80156120c35780601f1061209a576101008083540402835291602001916120c3565b820191905f5260205f20905b8154815290600101906020018083116120a657829003601f168201915b50505050508152505081526020019060010190611ee2565b50505050815250509250505090565b5f806120f46121cd565b9050805f016004015491505090565b60605f600161211184613a41565b0190505f8167ffffffffffffffff81111561212f5761212e614545565b5b6040519080825280601f01601f1916602001820160405280156121615781602001600182028036833780820191505090505b5090505f82602001820190505b6001156121c2578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816121b7576121b66151e9565b5b0494505f850361216e575b819350505050919050565b5f7f1da8a9a065a2f0a895c457065eddd3cf4a4d0d5340aaa0ca54d3cd5b4a6aaf00905090565b805f810361222e576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6122388383613b92565b15801561224c575061224a8383613be1565b155b1561228e57816040517f12b49e3d0000000000000000000000000000000000000000000000000000000081526004016122859190614282565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156122c3576122c2614874565b5b0217905550818360030181905550818360020154036122e6575f83600201819055505b818360040154036122fb575f83600401819055505b505050565b805f810361233a576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6123448383613c30565b61238557816040517f331486b300000000000000000000000000000000000000000000000000000000815260040161237c9190614282565b60405180910390fd5b6004835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156123ba576123b9614874565b5b02179055508183600401819055505f8360030181905550505050565b805f8103612410576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61241a8383613be1565b61245b57816040517f77bf58460000000000000000000000000000000000000000000000000000000081526004016124529190614282565b60405180910390fd5b6005835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156124905761248f614874565b5b02179055505f8360040181905550505050565b805f81036124dd576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826124e98282613c7f565b1561252b57806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016125229190614282565b60405180910390fd5b6125358585613ccd565b1561257757836040517f0ddd14ca00000000000000000000000000000000000000000000000000000000815260040161256e9190614282565b60405180910390fd5b6125818585613c30565b156125c357836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016125ba9190614282565b60405180910390fd5b6006855f015f8681526020019081526020015f205f6101000a81548160ff021916908360078111156125f8576125f7614874565b5b021790555083856002015403612612575f85600201819055505b83856004015403612627575f85600401819055505b5050505050565b805f8103612668576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826126748282613c7f565b156126b657806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016126ad9190614282565b60405180910390fd5b6126c08585613c30565b1561270257836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016126f99190614282565b60405180910390fd5b6007855f015f8681526020019081526020015f205f6101000a81548160ff0219169083600781111561273757612736614874565b5b021790555083856001015403612751575f85600101819055505b83856002015403612766575f85600201819055505b8385600401540361277b575f85600401819055505b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061282f57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612816613d1c565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612866576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128e99190614d51565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461295857336040517f0e56cf3d00000000000000000000000000000000000000000000000000000000815260040161294f919061490f565b60405180910390fd5b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156129c357506040513d601f19601f820116820180604052508101906129c09190615240565b60015b612a0457816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016129fb919061490f565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b8114612a6a57806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401612a6191906146db565b60405180910390fd5b612a748383613d6f565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612afe576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f612b09612b24565b5f015f9054906101000a900467ffffffffffffffff16905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612b53613de1565b612b5c81613e21565b50565b612b67614245565b5f8383905003612ba3576040517f8af082ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f612bac6121cd565b9050806007015f815480929190612bc29061526b565b91905055505f8160070154905080826006015f8381526020019081526020015f205f018190555086826006015f8381526020019081526020015f206001018190555085826006015f8381526020019081526020015f20600201819055505f5b85859050811015613358575f73ffffffffffffffffffffffffffffffffffffffff16868683818110612c5657612c556152b2565b5b9050602002810190612c6891906152eb565b6020016020810190612c7a9190614a35565b73ffffffffffffffffffffffffffffffffffffffff1603612cd6578086866040517f9edb7861000000000000000000000000000000000000000000000000000000008152600401612ccd93929190615036565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff16868683818110612d0057612cff6152b2565b5b9050602002810190612d1291906152eb565b6040016020810190612d249190614a35565b73ffffffffffffffffffffffffffffffffffffffff1603612d80578086866040517f4a6c5974000000000000000000000000000000000000000000000000000000008152600401612d7793929190615036565b60405180910390fd5b826009015f8381526020019081526020015f205f878784818110612da757612da66152b2565b5b9050602002810190612db991906152eb565b6020016020810190612dcb9190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612e8f57858582818110612e2957612e286152b2565b5b9050602002810190612e3b91906152eb565b6020016020810190612e4d9190614a35565b8187876040517f64d52759000000000000000000000000000000000000000000000000000000008152600401612e869493929190615312565b60405180910390fd5b82600b015f8381526020019081526020015f205f878784818110612eb657612eb56152b2565b5b9050602002810190612ec891906152eb565b6040016020810190612eda9190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612f9e57858582818110612f3857612f376152b2565b5b9050602002810190612f4a91906152eb565b6040016020810190612f5c9190614a35565b8187876040517fc826e1a2000000000000000000000000000000000000000000000000000000008152600401612f959493929190615312565b60405180910390fd5b826006015f8381526020019081526020015f20600301868683818110612fc757612fc66152b2565b5b9050602002810190612fd991906152eb565b908060018154018082558091505060019003905f5260205f2090600402015f90919091909150818161300b9190615780565b50508585828181106130205761301f6152b2565b5b905060200281019061303291906152eb565b836008015f8481526020019081526020015f205f888885818110613059576130586152b2565b5b905060200281019061306b91906152eb565b602001602081019061307d9190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081816130c29190615780565b9050506001836009015f8481526020019081526020015f205f8888858181106130ee576130ed6152b2565b5b905060200281019061310091906152eb565b60200160208101906131129190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600a015f8381526020019081526020015f20868683818110613187576131866152b2565b5b905060200281019061319991906152eb565b60200160208101906131ab9190614a35565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183600b015f8481526020019081526020015f205f888885818110613231576132306152b2565b5b905060200281019061324391906152eb565b60400160208101906132559190614a35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600c015f8381526020019081526020015f208686838181106132ca576132c96152b2565b5b90506020028101906132dc91906152eb565b60400160208101906132ee9190614a35565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050612c21565b50816006015f8281526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020015f905b828210156135b1578382905f5260205f2090600402016040518060800160405290815f820180546133e8906151b9565b80601f0160208091040260200160405190810160405280929190818152602001828054613414906151b9565b801561345f5780601f106134365761010080835404028352916020019161345f565b820191905f5260205f20905b81548152906001019060200180831161344257829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054613522906151b9565b80601f016020809104026020016040519081016040528092919081815260200182805461354e906151b9565b80156135995780601f1061357057610100808354040283529160200191613599565b820191905f5260205f20905b81548152906001019060200180831161357c57829003601f168201915b505050505081525050815260200190600101906133b8565b505050508152505092505050949350505050565b805f81036135ff576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83600301541461364b5782600301546040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016136429190614282565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156136805761367f614874565b5b0217905550818360030181905550505050565b61369b613757565b73ffffffffffffffffffffffffffffffffffffffff166136b9611609565b73ffffffffffffffffffffffffffffffffffffffff1614613718576136dc613757565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161370f919061490f565b60405180910390fd5b565b5f613723613a1a565b9050805f015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561375382613ea5565b5050565b5f33905090565b805f8103613798576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6137a28383613c7f565b6137e357816040517f6653f6d70000000000000000000000000000000000000000000000000000000081526004016137da9190614282565b60405180910390fd5b5f83600201541461382f5782600201546040517fc470c0220000000000000000000000000000000000000000000000000000000081526004016138269190614282565b60405180910390fd5b5f83600401541461387b5782600401546040517f7022ec410000000000000000000000000000000000000000000000000000000081526004016138729190614282565b60405180910390fd5b6001835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156138b0576138af614874565b5b0217905550818360010181905550505050565b805f81036138fd576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6139078383613ccd565b61394857816040517fc0b5ee6600000000000000000000000000000000000000000000000000000000815260040161393f9190614282565b60405180910390fd5b6002835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561397d5761397c614874565b5b02179055508183600201819055505f8360010181905550505050565b5f806139a36121cd565b9050805f016003015491505090565b5f825f015f8381526020019081526020015f205f9054906101000a900460ff16905092915050565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f80613a0b6121cd565b9050805f016002015491505090565b5f7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00905090565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613a9d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381613a9357613a926151e9565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613ada576d04ee2d6d415b85acef81000000008381613ad057613acf6151e9565b5b0492506020810190505b662386f26fc100008310613b0957662386f26fc100008381613aff57613afe6151e9565b5b0492506010810190505b6305f5e1008310613b32576305f5e1008381613b2857613b276151e9565b5b0492506008810190505b6127108310613b57576127108381613b4d57613b4c6151e9565b5b0492506004810190505b60648310613b7a5760648381613b7057613b6f6151e9565b5b0492506002810190505b600a8310613b89576001810190505b80915050919050565b5f60026007811115613ba757613ba6614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613bd857613bd7614874565b5b14905092915050565b5f60046007811115613bf657613bf5614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613c2757613c26614874565b5b14905092915050565b5f60036007811115613c4557613c44614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613c7657613c75614874565b5b14905092915050565b5f806007811115613c9357613c92614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613cc457613cc3614874565b5b14905092915050565b5f60016007811115613ce257613ce1614874565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613d1357613d12614874565b5b14905092915050565b5f613d487f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613f76565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b613d7882613f7f565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f81511115613dd457613dce8282614048565b50613ddd565b613ddc6140c8565b5b5050565b613de9614104565b613e1f576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613e29613de1565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613e99575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401613e90919061490f565b60405180910390fd5b613ea28161371a565b50565b5f613eae6139da565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b03613fda57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401613fd1919061490f565b60405180910390fd5b806140067f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613f76565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff168460405161407191906157d2565b5f60405180830381855af49150503d805f81146140a9576040519150601f19603f3d011682016040523d82523d5f602084013e6140ae565b606091505b50915091506140be858383614122565b9250505092915050565b5f341115614102576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f61410d612b24565b5f0160089054906101000a900460ff16905090565b60608261413757614132826141af565b6141a7565b5f825114801561415d57505f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561419f57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401614196919061490f565b60405180910390fd5b8190506141a8565b5b9392505050565b5f815111156141c15780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60405180608001604052805f81526020015f81526020015f8152602001606081525090565b5f819050919050565b61427c8161426a565b82525050565b5f6020820190506142955f830184614273565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156142d25780820151818401526020810190506142b7565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6142f78261429b565b61430181856142a5565b93506143118185602086016142b5565b61431a816142dd565b840191505092915050565b5f6020820190508181035f83015261433d81846142ed565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b61435f8161426a565b8114614369575f80fd5b50565b5f8135905061437a81614356565b92915050565b5f602082840312156143955761439461434e565b5b5f6143a28482850161436c565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6143fd826143d4565b9050919050565b61440d816143f3565b82525050565b5f61441e8383614404565b60208301905092915050565b5f602082019050919050565b5f614440826143ab565b61444a81856143b5565b9350614455836143c5565b805f5b8381101561448557815161446c8882614413565b97506144778361442a565b925050600181019050614458565b5085935050505092915050565b5f6020820190508181035f8301526144aa8184614436565b905092915050565b600881106144be575f80fd5b50565b5f813590506144cf816144b2565b92915050565b5f80604083850312156144eb576144ea61434e565b5b5f6144f88582860161436c565b9250506020614509858286016144c1565b9150509250929050565b61451c816143f3565b8114614526575f80fd5b50565b5f8135905061453781614513565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61457b826142dd565b810181811067ffffffffffffffff8211171561459a57614599614545565b5b80604052505050565b5f6145ac614345565b90506145b88282614572565b919050565b5f67ffffffffffffffff8211156145d7576145d6614545565b5b6145e0826142dd565b9050602081019050919050565b828183375f83830152505050565b5f61460d614608846145bd565b6145a3565b90508281526020810184848401111561462957614628614541565b5b6146348482856145ed565b509392505050565b5f82601f8301126146505761464f61453d565b5b81356146608482602086016145fb565b91505092915050565b5f806040838503121561467f5761467e61434e565b5b5f61468c85828601614529565b925050602083013567ffffffffffffffff8111156146ad576146ac614352565b5b6146b98582860161463c565b9150509250929050565b5f819050919050565b6146d5816146c3565b82525050565b5f6020820190506146ee5f8301846146cc565b92915050565b5f8115159050919050565b614708816146f4565b82525050565b5f6020820190506147215f8301846146ff565b92915050565b5f80fd5b5f80fd5b5f8083601f8401126147445761474361453d565b5b8235905067ffffffffffffffff81111561476157614760614727565b5b60208301915083602082028301111561477d5761477c61472b565b5b9250929050565b5f805f6040848603121561479b5761479a61434e565b5b5f6147a88682870161436c565b935050602084013567ffffffffffffffff8111156147c9576147c8614352565b5b6147d58682870161472f565b92509250509250925092565b5f80fd5b5f604082840312156147fa576147f96147e1565b5b81905092915050565b5f805f806080858703121561481b5761481a61434e565b5b5f6148288782880161436c565b945050602085013567ffffffffffffffff81111561484957614848614352565b5b6148558782880161472f565b93509350506040614868878288016147e5565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600881106148b2576148b1614874565b5b50565b5f8190506148c2826148a1565b919050565b5f6148d1826148b5565b9050919050565b6148e1816148c7565b82525050565b5f6020820190506148fa5f8301846148d8565b92915050565b614909816143f3565b82525050565b5f6020820190506149225f830184614900565b92915050565b5f806040838503121561493e5761493d61434e565b5b5f61494b8582860161436c565b925050602061495c85828601614529565b9150509250929050565b5f82825260208201905092915050565b5f6149808261429b565b61498a8185614966565b935061499a8185602086016142b5565b6149a3816142dd565b840191505092915050565b5f608083015f8301518482035f8601526149c88282614976565b91505060208301516149dd6020860182614404565b5060408301516149f06040860182614404565b5060608301518482036060860152614a088282614976565b9150508091505092915050565b5f6020820190508181035f830152614a2d81846149ae565b905092915050565b5f60208284031215614a4a57614a4961434e565b5b5f614a5784828501614529565b91505092915050565b614a698161426a565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f860152614ab28282614976565b9150506020830151614ac76020860182614404565b506040830151614ada6040860182614404565b5060608301518482036060860152614af28282614976565b9150508091505092915050565b5f614b0a8383614a98565b905092915050565b5f602082019050919050565b5f614b2882614a6f565b614b328185614a79565b935083602082028501614b4485614a89565b805f5b85811015614b7f5784840389528151614b608582614aff565b9450614b6b83614b12565b925060208a01995050600181019050614b47565b50829750879550505050505092915050565b5f608083015f830151614ba65f860182614a60565b506020830151614bb96020860182614a60565b506040830151614bcc6040860182614a60565b5060608301518482036060860152614be48282614b1e565b9150508091505092915050565b5f6020820190508181035f830152614c098184614b91565b905092915050565b5f81905092915050565b5f614c258261429b565b614c2f8185614c11565b9350614c3f8185602086016142b5565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f614c7f600283614c11565b9150614c8a82614c4b565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614cc9600183614c11565b9150614cd482614c95565b600182019050919050565b5f614cea8287614c1b565b9150614cf582614c73565b9150614d018286614c1b565b9150614d0c82614cbd565b9150614d188285614c1b565b9150614d2382614cbd565b9150614d2f8284614c1b565b915081905095945050505050565b5f81519050614d4b81614513565b92915050565b5f60208284031215614d6657614d6561434e565b5b5f614d7384828501614d3d565b91505092915050565b5f604082019050614d8f5f830185614273565b614d9c6020830184614273565b9392505050565b5f604082019050614db65f830185614273565b614dc360208301846148d8565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f614e018261426a565b9150614e0c8361426a565b9250828201905080821115614e2457614e23614dca565b5b92915050565b5f82825260208201905092915050565b5f819050919050565b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112614e6b57614e6a614e4b565b5b83810192508235915060208301925067ffffffffffffffff821115614e9357614e92614e43565b5b600182023603831315614ea957614ea8614e47565b5b509250929050565b5f614ebc8385614966565b9350614ec98385846145ed565b614ed2836142dd565b840190509392505050565b5f614eeb6020840184614529565b905092915050565b5f60808301614f045f840184614e4f565b8583035f870152614f16838284614eb1565b92505050614f276020840184614edd565b614f346020860182614404565b50614f426040840184614edd565b614f4f6040860182614404565b50614f5d6060840184614e4f565b8583036060870152614f70838284614eb1565b925050508091505092915050565b5f614f898383614ef3565b905092915050565b5f82356001608003833603038112614fac57614fab614e4b565b5b82810191505092915050565b5f602082019050919050565b5f614fcf8385614e2a565b935083602084028501614fe184614e3a565b805f5b87811015615024578484038952614ffb8284614f91565b6150058582614f7e565b945061501083614fb8565b925060208a01995050600181019050614fe4565b50829750879450505050509392505050565b5f6040820190506150495f830186614273565b818103602083015261505c818486614fc4565b9050949350505050565b5f67ffffffffffffffff82169050919050565b61508281615066565b82525050565b5f60208201905061509b5f830184615079565b92915050565b5f6150af602084018461436c565b905092915050565b604082016150c75f8301836150a1565b6150d35f850182614a60565b506150e160208301836150a1565b6150ee6020850182614a60565b50505050565b5f6080820190508181035f83015261510c8186614b91565b905081810360208301526151208185614b91565b905061512f60408301846150b7565b949350505050565b5f6040820190508181035f83015261514f8185614b91565b905061515e6020830184614273565b9392505050565b5f6040820190506151785f830185614273565b6151856020830184614900565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806151d057607f821691505b6020821081036151e3576151e261518c565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b61521f816146c3565b8114615229575f80fd5b50565b5f8151905061523a81615216565b92915050565b5f602082840312156152555761525461434e565b5b5f6152628482850161522c565b91505092915050565b5f6152758261426a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036152a7576152a6614dca565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f82356001608003833603038112615306576153056152df565b5b80830191505092915050565b5f6060820190506153255f830187614900565b6153326020830186614273565b8181036040830152615345818486614fc4565b905095945050505050565b5f808335600160200384360303811261536c5761536b6152df565b5b80840192508235915067ffffffffffffffff82111561538e5761538d6152e3565b5b6020830192506001820236038313156153aa576153a96152e7565b5b509250929050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026154187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826153dd565b61542286836153dd565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61545d6154586154538461426a565b61543a565b61426a565b9050919050565b5f819050919050565b61547683615443565b61548a61548282615464565b8484546153e9565b825550505050565b5f90565b61549e615492565b6154a981848461546d565b505050565b5b818110156154cc576154c15f82615496565b6001810190506154af565b5050565b601f821115615511576154e2816153bc565b6154eb846153ce565b810160208510156154fa578190505b61550e615506856153ce565b8301826154ae565b50505b505050565b5f82821c905092915050565b5f6155315f1984600802615516565b1980831691505092915050565b5f6155498383615522565b9150826002028217905092915050565b61556383836153b2565b67ffffffffffffffff81111561557c5761557b614545565b5b61558682546151b9565b6155918282856154d0565b5f601f8311600181146155be575f84156155ac578287013590505b6155b6858261553e565b86555061561d565b601f1984166155cc866153bc565b5f5b828110156155f3578489013582556001820191506020850194506020810190506155ce565b86831015615610578489013561560c601f891682615522565b8355505b6001600288020188555050505b50505050505050565b615631838383615559565b505050565b5f813561564281614513565b80915050919050565b5f815f1b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff6156758461564b565b9350801983169250808416831791505092915050565b5f6156a56156a061569b846143d4565b61543a565b6143d4565b9050919050565b5f6156b68261568b565b9050919050565b5f6156c7826156ac565b9050919050565b5f819050919050565b6156e0826156bd565b6156f36156ec826156ce565b8354615656565b8255505050565b5f81015f830161570a8185615350565b615715818386615626565b5050505060018101602083018061572b81615636565b905061573781846156d7565b50505060028101604083018061574c81615636565b905061575881846156d7565b505050600381016060830161576d8185615350565b615778818386615626565b505050505050565b61578a82826156fa565b5050565b5f81519050919050565b5f81905092915050565b5f6157ac8261578e565b6157b68185615798565b93506157c68185602086016142b5565b80840191505092915050565b5f6157dd82846157a2565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01\xB6W_5`\xE0\x1C\x80c\x86\xDF\xC7\xDE\x11a\0\xEBW\x80c\xAD<\xB1\xCC\x11a\0\x89W\x80c\xE3\x0C9x\x11a\0cW\x80c\xE3\x0C9x\x14a\x05\xE6W\x80c\xF1\x92\xCFh\x14a\x06\x10W\x80c\xF2\xFD\xE3\x8B\x14a\x068W\x80c\xFE\xD9qk\x14a\x06`Wa\x01\xB6V[\x80c\xAD<\xB1\xCC\x14a\x05VW\x80c\xBE\x91\x18{\x14a\x05\x80W\x80c\xD1\x84\x1D\xD3\x14a\x05\xAAWa\x01\xB6V[\x80c\x90!\x87H\x11a\0\xC5W\x80c\x90!\x87H\x14a\x04\x8CW\x80c\x99\x1D\xC3m\x14a\x04\xC8W\x80c\x9E\xFBHN\x14a\x04\xF2W\x80c\xA9J\x02\xAD\x14a\x05\x1AWa\x01\xB6V[\x80c\x86\xDF\xC7\xDE\x14a\x03\xFEW\x80c\x88\x8B\x99\xE0\x14a\x04&W\x80c\x8D\xA5\xCB[\x14a\x04bWa\x01\xB6V[\x80c`\xB2Te\x11a\x01XW\x80cp<;.\x11a\x012W\x80cp<;.\x14a\x03\x82W\x80cqP\x18\xA6\x14a\x03\xAAW\x80cy\xBAP\x97\x14a\x03\xC0W\x80c\x84\xCA\xE1\x87\x14a\x03\xD6Wa\x01\xB6V[\x80c`\xB2Te\x14a\x02\xCEW\x80ck1t\xE5\x14a\x03\nW\x80ck\xA8\x18\xE1\x14a\x03FWa\x01\xB6V[\x80c1\x12\xA5U\x11a\x01\x94W\x80c1\x12\xA5U\x14a\x02JW\x80c:Qb\xE6\x14a\x02rW\x80cO\x1E\xF2\x86\x14a\x02\x88W\x80cR\xD1\x90-\x14a\x02\xA4Wa\x01\xB6V[\x80c\x08nN\x1C\x14a\x01\xBAW\x80c\r\x8En,\x14a\x01\xE4W\x80c\x18\xB7!M\x14a\x02\x0EW[_\x80\xFD[4\x80\x15a\x01\xC5W_\x80\xFD[Pa\x01\xCEa\x06\x8AV[`@Qa\x01\xDB\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xEFW_\x80\xFD[Pa\x01\xF8a\x06\xD6V[`@Qa\x02\x05\x91\x90aC%V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x19W_\x80\xFD[Pa\x024`\x04\x806\x03\x81\x01\x90a\x02/\x91\x90aC\x80V[a\x07QV[`@Qa\x02A\x91\x90aD\x92V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02UW_\x80\xFD[Pa\x02p`\x04\x806\x03\x81\x01\x90a\x02k\x91\x90aD\xD5V[a\x07\xFBV[\0[4\x80\x15a\x02}W_\x80\xFD[Pa\x02\x86a\x0B\xEAV[\0[a\x02\xA2`\x04\x806\x03\x81\x01\x90a\x02\x9D\x91\x90aFiV[a\rsV[\0[4\x80\x15a\x02\xAFW_\x80\xFD[Pa\x02\xB8a\r\x92V[`@Qa\x02\xC5\x91\x90aF\xDBV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xD9W_\x80\xFD[Pa\x02\xF4`\x04\x806\x03\x81\x01\x90a\x02\xEF\x91\x90aC\x80V[a\r\xC3V[`@Qa\x03\x01\x91\x90aG\x0EV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x15W_\x80\xFD[Pa\x030`\x04\x806\x03\x81\x01\x90a\x03+\x91\x90aC\x80V[a\x0EMV[`@Qa\x03=\x91\x90aD\x92V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03QW_\x80\xFD[Pa\x03l`\x04\x806\x03\x81\x01\x90a\x03g\x91\x90aC\x80V[a\x0E\xF7V[`@Qa\x03y\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x8DW_\x80\xFD[Pa\x03\xA8`\x04\x806\x03\x81\x01\x90a\x03\xA3\x91\x90aG\x84V[a\x0F\x98V[\0[4\x80\x15a\x03\xB5W_\x80\xFD[Pa\x03\xBEa\x11\x81V[\0[4\x80\x15a\x03\xCBW_\x80\xFD[Pa\x03\xD4a\x11\x94V[\0[4\x80\x15a\x03\xE1W_\x80\xFD[Pa\x03\xFC`\x04\x806\x03\x81\x01\x90a\x03\xF7\x91\x90aH\x03V[a\x12\"V[\0[4\x80\x15a\x04\tW_\x80\xFD[Pa\x04$`\x04\x806\x03\x81\x01\x90a\x04\x1F\x91\x90aC\x80V[a\x14\"V[\0[4\x80\x15a\x041W_\x80\xFD[Pa\x04L`\x04\x806\x03\x81\x01\x90a\x04G\x91\x90aC\x80V[a\x15\xE9V[`@Qa\x04Y\x91\x90aH\xE7V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04mW_\x80\xFD[Pa\x04va\x16\tV[`@Qa\x04\x83\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\x97W_\x80\xFD[Pa\x04\xB2`\x04\x806\x03\x81\x01\x90a\x04\xAD\x91\x90aC\x80V[a\x16>V[`@Qa\x04\xBF\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xD3W_\x80\xFD[Pa\x04\xDCa\x16\xCDV[`@Qa\x04\xE9\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xFDW_\x80\xFD[Pa\x05\x18`\x04\x806\x03\x81\x01\x90a\x05\x13\x91\x90aI(V[a\x17\x19V[\0[4\x80\x15a\x05%W_\x80\xFD[Pa\x05@`\x04\x806\x03\x81\x01\x90a\x05;\x91\x90aC\x80V[a\x18.V[`@Qa\x05M\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05aW_\x80\xFD[Pa\x05ja\x18\xBDV[`@Qa\x05w\x91\x90aC%V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\x8BW_\x80\xFD[Pa\x05\x94a\x18\xF6V[`@Qa\x05\xA1\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xB5W_\x80\xFD[Pa\x05\xD0`\x04\x806\x03\x81\x01\x90a\x05\xCB\x91\x90aI(V[a\x19BV[`@Qa\x05\xDD\x91\x90aJ\x15V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xF1W_\x80\xFD[Pa\x05\xFAa\x1CbV[`@Qa\x06\x07\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06\x1BW_\x80\xFD[Pa\x066`\x04\x806\x03\x81\x01\x90a\x061\x91\x90aI(V[a\x1C\x97V[\0[4\x80\x15a\x06CW_\x80\xFD[Pa\x06^`\x04\x806\x03\x81\x01\x90a\x06Y\x91\x90aJ5V[a\x1D\xACV[\0[4\x80\x15a\x06kW_\x80\xFD[Pa\x06ta\x1EeV[`@Qa\x06\x81\x91\x90aK\xF1V[`@Q\x80\x91\x03\x90\xF3[_\x80a\x06\x94a \xEAV[\x90P_\x81\x03a\x06\xCFW`@Q\x7F!\xFB\x08\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[```@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FCoprocessorContexts\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x07\x17_a!\x03V[a\x07!`\x01a!\x03V[a\x07*_a!\x03V[`@Q` \x01a\x07=\x94\x93\x92\x91\x90aL\xDFV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[``_a\x07\\a!\xCDV[\x90P\x80`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x07\xEEW` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x07\xA5W[PPPPP\x91PP\x91\x90PV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08XW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08|\x91\x90aMQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x08\xEBW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\xE2\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[\x81_a\x08\xF5a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\tPW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\tG\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\tYa!\xCDV[\x90P`\x03`\x07\x81\x11\x15a\toWa\tnaHtV[[\x84`\x07\x81\x11\x15a\t\x82Wa\t\x81aHtV[[\x03a\t\xCFWa\t\x93\x81_\x01\x86a!\xF4V[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x85`@Qa\t\xC2\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1a\x0B\xE3V[`\x04`\x07\x81\x11\x15a\t\xE3Wa\t\xE2aHtV[[\x84`\x07\x81\x11\x15a\t\xF6Wa\t\xF5aHtV[[\x03a\nEWa\n\x07\x81_\x01\x86a#\0V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x85B`@Qa\n8\x92\x91\x90aM|V[`@Q\x80\x91\x03\x90\xA1a\x0B\xE2V[`\x05`\x07\x81\x11\x15a\nYWa\nXaHtV[[\x84`\x07\x81\x11\x15a\nlWa\nkaHtV[[\x03a\n\xB9Wa\n}\x81_\x01\x86a#\xD6V[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x85`@Qa\n\xAC\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1a\x0B\xE1V[`\x06`\x07\x81\x11\x15a\n\xCDWa\n\xCCaHtV[[\x84`\x07\x81\x11\x15a\n\xE0Wa\n\xDFaHtV[[\x03a\x0B-Wa\n\xF1\x81_\x01\x86a$\xA3V[\x7F\xEE~\xF89cAq%\xD2t0x\x9F\xC6\xE9A\x948\x1E\x82\xC3\xCD\xA6\x82`\xD0\xE7\xCF\xC3\x1E\xAF!\x85`@Qa\x0B \x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1a\x0B\xE0V[`\x07\x80\x81\x11\x15a\x0B@Wa\x0B?aHtV[[\x84`\x07\x81\x11\x15a\x0BSWa\x0BRaHtV[[\x03a\x0B\xA0Wa\x0Bd\x81_\x01\x86a&.V[\x7F\xF2\x0B)\x98\x04\xC9\xC1\xD6\xDA;\x82ALz\xA0\xA8E\xCD\xBA\xBA\xE2\xD9\x0EF\xE3`\xA3y\xA7{{\xE5\x85`@Qa\x0B\x93\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1a\x0B\xDFV[\x84\x84`@Q\x7F\xF0\xBE\xD6\x8F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\xD6\x92\x91\x90aM\xA3V[`@Q\x80\x91\x03\x90\xFD[[[[[PPPPPV[_a\x0B\xF3a!\xCDV[\x90P_\x81_\x01`\x02\x01T\x90P_\x81\x14\x15\x80\x15a\x0C\"WP\x81`\r\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\x0C\xF7W_a\x0C0a\x16\xCDV[\x90P_\x83`\x0F\x01_\x83\x81R` \x01\x90\x81R` \x01_ TBa\x0CR\x91\x90aM\xF7V[\x90P\x80\x84`\x0E\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UPa\x0Cx\x84_\x01\x83a#\0V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x82\x82`@Qa\x0C\xA9\x92\x91\x90aM|V[`@Q\x80\x91\x03\x90\xA1a\x0C\xBD\x84_\x01\x84a!\xF4V[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x83`@Qa\x0C\xEC\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1PP[_a\r\0a \xEAV[\x90P_\x81\x14\x15\x80\x15a\r%WP\x82`\x0E\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\rnWa\r6\x83_\x01\x82a#\xD6V[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x81`@Qa\re\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1[PPPV[a\r{a'\x82V[a\r\x84\x82a(hV[a\r\x8E\x82\x82a)[V[PPV[_a\r\x9Ba*yV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[_\x81_a\r\xCEa!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x0E)W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0E \x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a\x0E1a\x16\xCDV[\x84\x14\x80a\x0EDWPa\x0EAa \xEAV[\x84\x14[\x92PPP\x91\x90PV[``_a\x0EXa!\xCDV[\x90P\x80`\x0C\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x0E\xEAW` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x0E\xA1W[PPPPP\x91PP\x91\x90PV[_\x81_a\x0F\x02a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x0F]W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0FT\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x0Ffa!\xCDV[\x90P`\x01\x80\x82`\n\x01_\x88\x81R` \x01\x90\x81R` \x01_ \x80T\x90P\x90\x1Ca\x0F\x8E\x91\x90aM\xF7V[\x93PPPP\x91\x90PV[`\x01a\x0F\xA2a+\0V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0F\xE3W`@Q\x7FoOs\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_a\x0F\xEEa+$V[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\x106WP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\x10mW`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\x10\xC2a\x10\xBDa\x16\tV[a+KV[_a\x10\xCF_\x87\x87\x87a+_V[\x90P_a\x10\xDAa!\xCDV[\x90Pa\x10\xEB\x81_\x01\x83_\x01Qa5\xC5V[\x7F\x13\xC5\xFDc\x1C\xA01U/\xE9\xE3\x8D\x91\x19\x10\xA5\x98\x0Ff\x08\xEE\xA3#in\x04\xDB\x0F\xEC\x0C\x95W\x87\x87\x87`@Qa\x11\x1E\x93\x92\x91\x90aP6V[`@Q\x80\x91\x03\x90\xA1PP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x11r\x91\x90aP\x88V[`@Q\x80\x91\x03\x90\xA1PPPPPV[a\x11\x89a6\x93V[a\x11\x92_a7\x1AV[V[_a\x11\x9Da7WV[\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x11\xBEa\x1CbV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x12\x16W\x80`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x12\r\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[a\x12\x1F\x81a7\x1AV[PV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12\x7FW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\xA3\x91\x90aMQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x13\x12W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x13\t\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[_a\x13\x1Ba!\xCDV[\x90P_a\x13&a\x1EeV[\x90P_a\x138\x82_\x01Q\x88\x88\x88a+_V[\x90P\x7F\xAFX\xA1\x8ANAY\xFApl\rN\x0F\xDA\xB0\x93\x0F\x97g\x93\x19\xCD\xDB\xC9\xC9\x19\x9B\x0C\xD1\x04\xB6\xEF\x82\x82\x86`@Qa\x13m\x93\x92\x91\x90aP\xF4V[`@Q\x80\x91\x03\x90\xA1a\x13\x84\x83_\x01\x82_\x01Qa7^V[a\x13\x93\x83_\x01\x82_\x01Qa8\xC3V[_\x84_\x015Ba\x13\xA3\x91\x90aM\xF7V[\x90P\x80\x84`\r\x01_\x84_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x84` \x015\x84`\x0F\x01_\x85_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F+\x01\x88\xFCK\xEDG\x1E\xE2\x16\xDCl\xB9e\x0B\xEB(\x88\x92\x03N\xBE\xE70\x1B29\x1A\xDD*f\xB8\x82\x82`@Qa\x14\x10\x92\x91\x90aQ7V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x14\x7FW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x14\xA3\x91\x90aMQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x15\x12W3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x15\t\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[_a\x15\x1Ba\x06\x8AV[\x90P_a\x15&a9\x99V[\x90P_a\x151a!\xCDV[\x90Pa\x15?\x81_\x01\x83a#\0V[_\x84Ba\x15L\x91\x90aM\xF7V[\x90P\x80\x82`\x0E\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x83\x82`@Qa\x15\x97\x92\x91\x90aM|V[`@Q\x80\x91\x03\x90\xA1a\x15\xAB\x82_\x01\x85a!\xF4V[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x84`@Qa\x15\xDA\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xA1PPPPPV[_\x80a\x15\xF3a!\xCDV[\x90Pa\x16\x01\x81_\x01\x84a9\xB2V[\x91PP\x91\x90PV[_\x80a\x16\x13a9\xDAV[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[_\x81_a\x16Ia!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x16\xA4W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\x9B\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x16\xADa!\xCDV[\x90P\x80`\x0E\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[_\x80a\x16\xD7a9\x99V[\x90P_\x81\x03a\x17\x12W`@Q\x7F\x04e\x93\xEA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[\x81_a\x17#a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x17~W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17u\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x17\x87a!\xCDV[\x90P\x80`\x0B\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x18'W\x84\x84`@Q\x7FUO\x8C_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x18\x1E\x92\x91\x90aQeV[`@Q\x80\x91\x03\x90\xFD[PPPPPV[_\x81_a\x189a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x18\x94W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x18\x8B\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x18\x9Da!\xCDV[\x90P\x80`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[_\x80a\x19\0a:\x01V[\x90P_\x81\x03a\x19;W`@Q\x7F\xB9\xE8a\xB2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[a\x19JaA\xF3V[\x82_a\x19Ta!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x19\xAFW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x19\xA6\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x19\xB8a!\xCDV[\x90P_\x81`\x08\x01_\x88\x81R` \x01\x90\x81R` \x01_ _\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x1A#\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1AO\x90aQ\xB9V[\x80\x15a\x1A\x9AW\x80`\x1F\x10a\x1AqWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1A\x9AV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1A}W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x1B]\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1B\x89\x90aQ\xB9V[\x80\x15a\x1B\xD4W\x80`\x1F\x10a\x1B\xABWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1B\xD4V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1B\xB7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x1CUW\x86\x86`@Q\x7F\xC3\x12\xE7>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1CL\x92\x91\x90aQeV[`@Q\x80\x91\x03\x90\xFD[\x80\x94PPPPP\x92\x91PPV[_\x80a\x1Cla:\x1AV[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[\x81_a\x1C\xA1a!\xCDV[\x90P_\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x1C\xFCW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1C\xF3\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_a\x1D\x05a!\xCDV[\x90P\x80`\t\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x1D\xA5W\x84\x84`@Q\x7F)\xA9\x93\xC1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1D\x9C\x92\x91\x90aQeV[`@Q\x80\x91\x03\x90\xFD[PPPPPV[a\x1D\xB4a6\x93V[_a\x1D\xBDa:\x1AV[\x90P\x81\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1E\x1Fa\x16\tV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F8\xD1k\x8C\xAC\"\xD9\x9F\xC7\xC1$\xB9\xCD\r\xE2\xD3\xFA\x1F\xAE\xF4 \xBF\xE7\x91\xD8\xC3b\xD7e\xE2'\0`@Q`@Q\x80\x91\x03\x90\xA3PPV[a\x1EmaBEV[_a\x1Eva\x16\xCDV[\x90P_a\x1E\x81a!\xCDV[\x90P\x80`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a \xDBW\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x1F\x12\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1F>\x90aQ\xB9V[\x80\x15a\x1F\x89W\x80`\x1F\x10a\x1F`Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1F\x89V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1FlW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta L\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta x\x90aQ\xB9V[\x80\x15a \xC3W\x80`\x1F\x10a \x9AWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a \xC3V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a \xA6W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a\x1E\xE2V[PPPP\x81RPP\x92PPP\x90V[_\x80a \xF4a!\xCDV[\x90P\x80_\x01`\x04\x01T\x91PP\x90V[``_`\x01a!\x11\x84a:AV[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a!/Wa!.aEEV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a!aW\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a!\xC2W\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a!\xB7Wa!\xB6aQ\xE9V[[\x04\x94P_\x85\x03a!nW[\x81\x93PPPP\x91\x90PV[_\x7F\x1D\xA8\xA9\xA0e\xA2\xF0\xA8\x95\xC4W\x06^\xDD\xD3\xCFJM\rS@\xAA\xA0\xCAT\xD3\xCD[Jj\xAF\0\x90P\x90V[\x80_\x81\x03a\".W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\"8\x83\x83a;\x92V[\x15\x80\x15a\"LWPa\"J\x83\x83a;\xE1V[\x15[\x15a\"\x8EW\x81`@Q\x7F\x12\xB4\x9E=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\x85\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a\"\xC3Wa\"\xC2aHtV[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UP\x81\x83`\x02\x01T\x03a\"\xE6W_\x83`\x02\x01\x81\x90UP[\x81\x83`\x04\x01T\x03a\"\xFBW_\x83`\x04\x01\x81\x90UP[PPPV[\x80_\x81\x03a#:W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a#D\x83\x83a<0V[a#\x85W\x81`@Q\x7F3\x14\x86\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a#|\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x04\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a#\xBAWa#\xB9aHtV[[\x02\x17\x90UP\x81\x83`\x04\x01\x81\x90UP_\x83`\x03\x01\x81\x90UPPPPV[\x80_\x81\x03a$\x10W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a$\x1A\x83\x83a;\xE1V[a$[W\x81`@Q\x7Fw\xBFXF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a$R\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x05\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a$\x90Wa$\x8FaHtV[[\x02\x17\x90UP_\x83`\x04\x01\x81\x90UPPPPV[\x80_\x81\x03a$\xDDW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a$\xE9\x82\x82a<\x7FV[\x15a%+W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\"\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a%5\x85\x85a<\xCDV[\x15a%wW\x83`@Q\x7F\r\xDD\x14\xCA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%n\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a%\x81\x85\x85a<0V[\x15a%\xC3W\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\xBA\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x06\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a%\xF8Wa%\xF7aHtV[[\x02\x17\x90UP\x83\x85`\x02\x01T\x03a&\x12W_\x85`\x02\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a&'W_\x85`\x04\x01\x81\x90UP[PPPPPV[\x80_\x81\x03a&hW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a&t\x82\x82a<\x7FV[\x15a&\xB6W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a&\xAD\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a&\xC0\x85\x85a<0V[\x15a'\x02W\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a&\xF9\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x07\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a'7Wa'6aHtV[[\x02\x17\x90UP\x83\x85`\x01\x01T\x03a'QW_\x85`\x01\x01\x81\x90UP[\x83\x85`\x02\x01T\x03a'fW_\x85`\x02\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a'{W_\x85`\x04\x01\x81\x90UP[PPPPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a(/WP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a(\x16a=\x1CV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a(fW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8D\xA5\xCB[`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a(\xC5W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a(\xE9\x91\x90aMQV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a)XW3`@Q\x7F\x0EV\xCF=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a)O\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a)\xC3WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a)\xC0\x91\x90aR@V[`\x01[a*\x04W\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a)\xFB\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a*jW\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a*a\x91\x90aF\xDBV[`@Q\x80\x91\x03\x90\xFD[a*t\x83\x83a=oV[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a*\xFEW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a+\ta+$V[_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[a+Sa=\xE1V[a+\\\x81a>!V[PV[a+gaBEV[_\x83\x83\x90P\x03a+\xA3W`@Q\x7F\x8A\xF0\x82\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a+\xACa!\xCDV[\x90P\x80`\x07\x01_\x81T\x80\x92\x91\x90a+\xC2\x90aRkV[\x91\x90PUP_\x81`\x07\x01T\x90P\x80\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x01\x81\x90UP\x86\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x01\x01\x81\x90UP\x85\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x02\x01\x81\x90UP_[\x85\x85\x90P\x81\x10\x15a3XW_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a,VWa,UaR\xB2V[[\x90P` \x02\x81\x01\x90a,h\x91\x90aR\xEBV[` \x01` \x81\x01\x90a,z\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a,\xD6W\x80\x86\x86`@Q\x7F\x9E\xDBxa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a,\xCD\x93\x92\x91\x90aP6V[`@Q\x80\x91\x03\x90\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a-\0Wa,\xFFaR\xB2V[[\x90P` \x02\x81\x01\x90a-\x12\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a-$\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a-\x80W\x80\x86\x86`@Q\x7FJlYt\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a-w\x93\x92\x91\x90aP6V[`@Q\x80\x91\x03\x90\xFD[\x82`\t\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x87\x87\x84\x81\x81\x10a-\xA7Wa-\xA6aR\xB2V[[\x90P` \x02\x81\x01\x90a-\xB9\x91\x90aR\xEBV[` \x01` \x81\x01\x90a-\xCB\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a.\x8FW\x85\x85\x82\x81\x81\x10a.)Wa.(aR\xB2V[[\x90P` \x02\x81\x01\x90a.;\x91\x90aR\xEBV[` \x01` \x81\x01\x90a.M\x91\x90aJ5V[\x81\x87\x87`@Q\x7Fd\xD5'Y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a.\x86\x94\x93\x92\x91\x90aS\x12V[`@Q\x80\x91\x03\x90\xFD[\x82`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x87\x87\x84\x81\x81\x10a.\xB6Wa.\xB5aR\xB2V[[\x90P` \x02\x81\x01\x90a.\xC8\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a.\xDA\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a/\x9EW\x85\x85\x82\x81\x81\x10a/8Wa/7aR\xB2V[[\x90P` \x02\x81\x01\x90a/J\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a/\\\x91\x90aJ5V[\x81\x87\x87`@Q\x7F\xC8&\xE1\xA2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a/\x95\x94\x93\x92\x91\x90aS\x12V[`@Q\x80\x91\x03\x90\xFD[\x82`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x03\x01\x86\x86\x83\x81\x81\x10a/\xC7Wa/\xC6aR\xB2V[[\x90P` \x02\x81\x01\x90a/\xD9\x91\x90aR\xEBV[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x90`\x04\x02\x01_\x90\x91\x90\x91\x90\x91P\x81\x81a0\x0B\x91\x90aW\x80V[PP\x85\x85\x82\x81\x81\x10a0 Wa0\x1FaR\xB2V[[\x90P` \x02\x81\x01\x90a02\x91\x90aR\xEBV[\x83`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a0YWa0XaR\xB2V[[\x90P` \x02\x81\x01\x90a0k\x91\x90aR\xEBV[` \x01` \x81\x01\x90a0}\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x81a0\xC2\x91\x90aW\x80V[\x90PP`\x01\x83`\t\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a0\xEEWa0\xEDaR\xB2V[[\x90P` \x02\x81\x01\x90a1\0\x91\x90aR\xEBV[` \x01` \x81\x01\x90a1\x12\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\n\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a1\x87Wa1\x86aR\xB2V[[\x90P` \x02\x81\x01\x90a1\x99\x91\x90aR\xEBV[` \x01` \x81\x01\x90a1\xAB\x91\x90aJ5V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x83`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a21Wa20aR\xB2V[[\x90P` \x02\x81\x01\x90a2C\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a2U\x91\x90aJ5V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\x0C\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a2\xCAWa2\xC9aR\xB2V[[\x90P` \x02\x81\x01\x90a2\xDC\x91\x90aR\xEBV[`@\x01` \x81\x01\x90a2\xEE\x91\x90aJ5V[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa,!V[P\x81`\x06\x01_\x82\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a5\xB1W\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta3\xE8\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta4\x14\x90aQ\xB9V[\x80\x15a4_W\x80`\x1F\x10a46Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a4_V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a4BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta5\"\x90aQ\xB9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta5N\x90aQ\xB9V[\x80\x15a5\x99W\x80`\x1F\x10a5pWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a5\x99V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a5|W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a3\xB8V[PPPP\x81RPP\x92PPP\x94\x93PPPPV[\x80_\x81\x03a5\xFFW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x83`\x03\x01T\x14a6KW\x82`\x03\x01T`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a6B\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a6\x80Wa6\x7FaHtV[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UPPPPV[a6\x9Ba7WV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a6\xB9a\x16\tV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a7\x18Wa6\xDCa7WV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a7\x0F\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[V[_a7#a:\x1AV[\x90P\x80_\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90Ua7S\x82a>\xA5V[PPV[_3\x90P\x90V[\x80_\x81\x03a7\x98W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a7\xA2\x83\x83a<\x7FV[a7\xE3W\x81`@Q\x7FfS\xF6\xD7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a7\xDA\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x02\x01T\x14a8/W\x82`\x02\x01T`@Q\x7F\xC4p\xC0\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a8&\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[_\x83`\x04\x01T\x14a8{W\x82`\x04\x01T`@Q\x7Fp\"\xECA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a8r\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a8\xB0Wa8\xAFaHtV[[\x02\x17\x90UP\x81\x83`\x01\x01\x81\x90UPPPPV[\x80_\x81\x03a8\xFDW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a9\x07\x83\x83a<\xCDV[a9HW\x81`@Q\x7F\xC0\xB5\xEEf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a9?\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[`\x02\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a9}Wa9|aHtV[[\x02\x17\x90UP\x81\x83`\x02\x01\x81\x90UP_\x83`\x01\x01\x81\x90UPPPPV[_\x80a9\xA3a!\xCDV[\x90P\x80_\x01`\x03\x01T\x91PP\x90V[_\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x92\x91PPV[_\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0\x90P\x90V[_\x80a:\x0Ba!\xCDV[\x90P\x80_\x01`\x02\x01T\x91PP\x90V[_\x7F#~\x15\x82\"\xE3\xE6\x96\x8Br\xB9\xDB\r\x80C\xAA\xCF\x07J\xD9\xF6P\xF0\xD1`kM\x82\xEEC,\0\x90P\x90V[_\x80_\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a:\x9DWz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a:\x93Wa:\x92aQ\xE9V[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a:\xDAWm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a:\xD0Wa:\xCFaQ\xE9V[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a;\tWf#\x86\xF2o\xC1\0\0\x83\x81a:\xFFWa:\xFEaQ\xE9V[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a;2Wc\x05\xF5\xE1\0\x83\x81a;(Wa;'aQ\xE9V[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a;WWa'\x10\x83\x81a;MWa;LaQ\xE9V[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a;zW`d\x83\x81a;pWa;oaQ\xE9V[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a;\x89W`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[_`\x02`\x07\x81\x11\x15a;\xA7Wa;\xA6aHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a;\xD8Wa;\xD7aHtV[[\x14\x90P\x92\x91PPV[_`\x04`\x07\x81\x11\x15a;\xF6Wa;\xF5aHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a<'Wa<&aHtV[[\x14\x90P\x92\x91PPV[_`\x03`\x07\x81\x11\x15a<EWa<DaHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a<vWa<uaHtV[[\x14\x90P\x92\x91PPV[_\x80`\x07\x81\x11\x15a<\x93Wa<\x92aHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a<\xC4Wa<\xC3aHtV[[\x14\x90P\x92\x91PPV[_`\x01`\x07\x81\x11\x15a<\xE2Wa<\xE1aHtV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a=\x13Wa=\x12aHtV[[\x14\x90P\x92\x91PPV[_a=H\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba?vV[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a=x\x82a?\x7FV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a=\xD4Wa=\xCE\x82\x82a@HV[Pa=\xDDV[a=\xDCa@\xC8V[[PPV[a=\xE9aA\x04V[a>\x1FW`@Q\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a>)a=\xE1V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a>\x99W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a>\x90\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[a>\xA2\x81a7\x1AV[PV[_a>\xAEa9\xDAV[\x90P_\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x82\x82_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPPV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a?\xDAW\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a?\xD1\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[\x80a@\x06\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba?vV[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa@q\x91\x90aW\xD2V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a@\xA9W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a@\xAEV[``\x91P[P\x91P\x91Pa@\xBE\x85\x83\x83aA\"V[\x92PPP\x92\x91PPV[_4\x11\x15aA\x02W`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_aA\ra+$V[_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x90V[``\x82aA7WaA2\x82aA\xAFV[aA\xA7V[_\x82Q\x14\x80\x15aA]WP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15aA\x9FW\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01aA\x96\x91\x90aI\x0FV[`@Q\x80\x91\x03\x90\xFD[\x81\x90PaA\xA8V[[\x93\x92PPPV[_\x81Q\x11\x15aA\xC1W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80`\x80\x01`@R\x80``\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01``\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80_\x81R` \x01_\x81R` \x01_\x81R` \x01``\x81RP\x90V[_\x81\x90P\x91\x90PV[aB|\x81aBjV[\x82RPPV[_` \x82\x01\x90PaB\x95_\x83\x01\x84aBsV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15aB\xD2W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90PaB\xB7V[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_aB\xF7\x82aB\x9BV[aC\x01\x81\x85aB\xA5V[\x93PaC\x11\x81\x85` \x86\x01aB\xB5V[aC\x1A\x81aB\xDDV[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaC=\x81\x84aB\xEDV[\x90P\x92\x91PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[aC_\x81aBjV[\x81\x14aCiW_\x80\xFD[PV[_\x815\x90PaCz\x81aCVV[\x92\x91PPV[_` \x82\x84\x03\x12\x15aC\x95WaC\x94aCNV[[_aC\xA2\x84\x82\x85\x01aClV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_aC\xFD\x82aC\xD4V[\x90P\x91\x90PV[aD\r\x81aC\xF3V[\x82RPPV[_aD\x1E\x83\x83aD\x04V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aD@\x82aC\xABV[aDJ\x81\x85aC\xB5V[\x93PaDU\x83aC\xC5V[\x80_[\x83\x81\x10\x15aD\x85W\x81QaDl\x88\x82aD\x13V[\x97PaDw\x83aD*V[\x92PP`\x01\x81\x01\x90PaDXV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaD\xAA\x81\x84aD6V[\x90P\x92\x91PPV[`\x08\x81\x10aD\xBEW_\x80\xFD[PV[_\x815\x90PaD\xCF\x81aD\xB2V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aD\xEBWaD\xEAaCNV[[_aD\xF8\x85\x82\x86\x01aClV[\x92PP` aE\t\x85\x82\x86\x01aD\xC1V[\x91PP\x92P\x92\x90PV[aE\x1C\x81aC\xF3V[\x81\x14aE&W_\x80\xFD[PV[_\x815\x90PaE7\x81aE\x13V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[aE{\x82aB\xDDV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15aE\x9AWaE\x99aEEV[[\x80`@RPPPV[_aE\xACaCEV[\x90PaE\xB8\x82\x82aErV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aE\xD7WaE\xD6aEEV[[aE\xE0\x82aB\xDDV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_aF\raF\x08\x84aE\xBDV[aE\xA3V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15aF)WaF(aEAV[[aF4\x84\x82\x85aE\xEDV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12aFPWaFOaE=V[[\x815aF`\x84\x82` \x86\x01aE\xFBV[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aF\x7FWaF~aCNV[[_aF\x8C\x85\x82\x86\x01aE)V[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aF\xADWaF\xACaCRV[[aF\xB9\x85\x82\x86\x01aF<V[\x91PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[aF\xD5\x81aF\xC3V[\x82RPPV[_` \x82\x01\x90PaF\xEE_\x83\x01\x84aF\xCCV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[aG\x08\x81aF\xF4V[\x82RPPV[_` \x82\x01\x90PaG!_\x83\x01\x84aF\xFFV[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12aGDWaGCaE=V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aGaWaG`aG'V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15aG}WaG|aG+V[[\x92P\x92\x90PV[_\x80_`@\x84\x86\x03\x12\x15aG\x9BWaG\x9AaCNV[[_aG\xA8\x86\x82\x87\x01aClV[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aG\xC9WaG\xC8aCRV[[aG\xD5\x86\x82\x87\x01aG/V[\x92P\x92PP\x92P\x92P\x92V[_\x80\xFD[_`@\x82\x84\x03\x12\x15aG\xFAWaG\xF9aG\xE1V[[\x81\x90P\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15aH\x1BWaH\x1AaCNV[[_aH(\x87\x82\x88\x01aClV[\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aHIWaHHaCRV[[aHU\x87\x82\x88\x01aG/V[\x93P\x93PP`@aHh\x87\x82\x88\x01aG\xE5V[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`!`\x04R`$_\xFD[`\x08\x81\x10aH\xB2WaH\xB1aHtV[[PV[_\x81\x90PaH\xC2\x82aH\xA1V[\x91\x90PV[_aH\xD1\x82aH\xB5V[\x90P\x91\x90PV[aH\xE1\x81aH\xC7V[\x82RPPV[_` \x82\x01\x90PaH\xFA_\x83\x01\x84aH\xD8V[\x92\x91PPV[aI\t\x81aC\xF3V[\x82RPPV[_` \x82\x01\x90PaI\"_\x83\x01\x84aI\0V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aI>WaI=aCNV[[_aIK\x85\x82\x86\x01aClV[\x92PP` aI\\\x85\x82\x86\x01aE)V[\x91PP\x92P\x92\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aI\x80\x82aB\x9BV[aI\x8A\x81\x85aIfV[\x93PaI\x9A\x81\x85` \x86\x01aB\xB5V[aI\xA3\x81aB\xDDV[\x84\x01\x91PP\x92\x91PPV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaI\xC8\x82\x82aIvV[\x91PP` \x83\x01QaI\xDD` \x86\x01\x82aD\x04V[P`@\x83\x01QaI\xF0`@\x86\x01\x82aD\x04V[P``\x83\x01Q\x84\x82\x03``\x86\x01RaJ\x08\x82\x82aIvV[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaJ-\x81\x84aI\xAEV[\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15aJJWaJIaCNV[[_aJW\x84\x82\x85\x01aE)V[\x91PP\x92\x91PPV[aJi\x81aBjV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaJ\xB2\x82\x82aIvV[\x91PP` \x83\x01QaJ\xC7` \x86\x01\x82aD\x04V[P`@\x83\x01QaJ\xDA`@\x86\x01\x82aD\x04V[P``\x83\x01Q\x84\x82\x03``\x86\x01RaJ\xF2\x82\x82aIvV[\x91PP\x80\x91PP\x92\x91PPV[_aK\n\x83\x83aJ\x98V[\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aK(\x82aJoV[aK2\x81\x85aJyV[\x93P\x83` \x82\x02\x85\x01aKD\x85aJ\x89V[\x80_[\x85\x81\x10\x15aK\x7FW\x84\x84\x03\x89R\x81QaK`\x85\x82aJ\xFFV[\x94PaKk\x83aK\x12V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaKGV[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[_`\x80\x83\x01_\x83\x01QaK\xA6_\x86\x01\x82aJ`V[P` \x83\x01QaK\xB9` \x86\x01\x82aJ`V[P`@\x83\x01QaK\xCC`@\x86\x01\x82aJ`V[P``\x83\x01Q\x84\x82\x03``\x86\x01RaK\xE4\x82\x82aK\x1EV[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaL\t\x81\x84aK\x91V[\x90P\x92\x91PPV[_\x81\x90P\x92\x91PPV[_aL%\x82aB\x9BV[aL/\x81\x85aL\x11V[\x93PaL?\x81\x85` \x86\x01aB\xB5V[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aL\x7F`\x02\x83aL\x11V[\x91PaL\x8A\x82aLKV[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aL\xC9`\x01\x83aL\x11V[\x91PaL\xD4\x82aL\x95V[`\x01\x82\x01\x90P\x91\x90PV[_aL\xEA\x82\x87aL\x1BV[\x91PaL\xF5\x82aLsV[\x91PaM\x01\x82\x86aL\x1BV[\x91PaM\x0C\x82aL\xBDV[\x91PaM\x18\x82\x85aL\x1BV[\x91PaM#\x82aL\xBDV[\x91PaM/\x82\x84aL\x1BV[\x91P\x81\x90P\x95\x94PPPPPV[_\x81Q\x90PaMK\x81aE\x13V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aMfWaMeaCNV[[_aMs\x84\x82\x85\x01aM=V[\x91PP\x92\x91PPV[_`@\x82\x01\x90PaM\x8F_\x83\x01\x85aBsV[aM\x9C` \x83\x01\x84aBsV[\x93\x92PPPV[_`@\x82\x01\x90PaM\xB6_\x83\x01\x85aBsV[aM\xC3` \x83\x01\x84aH\xD8V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_aN\x01\x82aBjV[\x91PaN\x0C\x83aBjV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15aN$WaN#aM\xCAV[[\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aNkWaNjaNKV[[\x83\x81\x01\x92P\x825\x91P` \x83\x01\x92Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aN\x93WaN\x92aNCV[[`\x01\x82\x026\x03\x83\x13\x15aN\xA9WaN\xA8aNGV[[P\x92P\x92\x90PV[_aN\xBC\x83\x85aIfV[\x93PaN\xC9\x83\x85\x84aE\xEDV[aN\xD2\x83aB\xDDV[\x84\x01\x90P\x93\x92PPPV[_aN\xEB` \x84\x01\x84aE)V[\x90P\x92\x91PPV[_`\x80\x83\x01aO\x04_\x84\x01\x84aNOV[\x85\x83\x03_\x87\x01RaO\x16\x83\x82\x84aN\xB1V[\x92PPPaO'` \x84\x01\x84aN\xDDV[aO4` \x86\x01\x82aD\x04V[PaOB`@\x84\x01\x84aN\xDDV[aOO`@\x86\x01\x82aD\x04V[PaO]``\x84\x01\x84aNOV[\x85\x83\x03``\x87\x01RaOp\x83\x82\x84aN\xB1V[\x92PPP\x80\x91PP\x92\x91PPV[_aO\x89\x83\x83aN\xF3V[\x90P\x92\x91PPV[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aO\xACWaO\xABaNKV[[\x82\x81\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aO\xCF\x83\x85aN*V[\x93P\x83` \x84\x02\x85\x01aO\xE1\x84aN:V[\x80_[\x87\x81\x10\x15aP$W\x84\x84\x03\x89RaO\xFB\x82\x84aO\x91V[aP\x05\x85\x82aO~V[\x94PaP\x10\x83aO\xB8V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaO\xE4V[P\x82\x97P\x87\x94PPPPP\x93\x92PPPV[_`@\x82\x01\x90PaPI_\x83\x01\x86aBsV[\x81\x81\x03` \x83\x01RaP\\\x81\x84\x86aO\xC4V[\x90P\x94\x93PPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[aP\x82\x81aPfV[\x82RPPV[_` \x82\x01\x90PaP\x9B_\x83\x01\x84aPyV[\x92\x91PPV[_aP\xAF` \x84\x01\x84aClV[\x90P\x92\x91PPV[`@\x82\x01aP\xC7_\x83\x01\x83aP\xA1V[aP\xD3_\x85\x01\x82aJ`V[PaP\xE1` \x83\x01\x83aP\xA1V[aP\xEE` \x85\x01\x82aJ`V[PPPPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01RaQ\x0C\x81\x86aK\x91V[\x90P\x81\x81\x03` \x83\x01RaQ \x81\x85aK\x91V[\x90PaQ/`@\x83\x01\x84aP\xB7V[\x94\x93PPPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01RaQO\x81\x85aK\x91V[\x90PaQ^` \x83\x01\x84aBsV[\x93\x92PPPV[_`@\x82\x01\x90PaQx_\x83\x01\x85aBsV[aQ\x85` \x83\x01\x84aI\0V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80aQ\xD0W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03aQ\xE3WaQ\xE2aQ\x8CV[[P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[aR\x1F\x81aF\xC3V[\x81\x14aR)W_\x80\xFD[PV[_\x81Q\x90PaR:\x81aR\x16V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aRUWaRTaCNV[[_aRb\x84\x82\x85\x01aR,V[\x91PP\x92\x91PPV[_aRu\x82aBjV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03aR\xA7WaR\xA6aM\xCAV[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aS\x06WaS\x05aR\xDFV[[\x80\x83\x01\x91PP\x92\x91PPV[_``\x82\x01\x90PaS%_\x83\x01\x87aI\0V[aS2` \x83\x01\x86aBsV[\x81\x81\x03`@\x83\x01RaSE\x81\x84\x86aO\xC4V[\x90P\x95\x94PPPPPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aSlWaSkaR\xDFV[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aS\x8EWaS\x8DaR\xE3V[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15aS\xAAWaS\xA9aR\xE7V[[P\x92P\x92\x90PV[_\x82\x90P\x92\x91PPV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[_` `\x1F\x83\x01\x04\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_`\x08\x83\x02aT\x18\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82aS\xDDV[aT\"\x86\x83aS\xDDV[\x95P\x80\x19\x84\x16\x93P\x80\x86\x16\x84\x17\x92PPP\x93\x92PPPV[_\x81\x90P\x91\x90PV[_aT]aTXaTS\x84aBjV[aT:V[aBjV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aTv\x83aTCV[aT\x8AaT\x82\x82aTdV[\x84\x84TaS\xE9V[\x82UPPPPV[_\x90V[aT\x9EaT\x92V[aT\xA9\x81\x84\x84aTmV[PPPV[[\x81\x81\x10\x15aT\xCCWaT\xC1_\x82aT\x96V[`\x01\x81\x01\x90PaT\xAFV[PPV[`\x1F\x82\x11\x15aU\x11WaT\xE2\x81aS\xBCV[aT\xEB\x84aS\xCEV[\x81\x01` \x85\x10\x15aT\xFAW\x81\x90P[aU\x0EaU\x06\x85aS\xCEV[\x83\x01\x82aT\xAEV[PP[PPPV[_\x82\x82\x1C\x90P\x92\x91PPV[_aU1_\x19\x84`\x08\x02aU\x16V[\x19\x80\x83\x16\x91PP\x92\x91PPV[_aUI\x83\x83aU\"V[\x91P\x82`\x02\x02\x82\x17\x90P\x92\x91PPV[aUc\x83\x83aS\xB2V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aU|WaU{aEEV[[aU\x86\x82TaQ\xB9V[aU\x91\x82\x82\x85aT\xD0V[_`\x1F\x83\x11`\x01\x81\x14aU\xBEW_\x84\x15aU\xACW\x82\x87\x015\x90P[aU\xB6\x85\x82aU>V[\x86UPaV\x1DV[`\x1F\x19\x84\x16aU\xCC\x86aS\xBCV[_[\x82\x81\x10\x15aU\xF3W\x84\x89\x015\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90PaU\xCEV[\x86\x83\x10\x15aV\x10W\x84\x89\x015aV\x0C`\x1F\x89\x16\x82aU\"V[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPPV[aV1\x83\x83\x83aUYV[PPPV[_\x815aVB\x81aE\x13V[\x80\x91PP\x91\x90PV[_\x81_\x1B\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaVu\x84aVKV[\x93P\x80\x19\x83\x16\x92P\x80\x84\x16\x83\x17\x91PP\x92\x91PPV[_aV\xA5aV\xA0aV\x9B\x84aC\xD4V[aT:V[aC\xD4V[\x90P\x91\x90PV[_aV\xB6\x82aV\x8BV[\x90P\x91\x90PV[_aV\xC7\x82aV\xACV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aV\xE0\x82aV\xBDV[aV\xF3aV\xEC\x82aV\xCEV[\x83TaVVV[\x82UPPPV[_\x81\x01_\x83\x01aW\n\x81\x85aSPV[aW\x15\x81\x83\x86aV&V[PPPP`\x01\x81\x01` \x83\x01\x80aW+\x81aV6V[\x90PaW7\x81\x84aV\xD7V[PPP`\x02\x81\x01`@\x83\x01\x80aWL\x81aV6V[\x90PaWX\x81\x84aV\xD7V[PPP`\x03\x81\x01``\x83\x01aWm\x81\x85aSPV[aWx\x81\x83\x86aV&V[PPPPPPV[aW\x8A\x82\x82aV\xFAV[PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_aW\xAC\x82aW\x8EV[aW\xB6\x81\x85aW\x98V[\x93PaW\xC6\x81\x85` \x86\x01aB\xB5V[\x80\x84\x01\x91PP\x92\x91PPV[_aW\xDD\x82\x84aW\xA2V[\x91P\x81\x90P\x92\x91PPV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ContextStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ContextStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from_underlying(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into_underlying(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl From<u8> for ContextStatus {
            fn from(value: u8) -> Self {
                Self::from_underlying(value)
            }
        }
        #[automatically_derived]
        impl From<ContextStatus> for u8 {
            fn from(value: ContextStatus) -> Self {
                value.into_underlying()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ContextStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ContextStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorContext { uint256 contextId; uint256 previousContextId; uint256 featureSet; CoprocessorV2[] coprocessors; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub previousContextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContext> for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContext) -> Self {
                (
                    value.contextId,
                    value.previousContextId,
                    value.featureSet,
                    value.coprocessors,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    previousContextId: tuple.1,
                    featureSet: tuple.2,
                    coprocessors: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CoprocessorContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousContextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorContext {
            const NAME: &'static str = "CoprocessorContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorContext(uint256 contextId,uint256 previousContextId,uint256 featureSet,CoprocessorV2[] coprocessors)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <CoprocessorV2 as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <CoprocessorV2 as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contextId)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.previousContextId,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.featureSet)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.coprocessors)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contextId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.previousContextId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.featureSet,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.coprocessors,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contextId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.previousContextId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.featureSet,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    CoprocessorV2,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.coprocessors,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorContextTimePeriods { uint256 preActivationTimePeriod; uint256 suspendedTimePeriod; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContextTimePeriods {
        #[allow(missing_docs)]
        pub preActivationTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContextTimePeriods>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContextTimePeriods) -> Self {
                (value.preActivationTimePeriod, value.suspendedTimePeriod)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorContextTimePeriods {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preActivationTimePeriod: tuple.0,
                    suspendedTimePeriod: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorContextTimePeriods {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self>
        for CoprocessorContextTimePeriods {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.preActivationTimePeriod,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedTimePeriod),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorContextTimePeriods {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorContextTimePeriods {
            const NAME: &'static str = "CoprocessorContextTimePeriods";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorContextTimePeriods(uint256 preActivationTimePeriod,uint256 suspendedTimePeriod)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.preActivationTimePeriod,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.suspendedTimePeriod,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorContextTimePeriods {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.preActivationTimePeriod,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.suspendedTimePeriod,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.preActivationTimePeriod,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.suspendedTimePeriod,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorV2 { string name; address txSenderAddress; address signerAddress; string storageUrl; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorV2 {
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub storageUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::String,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::String,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::String,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::String,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorV2> for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorV2) -> Self {
                (
                    value.name,
                    value.txSenderAddress,
                    value.signerAddress,
                    value.storageUrl,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CoprocessorV2 {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    name: tuple.0,
                    txSenderAddress: tuple.1,
                    signerAddress: tuple.2,
                    storageUrl: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorV2 {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CoprocessorV2 {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.storageUrl,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorV2 {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorV2 {
            const NAME: &'static str = "CoprocessorV2";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorV2(string name,address txSenderAddress,address signerAddress,string storageUrl)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.name,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.txSenderAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.signerAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.storageUrl,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorV2 {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.name,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.txSenderAddress,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.signerAddress,
                    )
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.storageUrl,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.name,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.txSenderAddress,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.signerAddress,
                    out,
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.storageUrl,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressEmptyCode(address)` and selector `0x9996b315`.
```solidity
error AddressEmptyCode(address target);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressEmptyCode {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressEmptyCode> for UnderlyingRustTuple<'_> {
            fn from(value: AddressEmptyCode) -> Self {
                (value.target,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressEmptyCode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { target: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressEmptyCode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressEmptyCode(address)";
            const SELECTOR: [u8; 4] = [153u8, 150u8, 179u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextAlreadyExists(uint256)` and selector `0x6653f6d7`.
```solidity
error ContextAlreadyExists(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextAlreadyExists {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: ContextAlreadyExists) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextAlreadyExists(uint256)";
            const SELECTOR: [u8; 4] = [102u8, 83u8, 246u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextDoesNotExist(uint256)` and selector `0x61544cfc`.
```solidity
error ContextDoesNotExist(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextDoesNotExist {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: ContextDoesNotExist) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextDoesNotExist(uint256)";
            const SELECTOR: [u8; 4] = [97u8, 84u8, 76u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextIsActive(uint256)` and selector `0xcd494e49`.
```solidity
error ContextIsActive(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextIsActive {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextIsActive> for UnderlyingRustTuple<'_> {
            fn from(value: ContextIsActive) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextIsActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextIsActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextIsActive(uint256)";
            const SELECTOR: [u8; 4] = [205u8, 73u8, 78u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextIsGenerating(uint256)` and selector `0x0ddd14ca`.
```solidity
error ContextIsGenerating(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextIsGenerating {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextIsGenerating> for UnderlyingRustTuple<'_> {
            fn from(value: ContextIsGenerating) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextIsGenerating {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextIsGenerating {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextIsGenerating(uint256)";
            const SELECTOR: [u8; 4] = [13u8, 221u8, 20u8, 202u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotActive(uint256)` and selector `0x331486b3`.
```solidity
error ContextNotActive(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotActive {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotActive) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotActive(uint256)";
            const SELECTOR: [u8; 4] = [51u8, 20u8, 134u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotGenerated(uint256)` and selector `0xc0b5ee66`.
```solidity
error ContextNotGenerated(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotGenerated {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotGenerated> for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotGenerated) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextNotGenerated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotGenerated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotGenerated(uint256)";
            const SELECTOR: [u8; 4] = [192u8, 181u8, 238u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotPreActivatedOrSuspended(uint256)` and selector `0x12b49e3d`.
```solidity
error ContextNotPreActivatedOrSuspended(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotPreActivatedOrSuspended {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotPreActivatedOrSuspended>
        for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotPreActivatedOrSuspended) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ContextNotPreActivatedOrSuspended {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotPreActivatedOrSuspended {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotPreActivatedOrSuspended(uint256)";
            const SELECTOR: [u8; 4] = [18u8, 180u8, 158u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotSuspended(uint256)` and selector `0x77bf5846`.
```solidity
error ContextNotSuspended(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotSuspended {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotSuspended> for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotSuspended) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextNotSuspended {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotSuspended {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotSuspended(uint256)";
            const SELECTOR: [u8; 4] = [119u8, 191u8, 88u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorContextNotInitialized(uint256)` and selector `0xabf9e7b0`.
```solidity
error CoprocessorContextNotInitialized(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContextNotInitialized {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContextNotInitialized>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContextNotInitialized) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorContextNotInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorContextNotInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorContextNotInitialized(uint256)";
            const SELECTOR: [u8; 4] = [171u8, 249u8, 231u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorSignerAddressesNotUnique(address,uint256,(string,address,address,string)[])` and selector `0xc826e1a2`.
```solidity
error CoprocessorSignerAddressesNotUnique(address signerAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorSignerAddressesNotUnique {
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorSignerAddressesNotUnique>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorSignerAddressesNotUnique) -> Self {
                (value.signerAddress, value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorSignerAddressesNotUnique {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    signerAddress: tuple.0,
                    coprocessorIndex: tuple.1,
                    coprocessors: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorSignerAddressesNotUnique {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorSignerAddressesNotUnique(address,uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [200u8, 38u8, 225u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorTxSenderAddressesNotUnique(address,uint256,(string,address,address,string)[])` and selector `0x64d52759`.
```solidity
error CoprocessorTxSenderAddressesNotUnique(address txSenderAddress, uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorTxSenderAddressesNotUnique {
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorTxSenderAddressesNotUnique>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorTxSenderAddressesNotUnique) -> Self {
                (value.txSenderAddress, value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorTxSenderAddressesNotUnique {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    txSenderAddress: tuple.0,
                    coprocessorIndex: tuple.1,
                    coprocessors: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorTxSenderAddressesNotUnique {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorTxSenderAddressesNotUnique(address,uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [100u8, 213u8, 39u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967InvalidImplementation(address)` and selector `0x4c9c8ce3`.
```solidity
error ERC1967InvalidImplementation(address implementation);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967InvalidImplementation {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967InvalidImplementation>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967InvalidImplementation) -> Self {
                (value.implementation,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1967InvalidImplementation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { implementation: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967InvalidImplementation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967InvalidImplementation(address)";
            const SELECTOR: [u8; 4] = [76u8, 156u8, 140u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967NonPayable()` and selector `0xb398979f`.
```solidity
error ERC1967NonPayable();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967NonPayable;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967NonPayable> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967NonPayable) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1967NonPayable {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967NonPayable {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967NonPayable()";
            const SELECTOR: [u8; 4] = [179u8, 152u8, 151u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EmptyCoprocessors()` and selector `0x8af082ef`.
```solidity
error EmptyCoprocessors();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyCoprocessors;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyCoprocessors> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyCoprocessors) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyCoprocessors {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyCoprocessors {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyCoprocessors()";
            const SELECTOR: [u8; 4] = [138u8, 240u8, 130u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FailedCall()` and selector `0xd6bda275`.
```solidity
error FailedCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedCall;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedCall> for UnderlyingRustTuple<'_> {
            fn from(value: FailedCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedCall()";
            const SELECTOR: [u8; 4] = [214u8, 189u8, 162u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidContextStatusForceUpdate(uint256,uint8)` and selector `0xf0bed68f`.
```solidity
error InvalidContextStatusForceUpdate(uint256 contextId, ContextStatus status);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidContextStatusForceUpdate {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            ContextStatus,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            <ContextStatus as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidContextStatusForceUpdate>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidContextStatusForceUpdate) -> Self {
                (value.contextId, value.status)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidContextStatusForceUpdate {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    status: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidContextStatusForceUpdate {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidContextStatusForceUpdate(uint256,uint8)";
            const SELECTOR: [u8; 4] = [240u8, 190u8, 214u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <ContextStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidNullContextId()` and selector `0xcb17b7a5`.
```solidity
error InvalidNullContextId();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidNullContextId;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidNullContextId> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidNullContextId) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidNullContextId {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidNullContextId {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidNullContextId()";
            const SELECTOR: [u8; 4] = [203u8, 23u8, 183u8, 165u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoActiveCoprocessorContext()` and selector `0x046593ea`.
```solidity
error NoActiveCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoActiveCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoActiveCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoActiveCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoActiveCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoActiveCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoActiveCoprocessorContext()";
            const SELECTOR: [u8; 4] = [4u8, 101u8, 147u8, 234u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoPreActivationCoprocessorContext()` and selector `0xb9e861b2`.
```solidity
error NoPreActivationCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoPreActivationCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoPreActivationCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoPreActivationCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoPreActivationCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoPreActivationCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoPreActivationCoprocessorContext()";
            const SELECTOR: [u8; 4] = [185u8, 232u8, 97u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoSuspendedCoprocessorContext()` and selector `0x21fb08f9`.
```solidity
error NoSuspendedCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoSuspendedCoprocessorContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoSuspendedCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoSuspendedCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoSuspendedCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoSuspendedCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoSuspendedCoprocessorContext()";
            const SELECTOR: [u8; 4] = [33u8, 251u8, 8u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorFromContext(uint256,address)` and selector `0xc312e73e`.
```solidity
error NotCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorFromContext) -> Self {
                (value.contextId, value.coprocessorTxSenderAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    coprocessorTxSenderAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [195u8, 18u8, 231u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorSignerFromContext(uint256,address)` and selector `0x554f8c5f`.
```solidity
error NotCoprocessorSignerFromContext(uint256 contextId, address signerAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorSignerFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorSignerFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorSignerFromContext) -> Self {
                (value.contextId, value.signerAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorSignerFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    signerAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorSignerFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorSignerFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [85u8, 79u8, 140u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorTxSenderFromContext(uint256,address)` and selector `0x29a993c1`.
```solidity
error NotCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorTxSenderFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorTxSenderFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorTxSenderFromContext) -> Self {
                (value.contextId, value.txSenderAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorTxSenderFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    txSenderAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorTxSenderFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorTxSenderFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [41u8, 169u8, 147u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotGatewayOwner(address)` and selector `0x0e56cf3d`.
```solidity
error NotGatewayOwner(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotGatewayOwner {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotGatewayOwner> for UnderlyingRustTuple<'_> {
            fn from(value: NotGatewayOwner) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotGatewayOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotGatewayOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotGatewayOwner(address)";
            const SELECTOR: [u8; 4] = [14u8, 86u8, 207u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializingFromEmptyProxy()` and selector `0x6f4f731f`.
```solidity
error NotInitializingFromEmptyProxy();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializingFromEmptyProxy;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializingFromEmptyProxy>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializingFromEmptyProxy) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotInitializingFromEmptyProxy {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializingFromEmptyProxy {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializingFromEmptyProxy()";
            const SELECTOR: [u8; 4] = [111u8, 79u8, 115u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NullCoprocessorSignerAddress(uint256,(string,address,address,string)[])` and selector `0x4a6c5974`.
```solidity
error NullCoprocessorSignerAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NullCoprocessorSignerAddress {
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NullCoprocessorSignerAddress>
        for UnderlyingRustTuple<'_> {
            fn from(value: NullCoprocessorSignerAddress) -> Self {
                (value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NullCoprocessorSignerAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    coprocessorIndex: tuple.0,
                    coprocessors: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NullCoprocessorSignerAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NullCoprocessorSignerAddress(uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [74u8, 108u8, 89u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NullCoprocessorTxSenderAddress(uint256,(string,address,address,string)[])` and selector `0x9edb7861`.
```solidity
error NullCoprocessorTxSenderAddress(uint256 coprocessorIndex, CoprocessorV2[] coprocessors);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NullCoprocessorTxSenderAddress {
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<CoprocessorV2>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NullCoprocessorTxSenderAddress>
        for UnderlyingRustTuple<'_> {
            fn from(value: NullCoprocessorTxSenderAddress) -> Self {
                (value.coprocessorIndex, value.coprocessors)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NullCoprocessorTxSenderAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    coprocessorIndex: tuple.0,
                    coprocessors: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NullCoprocessorTxSenderAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NullCoprocessorTxSenderAddress(uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [158u8, 219u8, 120u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `PreActivationContextOngoing(uint256)` and selector `0xc470c022`.
```solidity
error PreActivationContextOngoing(uint256 preActivationContextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PreActivationContextOngoing {
        #[allow(missing_docs)]
        pub preActivationContextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PreActivationContextOngoing>
        for UnderlyingRustTuple<'_> {
            fn from(value: PreActivationContextOngoing) -> Self {
                (value.preActivationContextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for PreActivationContextOngoing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preActivationContextId: tuple.0,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PreActivationContextOngoing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PreActivationContextOngoing(uint256)";
            const SELECTOR: [u8; 4] = [196u8, 112u8, 192u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.preActivationContextId,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SuspendedContextOngoing(uint256)` and selector `0x7022ec41`.
```solidity
error SuspendedContextOngoing(uint256 suspendedContextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SuspendedContextOngoing {
        #[allow(missing_docs)]
        pub suspendedContextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SuspendedContextOngoing> for UnderlyingRustTuple<'_> {
            fn from(value: SuspendedContextOngoing) -> Self {
                (value.suspendedContextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SuspendedContextOngoing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    suspendedContextId: tuple.0,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SuspendedContextOngoing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SuspendedContextOngoing(uint256)";
            const SELECTOR: [u8; 4] = [112u8, 34u8, 236u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedContextId),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnauthorizedCallContext()` and selector `0xe07c8dba`.
```solidity
error UUPSUnauthorizedCallContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnauthorizedCallContext;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnauthorizedCallContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnauthorizedCallContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnauthorizedCallContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnauthorizedCallContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnauthorizedCallContext()";
            const SELECTOR: [u8; 4] = [224u8, 124u8, 141u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnsupportedProxiableUUID(bytes32)` and selector `0xaa1d49a4`.
```solidity
error UUPSUnsupportedProxiableUUID(bytes32 slot);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnsupportedProxiableUUID {
        #[allow(missing_docs)]
        pub slot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnsupportedProxiableUUID>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnsupportedProxiableUUID) -> Self {
                (value.slot,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnsupportedProxiableUUID {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { slot: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnsupportedProxiableUUID {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnsupportedProxiableUUID(bytes32)";
            const SELECTOR: [u8; 4] = [170u8, 29u8, 73u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ActivateCoprocessorContext(uint256)` and selector `0x6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71`.
```solidity
event ActivateCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActivateCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActivateCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ActivateCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                108u8, 140u8, 4u8, 201u8, 254u8, 163u8, 55u8, 114u8, 11u8, 125u8, 250u8,
                220u8, 163u8, 101u8, 232u8, 80u8, 3u8, 81u8, 20u8, 253u8, 8u8, 27u8,
                88u8, 208u8, 48u8, 175u8, 190u8, 139u8, 93u8, 195u8, 190u8, 113u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &ActivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CompromiseCoprocessorContext(uint256)` and selector `0xee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf21`.
```solidity
event CompromiseCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CompromiseCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CompromiseCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CompromiseCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                238u8, 126u8, 248u8, 57u8, 99u8, 65u8, 113u8, 37u8, 210u8, 116u8, 48u8,
                120u8, 159u8, 198u8, 233u8, 65u8, 148u8, 56u8, 30u8, 130u8, 195u8, 205u8,
                166u8, 130u8, 96u8, 208u8, 231u8, 207u8, 195u8, 30u8, 175u8, 33u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CompromiseCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CompromiseCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &CompromiseCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DeactivateCoprocessorContext(uint256)` and selector `0x1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898`.
```solidity
event DeactivateCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DeactivateCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DeactivateCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DeactivateCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                27u8, 170u8, 8u8, 216u8, 222u8, 24u8, 232u8, 226u8, 40u8, 118u8, 145u8,
                177u8, 48u8, 151u8, 72u8, 1u8, 9u8, 129u8, 235u8, 223u8, 209u8, 42u8,
                23u8, 61u8, 133u8, 116u8, 101u8, 117u8, 72u8, 165u8, 40u8, 152u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DeactivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DeactivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DeactivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DestroyCoprocessorContext(uint256)` and selector `0xf20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be5`.
```solidity
event DestroyCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DestroyCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DestroyCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DestroyCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                242u8, 11u8, 41u8, 152u8, 4u8, 201u8, 193u8, 214u8, 218u8, 59u8, 130u8,
                65u8, 76u8, 122u8, 160u8, 168u8, 69u8, 205u8, 186u8, 186u8, 226u8, 217u8,
                14u8, 70u8, 227u8, 96u8, 163u8, 121u8, 167u8, 123u8, 123u8, 229u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DestroyCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DestroyCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DestroyCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `InitializeCoprocessorContexts(uint256,(string,address,address,string)[])` and selector `0x13c5fd631ca031552fe9e38d911910a5980f6608eea323696e04db0fec0c9557`.
```solidity
event InitializeCoprocessorContexts(uint256 featureSet, CoprocessorV2[] coprocessors);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct InitializeCoprocessorContexts {
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for InitializeCoprocessorContexts {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "InitializeCoprocessorContexts(uint256,(string,address,address,string)[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                19u8, 197u8, 253u8, 99u8, 28u8, 160u8, 49u8, 85u8, 47u8, 233u8, 227u8,
                141u8, 145u8, 25u8, 16u8, 165u8, 152u8, 15u8, 102u8, 8u8, 238u8, 163u8,
                35u8, 105u8, 110u8, 4u8, 219u8, 15u8, 236u8, 12u8, 149u8, 87u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    featureSet: data.0,
                    coprocessors: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for InitializeCoprocessorContexts {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&InitializeCoprocessorContexts> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &InitializeCoprocessorContexts,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `NewCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256))` and selector `0xaf58a18a4e4159fa706c0d4e0fdab0930f97679319cddbc9c9199b0cd104b6ef`.
```solidity
event NewCoprocessorContext(CoprocessorContext activeCoprocessorContext, CoprocessorContext newCoprocessorContext, CoprocessorContextTimePeriods timePeriods);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewCoprocessorContext {
        #[allow(missing_docs)]
        pub activeCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub newCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewCoprocessorContext {
            type DataTuple<'a> = (
                CoprocessorContext,
                CoprocessorContext,
                CoprocessorContextTimePeriods,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "NewCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                175u8, 88u8, 161u8, 138u8, 78u8, 65u8, 89u8, 250u8, 112u8, 108u8, 13u8,
                78u8, 15u8, 218u8, 176u8, 147u8, 15u8, 151u8, 103u8, 147u8, 25u8, 205u8,
                219u8, 201u8, 201u8, 25u8, 155u8, 12u8, 209u8, 4u8, 182u8, 239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    activeCoprocessorContext: data.0,
                    newCoprocessorContext: data.1,
                    timePeriods: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.activeCoprocessorContext,
                    ),
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.newCoprocessorContext,
                    ),
                    <CoprocessorContextTimePeriods as alloy_sol_types::SolType>::tokenize(
                        &self.timePeriods,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NewCoprocessorContext) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferStarted(address,address)` and selector `0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700`.
```solidity
event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferStarted {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferStarted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferStarted(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                56u8, 209u8, 107u8, 140u8, 172u8, 34u8, 217u8, 159u8, 199u8, 193u8, 36u8,
                185u8, 205u8, 13u8, 226u8, 211u8, 250u8, 31u8, 174u8, 244u8, 32u8, 191u8,
                231u8, 145u8, 216u8, 195u8, 98u8, 215u8, 101u8, 226u8, 39u8, 0u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferStarted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferStarted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &OwnershipTransferStarted,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PreActivateCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),uint256)` and selector `0x2b0188fc4bed471ee216dc6cb9650beb288892034ebee7301b32391add2a66b8`.
```solidity
event PreActivateCoprocessorContext(CoprocessorContext newCoprocessorContext, uint256 activationBlockTimestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreActivateCoprocessorContext {
        #[allow(missing_docs)]
        pub newCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub activationBlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreActivateCoprocessorContext {
            type DataTuple<'a> = (
                CoprocessorContext,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreActivateCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                43u8, 1u8, 136u8, 252u8, 75u8, 237u8, 71u8, 30u8, 226u8, 22u8, 220u8,
                108u8, 185u8, 101u8, 11u8, 235u8, 40u8, 136u8, 146u8, 3u8, 78u8, 190u8,
                231u8, 48u8, 27u8, 50u8, 57u8, 26u8, 221u8, 42u8, 102u8, 184u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    newCoprocessorContext: data.0,
                    activationBlockTimestamp: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.newCoprocessorContext,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.activationBlockTimestamp,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreActivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreActivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreActivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SuspendCoprocessorContext(uint256,uint256)` and selector `0x3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc`.
```solidity
event SuspendCoprocessorContext(uint256 contextId, uint256 deactivatedBlockTimestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SuspendCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deactivatedBlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SuspendCoprocessorContext {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SuspendCoprocessorContext(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                48u8, 128u8, 242u8, 184u8, 13u8, 218u8, 71u8, 72u8, 202u8, 41u8, 38u8,
                166u8, 65u8, 250u8, 80u8, 7u8, 115u8, 80u8, 88u8, 220u8, 95u8, 90u8,
                178u8, 89u8, 78u8, 236u8, 167u8, 65u8, 151u8, 163u8, 172u8, 204u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    contextId: data.0,
                    deactivatedBlockTimestamp: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.deactivatedBlockTimestamp,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SuspendCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SuspendCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SuspendCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Upgraded(address)` and selector `0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b`.
```solidity
event Upgraded(address indexed implementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Upgraded {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Upgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Upgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { implementation: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.implementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.implementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Upgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Upgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Upgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `UPGRADE_INTERFACE_VERSION()` and selector `0xad3cb1cc`.
```solidity
function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`UPGRADE_INTERFACE_VERSION()`](UPGRADE_INTERFACE_VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for UPGRADE_INTERFACE_VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UPGRADE_INTERFACE_VERSION()";
            const SELECTOR: [u8; 4] = [173u8, 60u8, 177u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: UPGRADE_INTERFACE_VERSIONReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: UPGRADE_INTERFACE_VERSIONReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `acceptOwnership()` and selector `0x79ba5097`.
```solidity
function acceptOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptOwnershipCall;
    ///Container type for the return parameters of the [`acceptOwnership()`](acceptOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptOwnershipCall> for UnderlyingRustTuple<'_> {
                fn from(value: acceptOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for acceptOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: acceptOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for acceptOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl acceptOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <acceptOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for acceptOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = acceptOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "acceptOwnership()";
            const SELECTOR: [u8; 4] = [121u8, 186u8, 80u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                acceptOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))` and selector `0x84cae187`.
```solidity
function addCoprocessorContext(uint256 featureSet, CoprocessorV2[] memory coprocessors, CoprocessorContextTimePeriods memory timePeriods) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCoprocessorContextCall {
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))`](addCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCoprocessorContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
                CoprocessorContextTimePeriods,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
                >,
                <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCoprocessorContextCall) -> Self {
                    (value.featureSet, value.coprocessors, value.timePeriods)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        featureSet: tuple.0,
                        coprocessors: tuple.1,
                        timePeriods: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCoprocessorContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addCoprocessorContextReturn {
            fn _tokenize(
                &self,
            ) -> <addCoprocessorContextCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCoprocessorContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
                CoprocessorContextTimePeriods,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addCoprocessorContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))";
            const SELECTOR: [u8; 4] = [132u8, 202u8, 225u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                    <CoprocessorContextTimePeriods as alloy_sol_types::SolType>::tokenize(
                        &self.timePeriods,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addCoprocessorContextReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `checkIsCoprocessorSignerFromContext(uint256,address)` and selector `0x9efb484e`.
```solidity
function checkIsCoprocessorSignerFromContext(uint256 contextId, address signerAddress) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorSignerFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`checkIsCoprocessorSignerFromContext(uint256,address)`](checkIsCoprocessorSignerFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorSignerFromContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorSignerFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorSignerFromContextCall) -> Self {
                    (value.contextId, value.signerAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorSignerFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        signerAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorSignerFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorSignerFromContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorSignerFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl checkIsCoprocessorSignerFromContextReturn {
            fn _tokenize(
                &self,
            ) -> <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkIsCoprocessorSignerFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = checkIsCoprocessorSignerFromContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkIsCoprocessorSignerFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [158u8, 251u8, 72u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                checkIsCoprocessorSignerFromContextReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `checkIsCoprocessorTxSenderFromContext(uint256,address)` and selector `0xf192cf68`.
```solidity
function checkIsCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorTxSenderFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`checkIsCoprocessorTxSenderFromContext(uint256,address)`](checkIsCoprocessorTxSenderFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorTxSenderFromContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorTxSenderFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorTxSenderFromContextCall) -> Self {
                    (value.contextId, value.txSenderAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorTxSenderFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        txSenderAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorTxSenderFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorTxSenderFromContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorTxSenderFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl checkIsCoprocessorTxSenderFromContextReturn {
            fn _tokenize(
                &self,
            ) -> <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkIsCoprocessorTxSenderFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = checkIsCoprocessorTxSenderFromContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkIsCoprocessorTxSenderFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [241u8, 146u8, 207u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                checkIsCoprocessorTxSenderFromContextReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `forceUpdateContextToStatus(uint256,uint8)` and selector `0x3112a555`.
```solidity
function forceUpdateContextToStatus(uint256 contextId, ContextStatus status) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct forceUpdateContextToStatusCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub status: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`forceUpdateContextToStatus(uint256,uint8)`](forceUpdateContextToStatusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct forceUpdateContextToStatusReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                ContextStatus,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                <ContextStatus as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<forceUpdateContextToStatusCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: forceUpdateContextToStatusCall) -> Self {
                    (value.contextId, value.status)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for forceUpdateContextToStatusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        status: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<forceUpdateContextToStatusReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: forceUpdateContextToStatusReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for forceUpdateContextToStatusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl forceUpdateContextToStatusReturn {
            fn _tokenize(
                &self,
            ) -> <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for forceUpdateContextToStatusCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>, ContextStatus);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = forceUpdateContextToStatusReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "forceUpdateContextToStatus(uint256,uint8)";
            const SELECTOR: [u8; 4] = [49u8, 18u8, 165u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <ContextStatus as alloy_sol_types::SolType>::tokenize(&self.status),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                forceUpdateContextToStatusReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveCoprocessorContext()` and selector `0xfed9716b`.
```solidity
function getActiveCoprocessorContext() external view returns (CoprocessorContext memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveCoprocessorContext()`](getActiveCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextReturn {
        #[allow(missing_docs)]
        pub _0: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CoprocessorContext,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CoprocessorContext as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveCoprocessorContextCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <CoprocessorContext as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (CoprocessorContext,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveCoprocessorContext()";
            const SELECTOR: [u8; 4] = [254u8, 217u8, 113u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<CoprocessorContext as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveCoprocessorContextId()` and selector `0x991dc36d`.
```solidity
function getActiveCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveCoprocessorContextId()`](getActiveCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [153u8, 29u8, 195u8, 109u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorActivationBlockTimestampFromContext(uint256)` and selector `0xa94a02ad`.
```solidity
function getCoprocessorActivationBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorActivationBlockTimestampFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorActivationBlockTimestampFromContext(uint256)`](getCoprocessorActivationBlockTimestampFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorActivationBlockTimestampFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorActivationBlockTimestampFromContextCall,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorActivationBlockTimestampFromContextCall,
                ) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorActivationBlockTimestampFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorActivationBlockTimestampFromContextReturn,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorActivationBlockTimestampFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorActivationBlockTimestampFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorActivationBlockTimestampFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorActivationBlockTimestampFromContext(uint256)";
            const SELECTOR: [u8; 4] = [169u8, 74u8, 2u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorActivationBlockTimestampFromContextReturn = r
                            .into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorActivationBlockTimestampFromContextReturn = r
                            .into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorContextStatus(uint256)` and selector `0x888b99e0`.
```solidity
function getCoprocessorContextStatus(uint256 contextId) external view returns (ContextStatus);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorContextStatusCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorContextStatus(uint256)`](getCoprocessorContextStatusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorContextStatusReturn {
        #[allow(missing_docs)]
        pub _0: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorContextStatusCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorContextStatusCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorContextStatusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ContextStatus,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ContextStatus as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorContextStatusReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorContextStatusReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorContextStatusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorContextStatusCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <ContextStatus as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (ContextStatus,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorContextStatus(uint256)";
            const SELECTOR: [u8; 4] = [136u8, 139u8, 153u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<ContextStatus as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorContextStatusReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorContextStatusReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorDeactivatedBlockTimestampFromContext(uint256)` and selector `0x90218748`.
```solidity
function getCoprocessorDeactivatedBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorDeactivatedBlockTimestampFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorDeactivatedBlockTimestampFromContext(uint256)`](getCoprocessorDeactivatedBlockTimestampFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorDeactivatedBlockTimestampFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorDeactivatedBlockTimestampFromContextCall,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorDeactivatedBlockTimestampFromContextCall,
                ) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorDeactivatedBlockTimestampFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorDeactivatedBlockTimestampFromContextReturn,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorDeactivatedBlockTimestampFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorDeactivatedBlockTimestampFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorDeactivatedBlockTimestampFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorDeactivatedBlockTimestampFromContext(uint256)";
            const SELECTOR: [u8; 4] = [144u8, 33u8, 135u8, 72u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorDeactivatedBlockTimestampFromContextReturn = r
                            .into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorDeactivatedBlockTimestampFromContextReturn = r
                            .into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorFromContext(uint256,address)` and selector `0xd1841dd3`.
```solidity
function getCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress) external view returns (CoprocessorV2 memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSenderAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorFromContext(uint256,address)`](getCoprocessorFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorFromContextReturn {
        #[allow(missing_docs)]
        pub _0: <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorFromContextCall) -> Self {
                    (value.contextId, value.coprocessorTxSenderAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        coprocessorTxSenderAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CoprocessorV2,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <CoprocessorV2 as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (CoprocessorV2,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [209u8, 132u8, 29u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSenderAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<CoprocessorV2 as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorFromContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorFromContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorMajorityThresholdFromContext(uint256)` and selector `0x6ba818e1`.
```solidity
function getCoprocessorMajorityThresholdFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorMajorityThresholdFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorMajorityThresholdFromContext(uint256)`](getCoprocessorMajorityThresholdFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorMajorityThresholdFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorMajorityThresholdFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorMajorityThresholdFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorMajorityThresholdFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorMajorityThresholdFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorMajorityThresholdFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorMajorityThresholdFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorMajorityThresholdFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorMajorityThresholdFromContext(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 168u8, 24u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorMajorityThresholdFromContextReturn = r
                            .into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorMajorityThresholdFromContextReturn = r
                            .into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorSignersFromContext(uint256)` and selector `0x6b3174e5`.
```solidity
function getCoprocessorSignersFromContext(uint256 contextId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorSignersFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorSignersFromContext(uint256)`](getCoprocessorSignersFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorSignersFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorSignersFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorSignersFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorSignersFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorSignersFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorSignersFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorSignersFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorSignersFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorSignersFromContext(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 49u8, 116u8, 229u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorSignersFromContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorSignersFromContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorTxSendersFromContext(uint256)` and selector `0x18b7214d`.
```solidity
function getCoprocessorTxSendersFromContext(uint256 contextId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorTxSendersFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorTxSendersFromContext(uint256)`](getCoprocessorTxSendersFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorTxSendersFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorTxSendersFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorTxSendersFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorTxSendersFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorTxSendersFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorTxSendersFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorTxSendersFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorTxSendersFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorTxSendersFromContext(uint256)";
            const SELECTOR: [u8; 4] = [24u8, 183u8, 33u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCoprocessorTxSendersFromContextReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCoprocessorTxSendersFromContextReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPreActivationCoprocessorContextId()` and selector `0xbe91187b`.
```solidity
function getPreActivationCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPreActivationCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPreActivationCoprocessorContextId()`](getPreActivationCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPreActivationCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPreActivationCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPreActivationCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPreActivationCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPreActivationCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPreActivationCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPreActivationCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPreActivationCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPreActivationCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [190u8, 145u8, 24u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getPreActivationCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getPreActivationCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getSuspendedCoprocessorContextId()` and selector `0x086e4e1c`.
```solidity
function getSuspendedCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSuspendedCoprocessorContextIdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getSuspendedCoprocessorContextId()`](getSuspendedCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSuspendedCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSuspendedCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSuspendedCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSuspendedCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSuspendedCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSuspendedCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSuspendedCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSuspendedCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSuspendedCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [8u8, 110u8, 78u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getSuspendedCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getSuspendedCoprocessorContextIdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVersion()` and selector `0x0d8e6e2c`.
```solidity
function getVersion() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVersion()`](getVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVersion()";
            const SELECTOR: [u8; 4] = [13u8, 142u8, 110u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getVersionReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initializeFromEmptyProxy(uint256,(string,address,address,string)[])` and selector `0x703c3b2e`.
```solidity
function initializeFromEmptyProxy(uint256 initialFeatureSet, CoprocessorV2[] memory initialCoprocessors) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeFromEmptyProxyCall {
        #[allow(missing_docs)]
        pub initialFeatureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub initialCoprocessors: alloy::sol_types::private::Vec<
            <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`initializeFromEmptyProxy(uint256,(string,address,address,string)[])`](initializeFromEmptyProxyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeFromEmptyProxyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeFromEmptyProxyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: initializeFromEmptyProxyCall) -> Self {
                    (value.initialFeatureSet, value.initialCoprocessors)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initializeFromEmptyProxyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        initialFeatureSet: tuple.0,
                        initialCoprocessors: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeFromEmptyProxyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: initializeFromEmptyProxyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initializeFromEmptyProxyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl initializeFromEmptyProxyReturn {
            fn _tokenize(
                &self,
            ) -> <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeFromEmptyProxyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<CoprocessorV2>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeFromEmptyProxyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initializeFromEmptyProxy(uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [112u8, 60u8, 59u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialFeatureSet),
                    <alloy::sol_types::sol_data::Array<
                        CoprocessorV2,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialCoprocessors),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                initializeFromEmptyProxyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isCoprocessorContextActiveOrSuspended(uint256)` and selector `0x60b25465`.
```solidity
function isCoprocessorContextActiveOrSuspended(uint256 contextId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorContextActiveOrSuspendedCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isCoprocessorContextActiveOrSuspended(uint256)`](isCoprocessorContextActiveOrSuspendedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorContextActiveOrSuspendedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorContextActiveOrSuspendedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorContextActiveOrSuspendedCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorContextActiveOrSuspendedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorContextActiveOrSuspendedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorContextActiveOrSuspendedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorContextActiveOrSuspendedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCoprocessorContextActiveOrSuspendedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCoprocessorContextActiveOrSuspended(uint256)";
            const SELECTOR: [u8; 4] = [96u8, 178u8, 84u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isCoprocessorContextActiveOrSuspendedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isCoprocessorContextActiveOrSuspendedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pendingOwner()` and selector `0xe30c3978`.
```solidity
function pendingOwner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingOwnerCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pendingOwner()`](pendingOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingOwnerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingOwnerCall> for UnderlyingRustTuple<'_> {
                fn from(value: pendingOwnerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pendingOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingOwnerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pendingOwnerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pendingOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pendingOwnerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pendingOwner()";
            const SELECTOR: [u8; 4] = [227u8, 12u8, 57u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: pendingOwnerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: pendingOwnerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `proxiableUUID()` and selector `0x52d1902d`.
```solidity
function proxiableUUID() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`proxiableUUID()`](proxiableUUIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDCall> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proxiableUUIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proxiableUUID()";
            const SELECTOR: [u8; 4] = [82u8, 209u8, 144u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: proxiableUUIDReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: proxiableUUIDReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `refreshCoprocessorContextStatuses()` and selector `0x3a5162e6`.
```solidity
function refreshCoprocessorContextStatuses() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refreshCoprocessorContextStatusesCall;
    ///Container type for the return parameters of the [`refreshCoprocessorContextStatuses()`](refreshCoprocessorContextStatusesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refreshCoprocessorContextStatusesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refreshCoprocessorContextStatusesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: refreshCoprocessorContextStatusesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for refreshCoprocessorContextStatusesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refreshCoprocessorContextStatusesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: refreshCoprocessorContextStatusesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for refreshCoprocessorContextStatusesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl refreshCoprocessorContextStatusesReturn {
            fn _tokenize(
                &self,
            ) -> <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for refreshCoprocessorContextStatusesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = refreshCoprocessorContextStatusesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "refreshCoprocessorContextStatuses()";
            const SELECTOR: [u8; 4] = [58u8, 81u8, 98u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                refreshCoprocessorContextStatusesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall;
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <renounceOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `swapSuspendedCoprocessorContextWithActive(uint256)` and selector `0x86dfc7de`.
```solidity
function swapSuspendedCoprocessorContextWithActive(uint256 suspendedTimePeriod) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapSuspendedCoprocessorContextWithActiveCall {
        #[allow(missing_docs)]
        pub suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`swapSuspendedCoprocessorContextWithActive(uint256)`](swapSuspendedCoprocessorContextWithActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct swapSuspendedCoprocessorContextWithActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapSuspendedCoprocessorContextWithActiveCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapSuspendedCoprocessorContextWithActiveCall) -> Self {
                    (value.suspendedTimePeriod,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapSuspendedCoprocessorContextWithActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        suspendedTimePeriod: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<swapSuspendedCoprocessorContextWithActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: swapSuspendedCoprocessorContextWithActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for swapSuspendedCoprocessorContextWithActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl swapSuspendedCoprocessorContextWithActiveReturn {
            fn _tokenize(
                &self,
            ) -> <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for swapSuspendedCoprocessorContextWithActiveCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = swapSuspendedCoprocessorContextWithActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "swapSuspendedCoprocessorContextWithActive(uint256)";
            const SELECTOR: [u8; 4] = [134u8, 223u8, 199u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedTimePeriod),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                swapSuspendedCoprocessorContextWithActiveReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl transferOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <transferOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                transferOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `upgradeToAndCall(address,bytes)` and selector `0x4f1ef286`.
```solidity
function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallCall {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`upgradeToAndCall(address,bytes)`](upgradeToAndCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallCall) -> Self {
                    (value.newImplementation, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newImplementation: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl upgradeToAndCallReturn {
            fn _tokenize(
                &self,
            ) -> <upgradeToAndCallCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeToAndCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeToAndCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeToAndCall(address,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 30u8, 242u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                upgradeToAndCallReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`CoprocessorContexts`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum CoprocessorContextsCalls {
        #[allow(missing_docs)]
        UPGRADE_INTERFACE_VERSION(UPGRADE_INTERFACE_VERSIONCall),
        #[allow(missing_docs)]
        acceptOwnership(acceptOwnershipCall),
        #[allow(missing_docs)]
        addCoprocessorContext(addCoprocessorContextCall),
        #[allow(missing_docs)]
        checkIsCoprocessorSignerFromContext(checkIsCoprocessorSignerFromContextCall),
        #[allow(missing_docs)]
        checkIsCoprocessorTxSenderFromContext(checkIsCoprocessorTxSenderFromContextCall),
        #[allow(missing_docs)]
        forceUpdateContextToStatus(forceUpdateContextToStatusCall),
        #[allow(missing_docs)]
        getActiveCoprocessorContext(getActiveCoprocessorContextCall),
        #[allow(missing_docs)]
        getActiveCoprocessorContextId(getActiveCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getCoprocessorActivationBlockTimestampFromContext(
            getCoprocessorActivationBlockTimestampFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorContextStatus(getCoprocessorContextStatusCall),
        #[allow(missing_docs)]
        getCoprocessorDeactivatedBlockTimestampFromContext(
            getCoprocessorDeactivatedBlockTimestampFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorFromContext(getCoprocessorFromContextCall),
        #[allow(missing_docs)]
        getCoprocessorMajorityThresholdFromContext(
            getCoprocessorMajorityThresholdFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorSignersFromContext(getCoprocessorSignersFromContextCall),
        #[allow(missing_docs)]
        getCoprocessorTxSendersFromContext(getCoprocessorTxSendersFromContextCall),
        #[allow(missing_docs)]
        getPreActivationCoprocessorContextId(getPreActivationCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getSuspendedCoprocessorContextId(getSuspendedCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getVersion(getVersionCall),
        #[allow(missing_docs)]
        initializeFromEmptyProxy(initializeFromEmptyProxyCall),
        #[allow(missing_docs)]
        isCoprocessorContextActiveOrSuspended(isCoprocessorContextActiveOrSuspendedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        pendingOwner(pendingOwnerCall),
        #[allow(missing_docs)]
        proxiableUUID(proxiableUUIDCall),
        #[allow(missing_docs)]
        refreshCoprocessorContextStatuses(refreshCoprocessorContextStatusesCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        swapSuspendedCoprocessorContextWithActive(
            swapSuspendedCoprocessorContextWithActiveCall,
        ),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        upgradeToAndCall(upgradeToAndCallCall),
    }
    #[automatically_derived]
    impl CoprocessorContextsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [8u8, 110u8, 78u8, 28u8],
            [13u8, 142u8, 110u8, 44u8],
            [24u8, 183u8, 33u8, 77u8],
            [49u8, 18u8, 165u8, 85u8],
            [58u8, 81u8, 98u8, 230u8],
            [79u8, 30u8, 242u8, 134u8],
            [82u8, 209u8, 144u8, 45u8],
            [96u8, 178u8, 84u8, 101u8],
            [107u8, 49u8, 116u8, 229u8],
            [107u8, 168u8, 24u8, 225u8],
            [112u8, 60u8, 59u8, 46u8],
            [113u8, 80u8, 24u8, 166u8],
            [121u8, 186u8, 80u8, 151u8],
            [132u8, 202u8, 225u8, 135u8],
            [134u8, 223u8, 199u8, 222u8],
            [136u8, 139u8, 153u8, 224u8],
            [141u8, 165u8, 203u8, 91u8],
            [144u8, 33u8, 135u8, 72u8],
            [153u8, 29u8, 195u8, 109u8],
            [158u8, 251u8, 72u8, 78u8],
            [169u8, 74u8, 2u8, 173u8],
            [173u8, 60u8, 177u8, 204u8],
            [190u8, 145u8, 24u8, 123u8],
            [209u8, 132u8, 29u8, 211u8],
            [227u8, 12u8, 57u8, 120u8],
            [241u8, 146u8, 207u8, 104u8],
            [242u8, 253u8, 227u8, 139u8],
            [254u8, 217u8, 113u8, 107u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CoprocessorContextsCalls {
        const NAME: &'static str = "CoprocessorContextsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 28usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(_) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::acceptOwnership(_) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addCoprocessorContext(_) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::checkIsCoprocessorSignerFromContext(_) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::checkIsCoprocessorTxSenderFromContext(_) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::forceUpdateContextToStatus(_) => {
                    <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveCoprocessorContext(_) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveCoprocessorContextId(_) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(_) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorContextStatus(_) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(_) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorFromContext(_) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorMajorityThresholdFromContext(_) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorSignersFromContext(_) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorTxSendersFromContext(_) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPreActivationCoprocessorContextId(_) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSuspendedCoprocessorContextId(_) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVersion(_) => {
                    <getVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initializeFromEmptyProxy(_) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCoprocessorContextActiveOrSuspended(_) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pendingOwner(_) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proxiableUUID(_) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::refreshCoprocessorContextStatuses(_) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::swapSuspendedCoprocessorContextWithActive(_) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgradeToAndCall(_) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<CoprocessorContextsCalls>] = &[
                {
                    fn getSuspendedCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getSuspendedCoprocessorContextId,
                            )
                    }
                    getSuspendedCoprocessorContextId
                },
                {
                    fn getVersion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn getCoprocessorTxSendersFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorTxSendersFromContext,
                            )
                    }
                    getCoprocessorTxSendersFromContext
                },
                {
                    fn forceUpdateContextToStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::forceUpdateContextToStatus)
                    }
                    forceUpdateContextToStatus
                },
                {
                    fn refreshCoprocessorContextStatuses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::refreshCoprocessorContextStatuses,
                            )
                    }
                    refreshCoprocessorContextStatuses
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn isCoprocessorContextActiveOrSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::isCoprocessorContextActiveOrSuspended,
                            )
                    }
                    isCoprocessorContextActiveOrSuspended
                },
                {
                    fn getCoprocessorSignersFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorSignersFromContext,
                            )
                    }
                    getCoprocessorSignersFromContext
                },
                {
                    fn getCoprocessorMajorityThresholdFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorMajorityThresholdFromContext,
                            )
                    }
                    getCoprocessorMajorityThresholdFromContext
                },
                {
                    fn initializeFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::initializeFromEmptyProxy)
                    }
                    initializeFromEmptyProxy
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn acceptOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::acceptOwnership)
                    }
                    acceptOwnership
                },
                {
                    fn addCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::addCoprocessorContext)
                    }
                    addCoprocessorContext
                },
                {
                    fn swapSuspendedCoprocessorContextWithActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::swapSuspendedCoprocessorContextWithActive,
                            )
                    }
                    swapSuspendedCoprocessorContextWithActive
                },
                {
                    fn getCoprocessorContextStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorContextStatus)
                    }
                    getCoprocessorContextStatus
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(CoprocessorContextsCalls::owner)
                    }
                    owner
                },
                {
                    fn getCoprocessorDeactivatedBlockTimestampFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorDeactivatedBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorDeactivatedBlockTimestampFromContext
                },
                {
                    fn getActiveCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContextId)
                    }
                    getActiveCoprocessorContextId
                },
                {
                    fn checkIsCoprocessorSignerFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::checkIsCoprocessorSignerFromContext,
                            )
                    }
                    checkIsCoprocessorSignerFromContext
                },
                {
                    fn getCoprocessorActivationBlockTimestampFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorActivationBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorActivationBlockTimestampFromContext
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn getPreActivationCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getPreActivationCoprocessorContextId,
                            )
                    }
                    getPreActivationCoprocessorContextId
                },
                {
                    fn getCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorFromContext)
                    }
                    getCoprocessorFromContext
                },
                {
                    fn pendingOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <pendingOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::pendingOwner)
                    }
                    pendingOwner
                },
                {
                    fn checkIsCoprocessorTxSenderFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::checkIsCoprocessorTxSenderFromContext,
                            )
                    }
                    checkIsCoprocessorTxSenderFromContext
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn getActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContext)
                    }
                    getActiveCoprocessorContext
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<CoprocessorContextsCalls>] = &[
                {
                    fn getSuspendedCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getSuspendedCoprocessorContextId,
                            )
                    }
                    getSuspendedCoprocessorContextId
                },
                {
                    fn getVersion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn getCoprocessorTxSendersFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorTxSendersFromContext,
                            )
                    }
                    getCoprocessorTxSendersFromContext
                },
                {
                    fn forceUpdateContextToStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::forceUpdateContextToStatus)
                    }
                    forceUpdateContextToStatus
                },
                {
                    fn refreshCoprocessorContextStatuses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::refreshCoprocessorContextStatuses,
                            )
                    }
                    refreshCoprocessorContextStatuses
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn isCoprocessorContextActiveOrSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::isCoprocessorContextActiveOrSuspended,
                            )
                    }
                    isCoprocessorContextActiveOrSuspended
                },
                {
                    fn getCoprocessorSignersFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorSignersFromContext,
                            )
                    }
                    getCoprocessorSignersFromContext
                },
                {
                    fn getCoprocessorMajorityThresholdFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorMajorityThresholdFromContext,
                            )
                    }
                    getCoprocessorMajorityThresholdFromContext
                },
                {
                    fn initializeFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::initializeFromEmptyProxy)
                    }
                    initializeFromEmptyProxy
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn acceptOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::acceptOwnership)
                    }
                    acceptOwnership
                },
                {
                    fn addCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::addCoprocessorContext)
                    }
                    addCoprocessorContext
                },
                {
                    fn swapSuspendedCoprocessorContextWithActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::swapSuspendedCoprocessorContextWithActive,
                            )
                    }
                    swapSuspendedCoprocessorContextWithActive
                },
                {
                    fn getCoprocessorContextStatus(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorContextStatus)
                    }
                    getCoprocessorContextStatus
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::owner)
                    }
                    owner
                },
                {
                    fn getCoprocessorDeactivatedBlockTimestampFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorDeactivatedBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorDeactivatedBlockTimestampFromContext
                },
                {
                    fn getActiveCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContextId)
                    }
                    getActiveCoprocessorContextId
                },
                {
                    fn checkIsCoprocessorSignerFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::checkIsCoprocessorSignerFromContext,
                            )
                    }
                    checkIsCoprocessorSignerFromContext
                },
                {
                    fn getCoprocessorActivationBlockTimestampFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorActivationBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorActivationBlockTimestampFromContext
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn getPreActivationCoprocessorContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::getPreActivationCoprocessorContextId,
                            )
                    }
                    getPreActivationCoprocessorContextId
                },
                {
                    fn getCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorFromContext)
                    }
                    getCoprocessorFromContext
                },
                {
                    fn pendingOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <pendingOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::pendingOwner)
                    }
                    pendingOwner
                },
                {
                    fn checkIsCoprocessorTxSenderFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsCalls::checkIsCoprocessorTxSenderFromContext,
                            )
                    }
                    checkIsCoprocessorTxSenderFromContext
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn getActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContext)
                    }
                    getActiveCoprocessorContext
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::acceptOwnership(inner) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addCoprocessorContext(inner) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::checkIsCoprocessorSignerFromContext(inner) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::checkIsCoprocessorTxSenderFromContext(inner) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::forceUpdateContextToStatus(inner) => {
                    <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveCoprocessorContext(inner) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveCoprocessorContextId(inner) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(inner) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorContextStatus(inner) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(inner) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorFromContext(inner) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorMajorityThresholdFromContext(inner) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorSignersFromContext(inner) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorTxSendersFromContext(inner) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPreActivationCoprocessorContextId(inner) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSuspendedCoprocessorContextId(inner) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initializeFromEmptyProxy(inner) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCoprocessorContextActiveOrSuspended(inner) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pendingOwner(inner) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::refreshCoprocessorContextStatuses(inner) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::swapSuspendedCoprocessorContextWithActive(inner) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::acceptOwnership(inner) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addCoprocessorContext(inner) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkIsCoprocessorSignerFromContext(inner) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkIsCoprocessorTxSenderFromContext(inner) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::forceUpdateContextToStatus(inner) => {
                    <forceUpdateContextToStatusCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveCoprocessorContext(inner) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveCoprocessorContextId(inner) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(inner) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorContextStatus(inner) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(inner) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorFromContext(inner) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorMajorityThresholdFromContext(inner) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorSignersFromContext(inner) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorTxSendersFromContext(inner) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPreActivationCoprocessorContextId(inner) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSuspendedCoprocessorContextId(inner) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initializeFromEmptyProxy(inner) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCoprocessorContextActiveOrSuspended(inner) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pendingOwner(inner) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::refreshCoprocessorContextStatuses(inner) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::swapSuspendedCoprocessorContextWithActive(inner) => {
                    <swapSuspendedCoprocessorContextWithActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`CoprocessorContexts`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum CoprocessorContextsErrors {
        #[allow(missing_docs)]
        AddressEmptyCode(AddressEmptyCode),
        #[allow(missing_docs)]
        ContextAlreadyExists(ContextAlreadyExists),
        #[allow(missing_docs)]
        ContextDoesNotExist(ContextDoesNotExist),
        #[allow(missing_docs)]
        ContextIsActive(ContextIsActive),
        #[allow(missing_docs)]
        ContextIsGenerating(ContextIsGenerating),
        #[allow(missing_docs)]
        ContextNotActive(ContextNotActive),
        #[allow(missing_docs)]
        ContextNotGenerated(ContextNotGenerated),
        #[allow(missing_docs)]
        ContextNotPreActivatedOrSuspended(ContextNotPreActivatedOrSuspended),
        #[allow(missing_docs)]
        ContextNotSuspended(ContextNotSuspended),
        #[allow(missing_docs)]
        CoprocessorContextNotInitialized(CoprocessorContextNotInitialized),
        #[allow(missing_docs)]
        CoprocessorSignerAddressesNotUnique(CoprocessorSignerAddressesNotUnique),
        #[allow(missing_docs)]
        CoprocessorTxSenderAddressesNotUnique(CoprocessorTxSenderAddressesNotUnique),
        #[allow(missing_docs)]
        ERC1967InvalidImplementation(ERC1967InvalidImplementation),
        #[allow(missing_docs)]
        ERC1967NonPayable(ERC1967NonPayable),
        #[allow(missing_docs)]
        EmptyCoprocessors(EmptyCoprocessors),
        #[allow(missing_docs)]
        FailedCall(FailedCall),
        #[allow(missing_docs)]
        InvalidContextStatusForceUpdate(InvalidContextStatusForceUpdate),
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        InvalidNullContextId(InvalidNullContextId),
        #[allow(missing_docs)]
        NoActiveCoprocessorContext(NoActiveCoprocessorContext),
        #[allow(missing_docs)]
        NoPreActivationCoprocessorContext(NoPreActivationCoprocessorContext),
        #[allow(missing_docs)]
        NoSuspendedCoprocessorContext(NoSuspendedCoprocessorContext),
        #[allow(missing_docs)]
        NotCoprocessorFromContext(NotCoprocessorFromContext),
        #[allow(missing_docs)]
        NotCoprocessorSignerFromContext(NotCoprocessorSignerFromContext),
        #[allow(missing_docs)]
        NotCoprocessorTxSenderFromContext(NotCoprocessorTxSenderFromContext),
        #[allow(missing_docs)]
        NotGatewayOwner(NotGatewayOwner),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        NotInitializingFromEmptyProxy(NotInitializingFromEmptyProxy),
        #[allow(missing_docs)]
        NullCoprocessorSignerAddress(NullCoprocessorSignerAddress),
        #[allow(missing_docs)]
        NullCoprocessorTxSenderAddress(NullCoprocessorTxSenderAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        PreActivationContextOngoing(PreActivationContextOngoing),
        #[allow(missing_docs)]
        SuspendedContextOngoing(SuspendedContextOngoing),
        #[allow(missing_docs)]
        UUPSUnauthorizedCallContext(UUPSUnauthorizedCallContext),
        #[allow(missing_docs)]
        UUPSUnsupportedProxiableUUID(UUPSUnsupportedProxiableUUID),
    }
    #[automatically_derived]
    impl CoprocessorContextsErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 101u8, 147u8, 234u8],
            [13u8, 221u8, 20u8, 202u8],
            [14u8, 86u8, 207u8, 61u8],
            [17u8, 140u8, 218u8, 167u8],
            [18u8, 180u8, 158u8, 61u8],
            [30u8, 79u8, 189u8, 247u8],
            [33u8, 251u8, 8u8, 249u8],
            [41u8, 169u8, 147u8, 193u8],
            [51u8, 20u8, 134u8, 179u8],
            [74u8, 108u8, 89u8, 116u8],
            [76u8, 156u8, 140u8, 227u8],
            [85u8, 79u8, 140u8, 95u8],
            [97u8, 84u8, 76u8, 252u8],
            [100u8, 213u8, 39u8, 89u8],
            [102u8, 83u8, 246u8, 215u8],
            [111u8, 79u8, 115u8, 31u8],
            [112u8, 34u8, 236u8, 65u8],
            [119u8, 191u8, 88u8, 70u8],
            [138u8, 240u8, 130u8, 239u8],
            [153u8, 150u8, 179u8, 21u8],
            [158u8, 219u8, 120u8, 97u8],
            [170u8, 29u8, 73u8, 164u8],
            [171u8, 249u8, 231u8, 176u8],
            [179u8, 152u8, 151u8, 159u8],
            [185u8, 232u8, 97u8, 178u8],
            [192u8, 181u8, 238u8, 102u8],
            [195u8, 18u8, 231u8, 62u8],
            [196u8, 112u8, 192u8, 34u8],
            [200u8, 38u8, 225u8, 162u8],
            [203u8, 23u8, 183u8, 165u8],
            [205u8, 73u8, 78u8, 73u8],
            [214u8, 189u8, 162u8, 117u8],
            [215u8, 230u8, 188u8, 248u8],
            [224u8, 124u8, 141u8, 186u8],
            [240u8, 190u8, 214u8, 143u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CoprocessorContextsErrors {
        const NAME: &'static str = "CoprocessorContextsErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 36usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressEmptyCode(_) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextAlreadyExists(_) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextDoesNotExist(_) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextIsActive(_) => {
                    <ContextIsActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextIsGenerating(_) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotActive(_) => {
                    <ContextNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotGenerated(_) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotPreActivatedOrSuspended(_) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotSuspended(_) => {
                    <ContextNotSuspended as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorContextNotInitialized(_) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorSignerAddressesNotUnique(_) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorTxSenderAddressesNotUnique(_) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967InvalidImplementation(_) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967NonPayable(_) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyCoprocessors(_) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedCall(_) => {
                    <FailedCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidContextStatusForceUpdate(_) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidNullContextId(_) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoActiveCoprocessorContext(_) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoPreActivationCoprocessorContext(_) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoSuspendedCoprocessorContext(_) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorFromContext(_) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorSignerFromContext(_) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorTxSenderFromContext(_) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotGatewayOwner(_) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializingFromEmptyProxy(_) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NullCoprocessorSignerAddress(_) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NullCoprocessorTxSenderAddress(_) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PreActivationContextOngoing(_) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SuspendedContextOngoing(_) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnauthorizedCallContext(_) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnsupportedProxiableUUID(_) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<CoprocessorContextsErrors>] = &[
                {
                    fn NoActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NoActiveCoprocessorContext)
                    }
                    NoActiveCoprocessorContext
                },
                {
                    fn ContextIsGenerating(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsGenerating as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextIsGenerating)
                    }
                    ContextIsGenerating
                },
                {
                    fn NotGatewayOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotGatewayOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotGatewayOwner)
                    }
                    NotGatewayOwner
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn ContextNotPreActivatedOrSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::ContextNotPreActivatedOrSuspended,
                            )
                    }
                    ContextNotPreActivatedOrSuspended
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn NoSuspendedCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NoSuspendedCoprocessorContext,
                            )
                    }
                    NoSuspendedCoprocessorContext
                },
                {
                    fn NotCoprocessorTxSenderFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NotCoprocessorTxSenderFromContext,
                            )
                    }
                    NotCoprocessorTxSenderFromContext
                },
                {
                    fn ContextNotActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotActive)
                    }
                    ContextNotActive
                },
                {
                    fn NullCoprocessorSignerAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NullCoprocessorSignerAddress)
                    }
                    NullCoprocessorSignerAddress
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn NotCoprocessorSignerFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NotCoprocessorSignerFromContext,
                            )
                    }
                    NotCoprocessorSignerFromContext
                },
                {
                    fn ContextDoesNotExist(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextDoesNotExist)
                    }
                    ContextDoesNotExist
                },
                {
                    fn CoprocessorTxSenderAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorTxSenderAddressesNotUnique,
                            )
                    }
                    CoprocessorTxSenderAddressesNotUnique
                },
                {
                    fn ContextAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextAlreadyExists)
                    }
                    ContextAlreadyExists
                },
                {
                    fn NotInitializingFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NotInitializingFromEmptyProxy,
                            )
                    }
                    NotInitializingFromEmptyProxy
                },
                {
                    fn SuspendedContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::SuspendedContextOngoing)
                    }
                    SuspendedContextOngoing
                },
                {
                    fn ContextNotSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotSuspended as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotSuspended)
                    }
                    ContextNotSuspended
                },
                {
                    fn EmptyCoprocessors(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <EmptyCoprocessors as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::EmptyCoprocessors)
                    }
                    EmptyCoprocessors
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn NullCoprocessorTxSenderAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NullCoprocessorTxSenderAddress,
                            )
                    }
                    NullCoprocessorTxSenderAddress
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn CoprocessorContextNotInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorContextNotInitialized,
                            )
                    }
                    CoprocessorContextNotInitialized
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn NoPreActivationCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NoPreActivationCoprocessorContext,
                            )
                    }
                    NoPreActivationCoprocessorContext
                },
                {
                    fn ContextNotGenerated(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotGenerated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotGenerated)
                    }
                    ContextNotGenerated
                },
                {
                    fn NotCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotCoprocessorFromContext)
                    }
                    NotCoprocessorFromContext
                },
                {
                    fn PreActivationContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::PreActivationContextOngoing)
                    }
                    PreActivationContextOngoing
                },
                {
                    fn CoprocessorSignerAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorSignerAddressesNotUnique,
                            )
                    }
                    CoprocessorSignerAddressesNotUnique
                },
                {
                    fn InvalidNullContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidNullContextId as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::InvalidNullContextId)
                    }
                    InvalidNullContextId
                },
                {
                    fn ContextIsActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextIsActive)
                    }
                    ContextIsActive
                },
                {
                    fn FailedCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(CoprocessorContextsErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn InvalidContextStatusForceUpdate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::InvalidContextStatusForceUpdate,
                            )
                    }
                    InvalidContextStatusForceUpdate
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(CoprocessorContextsErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<CoprocessorContextsErrors>] = &[
                {
                    fn NoActiveCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NoActiveCoprocessorContext)
                    }
                    NoActiveCoprocessorContext
                },
                {
                    fn ContextIsGenerating(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsGenerating as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextIsGenerating)
                    }
                    ContextIsGenerating
                },
                {
                    fn NotGatewayOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotGatewayOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotGatewayOwner)
                    }
                    NotGatewayOwner
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn ContextNotPreActivatedOrSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::ContextNotPreActivatedOrSuspended,
                            )
                    }
                    ContextNotPreActivatedOrSuspended
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn NoSuspendedCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NoSuspendedCoprocessorContext,
                            )
                    }
                    NoSuspendedCoprocessorContext
                },
                {
                    fn NotCoprocessorTxSenderFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NotCoprocessorTxSenderFromContext,
                            )
                    }
                    NotCoprocessorTxSenderFromContext
                },
                {
                    fn ContextNotActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotActive as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotActive)
                    }
                    ContextNotActive
                },
                {
                    fn NullCoprocessorSignerAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NullCoprocessorSignerAddress)
                    }
                    NullCoprocessorSignerAddress
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn NotCoprocessorSignerFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NotCoprocessorSignerFromContext,
                            )
                    }
                    NotCoprocessorSignerFromContext
                },
                {
                    fn ContextDoesNotExist(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextDoesNotExist)
                    }
                    ContextDoesNotExist
                },
                {
                    fn CoprocessorTxSenderAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorTxSenderAddressesNotUnique,
                            )
                    }
                    CoprocessorTxSenderAddressesNotUnique
                },
                {
                    fn ContextAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextAlreadyExists)
                    }
                    ContextAlreadyExists
                },
                {
                    fn NotInitializingFromEmptyProxy(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NotInitializingFromEmptyProxy,
                            )
                    }
                    NotInitializingFromEmptyProxy
                },
                {
                    fn SuspendedContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::SuspendedContextOngoing)
                    }
                    SuspendedContextOngoing
                },
                {
                    fn ContextNotSuspended(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotSuspended as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotSuspended)
                    }
                    ContextNotSuspended
                },
                {
                    fn EmptyCoprocessors(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <EmptyCoprocessors as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::EmptyCoprocessors)
                    }
                    EmptyCoprocessors
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn NullCoprocessorTxSenderAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NullCoprocessorTxSenderAddress,
                            )
                    }
                    NullCoprocessorTxSenderAddress
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn CoprocessorContextNotInitialized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorContextNotInitialized,
                            )
                    }
                    CoprocessorContextNotInitialized
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn NoPreActivationCoprocessorContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::NoPreActivationCoprocessorContext,
                            )
                    }
                    NoPreActivationCoprocessorContext
                },
                {
                    fn ContextNotGenerated(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotGenerated as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextNotGenerated)
                    }
                    ContextNotGenerated
                },
                {
                    fn NotCoprocessorFromContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotCoprocessorFromContext)
                    }
                    NotCoprocessorFromContext
                },
                {
                    fn PreActivationContextOngoing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::PreActivationContextOngoing)
                    }
                    PreActivationContextOngoing
                },
                {
                    fn CoprocessorSignerAddressesNotUnique(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorSignerAddressesNotUnique,
                            )
                    }
                    CoprocessorSignerAddressesNotUnique
                },
                {
                    fn InvalidNullContextId(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidNullContextId as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::InvalidNullContextId)
                    }
                    InvalidNullContextId
                },
                {
                    fn ContextIsActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsActive as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::ContextIsActive)
                    }
                    ContextIsActive
                },
                {
                    fn FailedCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn InvalidContextStatusForceUpdate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                CoprocessorContextsErrors::InvalidContextStatusForceUpdate,
                            )
                    }
                    InvalidContextStatusForceUpdate
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(CoprocessorContextsErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextAlreadyExists(inner) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextDoesNotExist(inner) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextIsActive(inner) => {
                    <ContextIsActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextIsGenerating(inner) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotActive(inner) => {
                    <ContextNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotGenerated(inner) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotPreActivatedOrSuspended(inner) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotSuspended(inner) => {
                    <ContextNotSuspended as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorContextNotInitialized(inner) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorSignerAddressesNotUnique(inner) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorTxSenderAddressesNotUnique(inner) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyCoprocessors(inner) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidContextStatusForceUpdate(inner) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidNullContextId(inner) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoActiveCoprocessorContext(inner) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoPreActivationCoprocessorContext(inner) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoSuspendedCoprocessorContext(inner) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorFromContext(inner) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorSignerFromContext(inner) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorTxSenderFromContext(inner) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotGatewayOwner(inner) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializingFromEmptyProxy(inner) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NullCoprocessorSignerAddress(inner) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NullCoprocessorTxSenderAddress(inner) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PreActivationContextOngoing(inner) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SuspendedContextOngoing(inner) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextAlreadyExists(inner) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextDoesNotExist(inner) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextIsActive(inner) => {
                    <ContextIsActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextIsGenerating(inner) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotActive(inner) => {
                    <ContextNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotGenerated(inner) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotPreActivatedOrSuspended(inner) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotSuspended(inner) => {
                    <ContextNotSuspended as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorContextNotInitialized(inner) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorSignerAddressesNotUnique(inner) => {
                    <CoprocessorSignerAddressesNotUnique as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorTxSenderAddressesNotUnique(inner) => {
                    <CoprocessorTxSenderAddressesNotUnique as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyCoprocessors(inner) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::InvalidContextStatusForceUpdate(inner) => {
                    <InvalidContextStatusForceUpdate as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidNullContextId(inner) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoActiveCoprocessorContext(inner) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoPreActivationCoprocessorContext(inner) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoSuspendedCoprocessorContext(inner) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorFromContext(inner) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorSignerFromContext(inner) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorTxSenderFromContext(inner) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotGatewayOwner(inner) => {
                    <NotGatewayOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializingFromEmptyProxy(inner) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NullCoprocessorSignerAddress(inner) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NullCoprocessorTxSenderAddress(inner) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PreActivationContextOngoing(inner) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SuspendedContextOngoing(inner) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`CoprocessorContexts`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum CoprocessorContextsEvents {
        #[allow(missing_docs)]
        ActivateCoprocessorContext(ActivateCoprocessorContext),
        #[allow(missing_docs)]
        CompromiseCoprocessorContext(CompromiseCoprocessorContext),
        #[allow(missing_docs)]
        DeactivateCoprocessorContext(DeactivateCoprocessorContext),
        #[allow(missing_docs)]
        DestroyCoprocessorContext(DestroyCoprocessorContext),
        #[allow(missing_docs)]
        InitializeCoprocessorContexts(InitializeCoprocessorContexts),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        NewCoprocessorContext(NewCoprocessorContext),
        #[allow(missing_docs)]
        OwnershipTransferStarted(OwnershipTransferStarted),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        PreActivateCoprocessorContext(PreActivateCoprocessorContext),
        #[allow(missing_docs)]
        SuspendCoprocessorContext(SuspendCoprocessorContext),
        #[allow(missing_docs)]
        Upgraded(Upgraded),
    }
    #[automatically_derived]
    impl CoprocessorContextsEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                19u8, 197u8, 253u8, 99u8, 28u8, 160u8, 49u8, 85u8, 47u8, 233u8, 227u8,
                141u8, 145u8, 25u8, 16u8, 165u8, 152u8, 15u8, 102u8, 8u8, 238u8, 163u8,
                35u8, 105u8, 110u8, 4u8, 219u8, 15u8, 236u8, 12u8, 149u8, 87u8,
            ],
            [
                27u8, 170u8, 8u8, 216u8, 222u8, 24u8, 232u8, 226u8, 40u8, 118u8, 145u8,
                177u8, 48u8, 151u8, 72u8, 1u8, 9u8, 129u8, 235u8, 223u8, 209u8, 42u8,
                23u8, 61u8, 133u8, 116u8, 101u8, 117u8, 72u8, 165u8, 40u8, 152u8,
            ],
            [
                43u8, 1u8, 136u8, 252u8, 75u8, 237u8, 71u8, 30u8, 226u8, 22u8, 220u8,
                108u8, 185u8, 101u8, 11u8, 235u8, 40u8, 136u8, 146u8, 3u8, 78u8, 190u8,
                231u8, 48u8, 27u8, 50u8, 57u8, 26u8, 221u8, 42u8, 102u8, 184u8,
            ],
            [
                48u8, 128u8, 242u8, 184u8, 13u8, 218u8, 71u8, 72u8, 202u8, 41u8, 38u8,
                166u8, 65u8, 250u8, 80u8, 7u8, 115u8, 80u8, 88u8, 220u8, 95u8, 90u8,
                178u8, 89u8, 78u8, 236u8, 167u8, 65u8, 151u8, 163u8, 172u8, 204u8,
            ],
            [
                56u8, 209u8, 107u8, 140u8, 172u8, 34u8, 217u8, 159u8, 199u8, 193u8, 36u8,
                185u8, 205u8, 13u8, 226u8, 211u8, 250u8, 31u8, 174u8, 244u8, 32u8, 191u8,
                231u8, 145u8, 216u8, 195u8, 98u8, 215u8, 101u8, 226u8, 39u8, 0u8,
            ],
            [
                108u8, 140u8, 4u8, 201u8, 254u8, 163u8, 55u8, 114u8, 11u8, 125u8, 250u8,
                220u8, 163u8, 101u8, 232u8, 80u8, 3u8, 81u8, 20u8, 253u8, 8u8, 27u8,
                88u8, 208u8, 48u8, 175u8, 190u8, 139u8, 93u8, 195u8, 190u8, 113u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
            [
                175u8, 88u8, 161u8, 138u8, 78u8, 65u8, 89u8, 250u8, 112u8, 108u8, 13u8,
                78u8, 15u8, 218u8, 176u8, 147u8, 15u8, 151u8, 103u8, 147u8, 25u8, 205u8,
                219u8, 201u8, 201u8, 25u8, 155u8, 12u8, 209u8, 4u8, 182u8, 239u8,
            ],
            [
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ],
            [
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ],
            [
                238u8, 126u8, 248u8, 57u8, 99u8, 65u8, 113u8, 37u8, 210u8, 116u8, 48u8,
                120u8, 159u8, 198u8, 233u8, 65u8, 148u8, 56u8, 30u8, 130u8, 195u8, 205u8,
                166u8, 130u8, 96u8, 208u8, 231u8, 207u8, 195u8, 30u8, 175u8, 33u8,
            ],
            [
                242u8, 11u8, 41u8, 152u8, 4u8, 201u8, 193u8, 214u8, 218u8, 59u8, 130u8,
                65u8, 76u8, 122u8, 160u8, 168u8, 69u8, 205u8, 186u8, 186u8, 226u8, 217u8,
                14u8, 70u8, 227u8, 96u8, 163u8, 121u8, 167u8, 123u8, 123u8, 229u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for CoprocessorContextsEvents {
        const NAME: &'static str = "CoprocessorContextsEvents";
        const COUNT: usize = 12usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ActivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ActivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ActivateCoprocessorContext)
                }
                Some(
                    <CompromiseCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CompromiseCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CompromiseCoprocessorContext)
                }
                Some(
                    <DeactivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DeactivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DeactivateCoprocessorContext)
                }
                Some(
                    <DestroyCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DestroyCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DestroyCoprocessorContext)
                }
                Some(
                    <InitializeCoprocessorContexts as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <InitializeCoprocessorContexts as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::InitializeCoprocessorContexts)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <NewCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NewCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::NewCoprocessorContext)
                }
                Some(
                    <OwnershipTransferStarted as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferStarted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::OwnershipTransferStarted)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <PreActivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreActivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PreActivateCoprocessorContext)
                }
                Some(
                    <SuspendCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SuspendCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SuspendCoprocessorContext)
                }
                Some(<Upgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Upgraded as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Upgraded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for CoprocessorContextsEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CompromiseCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DeactivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DestroyCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::InitializeCoprocessorContexts(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NewCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferStarted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SuspendCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CompromiseCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DeactivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DestroyCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::InitializeCoprocessorContexts(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NewCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferStarted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SuspendCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`CoprocessorContexts`](self) contract instance.

See the [wrapper's documentation](`CoprocessorContextsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> CoprocessorContextsInstance<P, N> {
        CoprocessorContextsInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<CoprocessorContextsInstance<P, N>>,
    > {
        CoprocessorContextsInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        CoprocessorContextsInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`CoprocessorContexts`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`CoprocessorContexts`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct CoprocessorContextsInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for CoprocessorContextsInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("CoprocessorContextsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`CoprocessorContexts`](self) contract instance.

See the [wrapper's documentation](`CoprocessorContextsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<CoprocessorContextsInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> CoprocessorContextsInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> CoprocessorContextsInstance<P, N> {
            CoprocessorContextsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`UPGRADE_INTERFACE_VERSION`] function.
        pub fn UPGRADE_INTERFACE_VERSION(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, UPGRADE_INTERFACE_VERSIONCall, N> {
            self.call_builder(&UPGRADE_INTERFACE_VERSIONCall)
        }
        ///Creates a new call builder for the [`acceptOwnership`] function.
        pub fn acceptOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, acceptOwnershipCall, N> {
            self.call_builder(&acceptOwnershipCall)
        }
        ///Creates a new call builder for the [`addCoprocessorContext`] function.
        pub fn addCoprocessorContext(
            &self,
            featureSet: alloy::sol_types::private::primitives::aliases::U256,
            coprocessors: alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
            timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<&P, addCoprocessorContextCall, N> {
            self.call_builder(
                &addCoprocessorContextCall {
                    featureSet,
                    coprocessors,
                    timePeriods,
                },
            )
        }
        ///Creates a new call builder for the [`checkIsCoprocessorSignerFromContext`] function.
        pub fn checkIsCoprocessorSignerFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            signerAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            checkIsCoprocessorSignerFromContextCall,
            N,
        > {
            self.call_builder(
                &checkIsCoprocessorSignerFromContextCall {
                    contextId,
                    signerAddress,
                },
            )
        }
        ///Creates a new call builder for the [`checkIsCoprocessorTxSenderFromContext`] function.
        pub fn checkIsCoprocessorTxSenderFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            txSenderAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            checkIsCoprocessorTxSenderFromContextCall,
            N,
        > {
            self.call_builder(
                &checkIsCoprocessorTxSenderFromContextCall {
                    contextId,
                    txSenderAddress,
                },
            )
        }
        ///Creates a new call builder for the [`forceUpdateContextToStatus`] function.
        pub fn forceUpdateContextToStatus(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            status: <ContextStatus as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<&P, forceUpdateContextToStatusCall, N> {
            self.call_builder(
                &forceUpdateContextToStatusCall {
                    contextId,
                    status,
                },
            )
        }
        ///Creates a new call builder for the [`getActiveCoprocessorContext`] function.
        pub fn getActiveCoprocessorContext(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveCoprocessorContextCall, N> {
            self.call_builder(&getActiveCoprocessorContextCall)
        }
        ///Creates a new call builder for the [`getActiveCoprocessorContextId`] function.
        pub fn getActiveCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveCoprocessorContextIdCall, N> {
            self.call_builder(&getActiveCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getCoprocessorActivationBlockTimestampFromContext`] function.
        pub fn getCoprocessorActivationBlockTimestampFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorActivationBlockTimestampFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorActivationBlockTimestampFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorContextStatus`] function.
        pub fn getCoprocessorContextStatus(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorContextStatusCall, N> {
            self.call_builder(
                &getCoprocessorContextStatusCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorDeactivatedBlockTimestampFromContext`] function.
        pub fn getCoprocessorDeactivatedBlockTimestampFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorDeactivatedBlockTimestampFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorDeactivatedBlockTimestampFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorFromContext`] function.
        pub fn getCoprocessorFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            coprocessorTxSenderAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getCoprocessorFromContextCall, N> {
            self.call_builder(
                &getCoprocessorFromContextCall {
                    contextId,
                    coprocessorTxSenderAddress,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorMajorityThresholdFromContext`] function.
        pub fn getCoprocessorMajorityThresholdFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorMajorityThresholdFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorMajorityThresholdFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorSignersFromContext`] function.
        pub fn getCoprocessorSignersFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorSignersFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorSignersFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorTxSendersFromContext`] function.
        pub fn getCoprocessorTxSendersFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getCoprocessorTxSendersFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorTxSendersFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getPreActivationCoprocessorContextId`] function.
        pub fn getPreActivationCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getPreActivationCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(&getPreActivationCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getSuspendedCoprocessorContextId`] function.
        pub fn getSuspendedCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            getSuspendedCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(&getSuspendedCoprocessorContextIdCall)
        }
        ///Creates a new call builder for the [`getVersion`] function.
        pub fn getVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getVersionCall, N> {
            self.call_builder(&getVersionCall)
        }
        ///Creates a new call builder for the [`initializeFromEmptyProxy`] function.
        pub fn initializeFromEmptyProxy(
            &self,
            initialFeatureSet: alloy::sol_types::private::primitives::aliases::U256,
            initialCoprocessors: alloy::sol_types::private::Vec<
                <CoprocessorV2 as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, initializeFromEmptyProxyCall, N> {
            self.call_builder(
                &initializeFromEmptyProxyCall {
                    initialFeatureSet,
                    initialCoprocessors,
                },
            )
        }
        ///Creates a new call builder for the [`isCoprocessorContextActiveOrSuspended`] function.
        pub fn isCoprocessorContextActiveOrSuspended(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            isCoprocessorContextActiveOrSuspendedCall,
            N,
        > {
            self.call_builder(
                &isCoprocessorContextActiveOrSuspendedCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<&P, ownerCall, N> {
            self.call_builder(&ownerCall)
        }
        ///Creates a new call builder for the [`pendingOwner`] function.
        pub fn pendingOwner(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, pendingOwnerCall, N> {
            self.call_builder(&pendingOwnerCall)
        }
        ///Creates a new call builder for the [`proxiableUUID`] function.
        pub fn proxiableUUID(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, proxiableUUIDCall, N> {
            self.call_builder(&proxiableUUIDCall)
        }
        ///Creates a new call builder for the [`refreshCoprocessorContextStatuses`] function.
        pub fn refreshCoprocessorContextStatuses(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            refreshCoprocessorContextStatusesCall,
            N,
        > {
            self.call_builder(&refreshCoprocessorContextStatusesCall)
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall)
        }
        ///Creates a new call builder for the [`swapSuspendedCoprocessorContextWithActive`] function.
        pub fn swapSuspendedCoprocessorContextWithActive(
            &self,
            suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            swapSuspendedCoprocessorContextWithActiveCall,
            N,
        > {
            self.call_builder(
                &swapSuspendedCoprocessorContextWithActiveCall {
                    suspendedTimePeriod,
                },
            )
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`upgradeToAndCall`] function.
        pub fn upgradeToAndCall(
            &self,
            newImplementation: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, upgradeToAndCallCall, N> {
            self.call_builder(
                &upgradeToAndCallCall {
                    newImplementation,
                    data,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ActivateCoprocessorContext`] event.
        pub fn ActivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, ActivateCoprocessorContext, N> {
            self.event_filter::<ActivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`CompromiseCoprocessorContext`] event.
        pub fn CompromiseCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, CompromiseCoprocessorContext, N> {
            self.event_filter::<CompromiseCoprocessorContext>()
        }
        ///Creates a new event filter for the [`DeactivateCoprocessorContext`] event.
        pub fn DeactivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, DeactivateCoprocessorContext, N> {
            self.event_filter::<DeactivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`DestroyCoprocessorContext`] event.
        pub fn DestroyCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, DestroyCoprocessorContext, N> {
            self.event_filter::<DestroyCoprocessorContext>()
        }
        ///Creates a new event filter for the [`InitializeCoprocessorContexts`] event.
        pub fn InitializeCoprocessorContexts_filter(
            &self,
        ) -> alloy_contract::Event<&P, InitializeCoprocessorContexts, N> {
            self.event_filter::<InitializeCoprocessorContexts>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(&self) -> alloy_contract::Event<&P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`NewCoprocessorContext`] event.
        pub fn NewCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, NewCoprocessorContext, N> {
            self.event_filter::<NewCoprocessorContext>()
        }
        ///Creates a new event filter for the [`OwnershipTransferStarted`] event.
        pub fn OwnershipTransferStarted_filter(
            &self,
        ) -> alloy_contract::Event<&P, OwnershipTransferStarted, N> {
            self.event_filter::<OwnershipTransferStarted>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<&P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`PreActivateCoprocessorContext`] event.
        pub fn PreActivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, PreActivateCoprocessorContext, N> {
            self.event_filter::<PreActivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`SuspendCoprocessorContext`] event.
        pub fn SuspendCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<&P, SuspendCoprocessorContext, N> {
            self.event_filter::<SuspendCoprocessorContext>()
        }
        ///Creates a new event filter for the [`Upgraded`] event.
        pub fn Upgraded_filter(&self) -> alloy_contract::Event<&P, Upgraded, N> {
            self.event_filter::<Upgraded>()
        }
    }
}
