# Main build workflow that handles both x86 and ARM builds
name: Compile Rust Project and Run Tests

on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        required: true
      build-publish-docs:
        type: boolean
        required: false
        default: false
      runs-on:
        type: string
        required: false
        default: "ubuntu-latest"
      args-tests:
        type: string
        required: false
        default: ""
      run-minio:
        type: boolean
        required: false
        default: false
      run-redis:
        type: boolean
        required: false
        default: false
      run-wasm:
        type: boolean
        required: false
        default: false
      wasm-test-feature:
        type: string
        required: false
        default: "-F wasm_tests"
      package-name:
        type: string
        required: true
      test-coverage:
        type: boolean
        required: false
        default: false
      test-minimum-coverage:
        type: string
        required: false
        default: 0
      npm-release:
        type: boolean
        required: false
        default: false
      app-cache-dir:
        type: string
        required: true
    secrets:
      BLOCKCHAIN_ACTIONS_TOKEN:
        required: true
      NPM_TOKEN:
        required: false
      AWS_ACCESS_KEY_S3_USER:
        required: true
      AWS_SECRET_KEY_S3_USER:
        required: true

env:
  CARGO_TERM_COLOR: always
  DOCKER_BUILD_TEST_CORE_CLIENT: 1
  CARGO_INCREMENTAL: 0
  DOCKER_BUILDKIT: 1
  NPM_TAG: ""
  RUST_IMAGE_VERSION: '1.86.0'

jobs:
  compile-rust-unit-tests:
    timeout-minutes: 500
    runs-on: ${{ inputs.runs-on }}
    services:
      redis:
        image: ${{ inputs.run-redis && 'redis/redis-stack:latest' || '' }}
        ports:
          - 6379:6379
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout Project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
          token: ${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}

      # LFS files are needed for backward compatibility tests
      # Install git LFS before checkout does not seem possible on our self-hosted runners, so we
      # need to do it right after and then manually pull LFS files
      - name: Install git-lfs
        run: |
          sudo apt-get update && sudo apt-get -y install git-lfs
          git lfs pull

      - name: Setup Home
        if: "${{ !contains(inputs.runs-on, 'ubuntu') }}"
        run: echo "HOME=/home/ubuntu" >> "${GITHUB_ENV}"

      # Needed to be able to pull some docker images for the simulator test
      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_S3_USER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_S3_USER }}
          aws-region: eu-west-3

      ############################################################################
      # Initialize Docker Buildx for multi-platform builds.
      - name: Set up Docker Buildx
        if: inputs.package-name == 'simulator'
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
        with:
          platforms: linux/amd64,linux/arm64
          buildkitd-flags: --debug


      ############################################################################
      # Rust toolchain setup
      #
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
        with:
          toolchain: ${{ env.RUST_IMAGE_VERSION }}
          components: rustfmt, clippy, llvm-tools-preview
          cache: false

      ############################################################################
      # Setup cache for dockerfile and inject in docker
      #
      - name: Setup Cache
        uses: runs-on/cache@197b09d6da1bf42f673fee18769c794b789a0c7d # v4
        id: cache
        env:
          RUNS_ON_S3_BUCKET_CACHE: gh-actions-cache-eu-west-3
          RUNS_ON_AWS_REGION: eu-west-3
        with:
          path: |
            var-cache-apk
            var-lib-apk
            usr-local-cargo-registry
            usr-local-cargo-git
            usr-local-cargo-bin
            usr-local-cargo-registry-index
            usr-local-cargo-registry-cache
            usr-local-cargo-git-db
            app-${{ inputs.app-cache-dir }}-target
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@5b6db76d1da5c8b307d5d2e0706d266521b710de # v3.1.2
        with:
          cache-map: |
            {
              "var-cache-apk": "/var/cache/apk",
              "var-lib-apk": "/var/lib/apk",
              "usr-local-cargo-registry": "/usr/local/cargo/registry",
              "usr-local-cargo-git": "/usr/local/cargo/git",
              "usr-local-cargo-bin": "/usr/local/cargo/bin",
              "usr-local-cargo-registry-index": "/usr/local/cargo/registry/index",
              "usr-local-cargo-registry-cache": "/usr/local/cargo/registry/cache",
              "usr-local-cargo-git-db": "/usr/local/cargo/git/db",
              "app-${{ inputs.app-cache-dir }}-target": "/app/${{ inputs.app-cache-dir }}/target"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}


      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3.0.0
        with:
          version: "26.x"

      - name: Setup usage of private repo
        run: git config --global url."https://${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}@github.com".insteadOf ssh://git@github.com

      - name: Setup minio
        if: ${{ inputs.run-minio }}
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        run: |
          docker run -d -p 9000:9000 --name minio \
                     -e "MINIO_ACCESS_KEY=${{ env.MINIO_ACCESS_KEY }}" \
                     -e "MINIO_SECRET_KEY=${{ env.MINIO_SECRET_KEY }}" \
                     -v /tmp/data:/data \
                     -v /tmp/config:/root/.minio \
                     minio/minio server /data

      - name: Setup Minio bucket
        if: ${{ inputs.run-minio }}
        env:
          MINIO_ALIAS: testminio
          MINIO_BUCKET: ci-kms-key-test
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          MINIO_REGION: eu-north-1
        run: |
          curl https://dl.min.io/client/mc/release/linux-amd64/mc \
            --create-dirs \
            -o "${HOME}"/minio-binaries/mc

          chmod +x "${HOME}"/minio-binaries/mc
          export PATH="${PATH}:${HOME}/minio-binaries/"

          mc alias set "${{ env.MINIO_ALIAS }}" http://127.0.0.1:9000 "${{ env.MINIO_ACCESS_KEY }}" "${{ env.MINIO_SECRET_KEY }}"
          mc mb "${{ env.MINIO_ALIAS }}"/"${{ env.MINIO_BUCKET }}"
          mc anonymous set public "${{ env.MINIO_ALIAS }}"/"${{ env.MINIO_BUCKET }}"

      - name: Formatting
        run: cargo fmt -- --check  # TODO: use --all option once gateway bindings are no longer used via submodules

      - name: Linting
        run: cargo clippy --all-targets --all-features --package ${{inputs.package-name}} -- -D warnings

      # Test execution
      - name: Run Tests
        if: ${{ ! inputs.test-coverage || !contains(github.event.pull_request.labels.*.name, 'coverage') }}
        env:
          # some integration tests run docker compose
          # which builds images which need git access
          # building images in every integration test run is bad
          AWS_ACCESS_KEY_ID: "minioadmin"
          AWS_SECRET_ACCESS_KEY: "minioadmin"
          AWS_DEFAULT_REGION: "eu-north-1"
          AWS_ENDPOINT: "http://127.0.0.1:9000"
          BLOCKCHAIN_ACTIONS_TOKEN: ${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
        run: |
          mkdir -p ~/.aws/ &&
          echo "[default]" > ~/.aws/credentials &&
          echo "aws_access_key_id = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials &&
          echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials &&
          cat ~/.aws/credentials &&
          echo "[default]" > ~/.aws/config &&
          echo "output=json" >> ~/.aws/config &&
          echo "region=${AWS_DEFAULT_REGION}" >> ~/.aws/config &&
          echo "endpoint_url=${AWS_ENDPOINT}" >> ~/.aws/config &&
          cat ~/.aws/config &&
          RUST_BACKTRACE=full cargo test ${{ inputs.args-tests }}

      # Coverage reporting
      - name: Run Tests with Coverage
        if: ${{ inputs.test-coverage && contains(github.event.pull_request.labels.*.name, 'coverage') }}
        env:
          # some integration tests run docker compose
          # which builds images which need private git access
          # building images in every integration test run is bad
          BLOCKCHAIN_ACTIONS_TOKEN: ${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
        run: |
          export CARGO_INCREMENTAL=0
          export RUSTFLAGS='-Cinstrument-coverage'
          export LLVM_PROFILE_FILE='cargo-test-%p-%m.profraw'
          cargo test ${{ inputs.args-tests }}
          cargo install grcov
          mkdir coverage
          ~/.cargo/bin/grcov . --binary-path ../../target/debug/deps/ -s . --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o coverage/ -t markdown
          ~/.cargo/bin/grcov . --binary-path ../../target/debug/deps/ -s . --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o ./ -t lcov
          cat coverage/markdown.md
          cat coverage/markdown.md >> "$GITHUB_STEP_SUMMARY"

      - name: Report code coverage
        if: ${{ inputs.test-coverage && contains(github.event.pull_request.labels.*.name, 'coverage') }}
        uses: romeovs/lcov-reporter-action@87a815f34ec27a5826abba44ce09bbc688da58fd # v0.4.0
        with:
          title: ${{inputs.package-name}}-test-coverage
          lcov-file: lcov
          working-directory: ${{ inputs.working-directory }}/

      - name: Check minimum coverage
        if: ${{ inputs.test-coverage && contains(github.event.pull_request.labels.*.name, 'coverage') }}
        uses: VeryGoodOpenSource/very_good_coverage@c953fca3e24a915e111cc6f55f03f756dcb3964c # v3.0.0
        with:
          path: "${{inputs.working-directory}}/lcov"
          min_coverage: ${{ inputs.test-minimum-coverage }}

      # Documentation
      - name: Build Documentation
        if: ${{ inputs.build-publish-docs }}
        run: cargo doc --no-deps

      - name: Deploy to GitHub Pages
        if: ${{ inputs.build-publish-docs }}
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: ${{ inputs.working-directory }}

      # WASM handling
      - name: Install
        if: ${{ inputs.run-wasm }}
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build wasm with tests
        if: ${{ inputs.run-wasm }}
        run: wasm-pack build --target nodejs . --no-default-features ${{ inputs.wasm-test-feature }}

      - name: Install node
        if: ${{ inputs.run-wasm }}
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: 20

      - name: Test wasm
        if: ${{ inputs.run-wasm }}
        run: node --test tests/js

      # NPM package handling
      - name: Set NPM version tag to latest
        if: ${{ !github.event.release.prerelease }}
        run: |
          echo "NPM_TAG=latest" >> "${GITHUB_ENV}"

      - name: Set NPM version tag to prerelease
        if: ${{ github.event.release.prerelease }}
        run: |
          echo "NPM_TAG=prerelease" >> "${GITHUB_ENV}"

      # Node package build and publish
      - name: NPM build node package
        if: ${{ inputs.npm-release }}
        working-directory: ./core/service
        run: |
          rm -rf pkg
          wasm-pack build --target nodejs . --no-default-features
          sed -i 's/"kms"/"node-tkms"/g' pkg/package.json
          echo "# node-tkms" > pkg/README.md

      - name: NPM publish Node package
        if: ${{ inputs.npm-release }}
        uses: JS-DevTools/npm-publish@19c28f1ef146469e409470805ea4279d47c3d35c # v3.1.1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./core/service/pkg/package.json
          dry-run: false
          provenance: false # change to true when repo is public (see #1048)
          tag: ${{ env.NPM_TAG }}

      # Web package build and publish
      - name: NPM build web package
        if: ${{ inputs.npm-release }}
        working-directory: ./core/service
        run: |
          rm -rf pkg
          wasm-pack build --target web . --no-default-features
          sed -i 's/"kms"/"tkms"/g' pkg/package.json
          echo "# tkms" > pkg/README.md

      - name: NPM publish web package
        if: ${{ inputs.npm-release }}
        uses: JS-DevTools/npm-publish@19c28f1ef146469e409470805ea4279d47c3d35c # v3.1.1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./core/service/pkg/package.json
          dry-run: false
          provenance: false # change to true when repo is public (see #1048)
          tag: ${{ env.NPM_TAG }}

      - name: Remove aws credentials file
        run: |
          rm -rf ~/.aws