apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: fhevm-sc-deploy
    app.kubernetes.io/name: {{ .Release.Name }}-config
  name: {{ .Release.Name }}-config
data:
  deploy-contracts.sh: |
    #!/bin/bash
    set -eo pipefail
    
    create_configmap() {
      configmap_name="${1}"
      if [[ -z "$configmap_name" ]]; then
        echo "error: you must supply a configmap name" 1>&2
        exit 1
      fi
      if ! kubectl get configmap ${configmap_name}; then
        kubectl create configmap ${configmap_name}
      else
        echo "skipping: configmap ${configmap_name} already exists" 2>&1
      fi
      {{- range $annotationKey, $annotationValue := $.Values.scDeploy.configmap.annotations }}
      kubectl annotate --overwrite configmap "${configmap_name}" {{ $annotationKey }}={{ $annotationValue | quote }}
      {{- end }}
    }
    add_key_to_configmap() {
      configmap_name="${1}"
      name="${2}"
      value="${3}"
      if [[ -z "$configmap_name" ]]; then
        echo "error: you must supply a configmap name" 1>&2
        exit 1
      fi
      if [[ -z "$name" ]]; then
        echo "error: you must supply an item name" 1>&2
        exit 1
      fi
      if [[ -z "$value" ]]; then
        echo "error: you must supply an item value" 1>&2
        exit 1
      fi
      # Patch configmap to add key if it doesn't already exists
      configmap_value=$(kubectl get configmap "${configmap_name}" -o jsonpath="{.data['${name//./\\.}']}")
      if [[ -n "${configmap_value}" ]]; then
        echo "skipping: ${configmap_name} already contains ${name}:${configmap_value}"
      else
        kubectl patch configmap "${configmap_name}" -p="{\"data\": {\"${name}\": \"${value}\"}}"
      fi
    }
    add_annotation_to_configmap() {
      configmap_name="${1}"
      key="${2}"
      value="${3}"
      if [[ -z "$configmap_name" ]]; then
        echo "error: you must supply a configmap name" 1>&2
        exit 1
      fi
      if [[ -z "$key" ]]; then
        echo "error: you must supply an annotation key" 1>&2
        exit 1
      fi
      if [[ -z "$value" ]]; then
        echo "error: you must supply an annotation value" 1>&2
        exit 1
      fi
    }
    CONFIGMAP_NAME="{{ .Values.scDeploy.configmap.name }}"
    echo "creating kubernetes configmap for smart contract configuration outputs"
    create_configmap "${CONFIGMAP_NAME}"

    {{- if .Values.scDeploy.preventRedeployment }}
    # Prevent smart contract deployment if already done for current version
    if [[ "$DEPLOYED_SMART_CONTRACTS_VERSION" == "{{ .Values.scDeploy.image.tag }}" ]]; then
      echo "contracts already deployed with version: ${DEPLOYED_SMART_CONTRACTS_VERSION}, aborting deployment" 1>&2
      exit 0
    fi
    {{- end }}

    echo "executing deploy commands"
    {{- range .Values.scDeploy.deployCommands }}
    {{ . | nindent 4 }}
    {{- end }}

    for envfile in /app/addresses/.env.*; do
      echo "---"
      echo "Updating configmap: ${CONFIGMAP_NAME} for the following contract addresses:"

      # Parse envfile adding a newline at the end if missing
      while IFS= read -r line || [[ -n "$line" ]]; do
        # Use `cut` to split the line at the first `=`
        # The first part is the key (CONTRACT_NAME) and the second is the value (CONTRACT_ADDRESS)
        CONTRACT_NAME=$(echo "$line" | cut -d'=' -f1)
        CONTRACT_ADDRESS=$(echo "$line" | cut -d'=' -f2)

        # Remove the "_ADDRESS" or  "_CONTRACT_ADDRESS" suffix to get the clean contract name
        CLEAN_NAME=$(echo "${CONTRACT_NAME}" | sed 's/_CONTRACT_ADDRESS\|_ADDRESS//g' | tr '[:upper:]' '[:lower:]')
        echo "Adding ${CLEAN_NAME}.address=${CONTRACT_ADDRESS}"
        add_key_to_configmap "${CONFIGMAP_NAME}" "${CLEAN_NAME}.address" "${CONTRACT_ADDRESS}"
      done < "${envfile}"
    done;

    {{- if .Values.scDeploy.verifyContracts }}
    npx --no-install hardhat verify:verify || true
    {{- end }}
    echo "adding the current contracts version to the configmap"
    kubectl patch configmap "${CONFIGMAP_NAME}" -p="{\"data\": {\"contracts.version\": \"{{ .Values.scDeploy.image.tag }}\"}}"
  upgrade-contracts.sh: |
    #!/bin/bash
    set -eo pipefail
    {{- if .Values.scDeploy.preventRedeployment }}
    # Prevent smart contract deployment if already done for current version
    if [[ "$DEPLOYED_SMART_CONTRACTS_VERSION" == "{{ .Values.scDeploy.image.tag }}" ]]; then
      echo "contracts already deployed with version: ${DEPLOYED_SMART_CONTRACTS_VERSION}, aborting deployment" 1>&2
      exit 0
    fi
    {{- end }}

    echo "executing upgrade commands"
    {{- range .Values.scUpgrade.upgradeCommands }}
    {{ . | nindent 4 }}
    {{- end }}
    echo "updating the contracts version to the configmap"
    CONFIGMAP_NAME="{{ .Values.scDeploy.configmap.name }}"
    kubectl patch configmap "${CONFIGMAP_NAME}" -p="{\"data\": {\"contracts.version\": \"{{ .Values.scDeploy.image.tag }}\"}}"
