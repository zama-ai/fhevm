# Commented env variables means they are optional. Their default value is the commented one.

commonConfig:
  databaseUrl: "postgresql://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_ENDPOINT)/connector"
  gatewayUrl: "ws://gateway-anvil-node:8546"
  chainId: "54321"
  gatewayContractAddresses:
    decryption: "0xc9bAE822fE6793e3B456144AdB776D5A318CB71e"
    gatewayConfig: "0xeAC2EfFA07844aB326D92d1De29E136a6793DFFA"
    kmsManagement: "0xF0bFB159C7381F7CB332586004d8247252C5b816"
  env: {}
# E.g. Database configuration from secret
#    - name: DATABASE_ENDPOINT
#      valueFrom:
#        secretKeyRef:
#          name: connector-database
#          key: endpoint
#    - name: DATABASE_USERNAME
#      valueFrom:
#        secretKeyRef:
#          name: connector-database
#          key: username
#    - name: DATABASE_PASSWORD
#      valueFrom:
#        secretKeyRef:
#          name: connector-database
#          key: password

kmsConnectorDbMigration:
  enabled: true
  annotations:
  image:
    name: ghcr.io/zama-ai/fhevm/kms-connector/db-migration
    tag: v0.8.0
  command:
    - "sqlx"
    - "migrate"
    - "run"
    - "--source"
    - "/migrations"
  env: {}
  serviceAccountName:
  # Size of the non-persistent volume.
  storage:
    size: 2Gi
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  nodeSelector:
  affinity:
  tolerations:

kmsConnectorGwListener:
  enabled: true
  nameOverride:
  image:
    name: ghcr.io/zama-ai/fhevm/kms-connector/gw-listener
    tag: v0.8.0
  replicas: 1
  env: {}
  tracing:
    enabled: false
  ports:
    monitoring: 9100
  serviceMonitor:
    enabled: false
  serviceAccountName:
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  probes:
    liveness:
      enabled: true
      httpGet:
        path: /liveness
        port: monitoring
      initialDelaySeconds: 10
      periodSeconds: 10
    readiness:
      enabled: true
      httpGet:
        path: /healthz
        port: monitoring
      initialDelaySeconds: 5
      periodSeconds: 10
  nodeSelector:
  affinity:
  tolerations:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

kmsConnectorKmsWorker:
  enabled: true
  nameOverride:
  image:
    name: ghcr.io/zama-ai/fhevm/kms-connector/kms-worker
    tag: v0.8.0
  replicas: 1
  config:
    kmsCoreEndpoints: "http://kms-core:50051"
  env: {}
  tracing:
    enabled: false
  ports:
    monitoring: 9100
  serviceMonitor:
    enabled: false
  serviceAccountName:
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  probes:
    liveness:
      enabled: true
      httpGet:
        path: /liveness
        port: monitoring
      initialDelaySeconds: 10
      periodSeconds: 10
    readiness:
      enabled: true
      httpGet:
        path: /healthz
        port: monitoring
      initialDelaySeconds: 5
      periodSeconds: 10
  nodeSelector:
  affinity:
  tolerations:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

kmsConnectorTxSender:
  enabled: true
  nameOverride:
  image:
    name: ghcr.io/zama-ai/fhevm/kms-connector/tx-sender
    tag: v0.8.0
  replicas: 1
  env:
  wallet:
    secret:
      name: kms-connector-tx-sender
      key: kms-wallet
  tracing:
    enabled: true
  ports:
    monitoring: 9100
  serviceMonitor:
    enabled: false
  serviceAccountName:
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  probes:
    liveness:
      enabled: true
      httpGet:
        path: /liveness
        port: monitoring
      initialDelaySeconds: 10
      periodSeconds: 10
    readiness:
      enabled: true
      httpGet:
        path: /healthz
        port: monitoring
      initialDelaySeconds: 5
      periodSeconds: 10
  nodeSelector:
  affinity:
  tolerations:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

# Set Pod Annotations, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# Set Pod Labels, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

tracing:
  endpoint: "http://otel-deployment-opentelemetry-collector.observability.svc.cluster.local:4317"
