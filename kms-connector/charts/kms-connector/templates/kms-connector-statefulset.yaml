{{- if .Values.kmsConnector.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kms-connector
    app.kubernetes.io/name: {{ include "kmsConnectorName" . }}
    {{- with .Values.kmsConnector.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/kms-connector-configmap.yaml") . | sha256sum }}
    {{- with .Values.kmsConnector.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  name: {{ include "kmsConnectorName" . }}
spec:
  replicas: {{ .Values.kmsPeers.count }}
  ordinals:
    start: {{ include "kmsPeersStartID" . }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: kms-connector
  serviceName: {{ include "kmsConnectorName" . }}
  template:
    metadata:
      labels:
        app: kms-connector
        app.kubernetes.io/name: {{ include "kmsConnectorName" . }}
        {{- with .Values.kmsConnector.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/kms-connector-configmap.yaml") . | sha256sum }}
        {{- with .Values.kmsConnector.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: kms-connector
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              kms-connector validate -c /var/lib/kms-connector/config.toml
              kms-connector start -c /var/lib/kms-connector/config.toml
          image: {{ .Values.kmsConnector.image.name }}:{{ .Values.kmsConnector.image.tag }}
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: RUN_MODE
              value: {{ .Values.runMode }}
            - name: RUST_LOG
              value: {{ .Values.rustLog }}
            - name: KMS_CONNECTOR_KMS_CORE_ENDPOINT
              {{- if .Values.kmsConnector.kmsCore.endpoint }}
              value: {{ .Values.kmsConnector.kmsCore.endpoint }}
              {{- else }}
              value: {{ printf "http://%s-$(POD_INDEX):%d" .Values.kmsConnector.kmsCore.name (int $.Values.kmsConnector.kmsCore.clientPort) | quote }}
              {{- end }}
{{- toYaml .Values.kmsConnector.env | nindent 12 }}
          volumeMounts:
            - mountPath: /var/lib/kms-connector/config.toml
              subPath: config.toml
              name: config-files
            - mountPath: /data
              name: data
      restartPolicy: Always
      imagePullSecrets:
        - name: registry-credentials
      volumes:
        - name: config-files
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ include "kmsConnectorName" . }}-config
            defaultMode: 0777
            # An array of keys from the ConfigMap to create as files
            items:
            - key: "config.toml"
              path: "config.toml"
      {{- with .Values.kmsConnector.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.kmsConnector.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.kmsConnector.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        labels:
          app: kms-connector
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.kmsConnector.storage.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.kmsConnector.storage.capacity }}
{{- end -}}
